[
  {
    "objectID": "index.html#co-first-authors",
    "href": "index.html#co-first-authors",
    "title": "A cycling, progenitor-like cell population at the base of atypical teratoid rhabdoid tumor subtype differentiation trajectories",
    "section": "Co-First Authors",
    "text": "Co-First Authors\n\nEnrique Blanco-Carmona\nIrene Paassen\nJiayou He"
  },
  {
    "objectID": "index.html#corresponding-authors",
    "href": "index.html#corresponding-authors",
    "title": "A cycling, progenitor-like cell population at the base of atypical teratoid rhabdoid tumor subtype differentiation trajectories",
    "section": "Corresponding Authors",
    "text": "Corresponding Authors\n\nDr. Jarno Drost - J.Drost@prinsesmaximacentrum.nl\nProf. Dr. Marcel Kool - M.Kool-5\\@prinsesmaximacentrum.nl"
  },
  {
    "objectID": "analysis/snRNAseq/01_Quality_Control.html",
    "href": "analysis/snRNAseq/01_Quality_Control.html",
    "title": "Quality Control",
    "section": "",
    "text": "# QC -----\n\n# RDS objects before QC are read into memory.\n\n# Define technology.\nsample.10v3.snRNAseq$technology &lt;- \"10X | v3 | snRNAseq\"\nsample.multiome$technology &lt;- \"10X | multiome | snRNAseq\"\n\n# Compute percentage of ribosomal RNA.\nsample.multiome[[\"percent.rb\"]] &lt;- Seurat::PercentageFeatureSet(sample.multiome, pattern = \"^RB-\")\nsample.10v3.snRNAseq[[\"percent.rb\"]] &lt;- Seurat::PercentageFeatureSet(sample.10v3.snRNAseq, pattern = \"^RB-\")\n\n# Merge datasets.\nsample &lt;- merge(x = sample.10v3.snRNAseq,\n                y = sample.multiome)\n\n# First QC round.\numis &lt;- sample$nCount_RNA &gt;= 1000\ngenes &lt;- sample$nFeature_RNA &gt;= 500\nmito &lt;- c(sample[, sample$technology == \"10X | v3 | scRNAseq\"]$percent.mt &lt;= 20, sample[, sample$technology != \"10X | v3 | scRNAseq\"]$percent.mt &lt;= 5) \n\nmask &lt;- umis & genes & mito\n\nsample &lt;- sample[, mask]\n\n# Second QC round.\numis &lt;- sample$nCount_RNA &lt;= (mean(sample$nCount_RNA) + 3 * stats::sd(sample$nCount_RNA))\ngenes &lt;- sample$nFeature_RNA &lt;= (mean(sample$nFeature_RNA) + 3 * stats::sd(sample$nFeature_RNA))\n\n\nmask &lt;- umis & genes\nsample &lt;- sample[, mask]"
  },
  {
    "objectID": "analysis/snRNAseq/02_Doublet_Removal.html",
    "href": "analysis/snRNAseq/02_Doublet_Removal.html",
    "title": "Doublet Removal",
    "section": "",
    "text": "# Load conda environment with python instalation. This depends on each user's.\nreticulate::use_condaenv(condaenv = \"rstudio_server\")\n\n# Import scrublet.\nscrublet &lt;- reticulate::import(\"scrublet\")\n\n# Compute doublets per patient.\nlist.output &lt;- list()\nfor (samp in unique(sample$orig.ident)){\n  rlang::inform(paste0(add_info(), crayon_body(\"Analysing sample: \"), crayon_key(samp)))\n  \n  sample.use &lt;- sample[, sample$orig.ident == samp]\n  \n  counts_transposed &lt;- Matrix::t(sample.use@assays$RNA@counts)\n\n  # Run scrublet.\n  # Code adapted from: https://github.com/swolock/scrublet/blob/master/examples/scrublet_basics.ipynb\n  scrub = scrublet$Scrublet(counts_transposed, expected_doublet_rate = 0.06)\n  \n  # Compute the doublets.\n  return_list = scrub$scrub_doublets() # List with the output from scrublet.\n  scrublet_score &lt;- return_list[[1]] # Scrublet scores per cell.\n  scrublet_binary &lt;- return_list[[2]] # Scrublet assignment for each cell.\n  \n  # Add cell names to the output, so it can be integrated in the Seurat object.\n  row.names(scrublet_score) &lt;- colnames(sample.use)\n  list.output[[samp]] &lt;- scrublet_score\n}\n\n# Get the doublet scores.\nlist.matrices &lt;- list()\nfor (samp in names(list.output)){\n  data &lt;- list.output[[samp]]\n  \n  data.use &lt;- data.frame(\"Cell\" = names(data),\n                         \"Score\" = unname(data),\n                         \"orig.ident\" = rep(samp, length(data))) %&gt;% \n              tibble::as_tibble() %&gt;% \n              dplyr::left_join(y = sample@meta.data %&gt;% tibble::rownames_to_column(var = \"Cell\") %&gt;% dplyr::select(dplyr::all_of(c(\"Cell\", \"nCount_RNA\", \"nFeature_RNA\"))),\n                               by = \"Cell\")\n  list.matrices[[samp]] &lt;- data.use\n}\ndata &lt;- do.call(rbind, list.matrices)\n\n# Add them as metadata.\nsample@meta.data &lt;- sample@meta.data %&gt;% \n                    tibble::rownames_to_column(var = \"Cell\") %&gt;% \n                    dplyr::left_join(y = data %&gt;% dplyr::select(dplyr::all_of(c(\"Cell\", \"Score\"))),\n                                     by = \"Cell\") %&gt;% \n                    tibble::column_to_rownames(var = \"Cell\") %&gt;% \n                    dplyr::rename(\"Scrublet Score\" = \"Score\")\n\n# Inspect the distribution of scores per patient and manually select a doublet score cutoff for each of them.\ncutoffs &lt;- list(\"H049-ATRT-0014\" = 0.175,\n                \"H049-ATRT-0005\" = 0.225,\n                \"H049-JVCT\" = 0.175,\n                \"H049-ATRT-0001\" = 0.175,\n                \"H049-ATRT-0013\" = 0.175,\n                \"H049-ATRT-0003\" = 0.175,\n                \"H049-ATRT-0010\" = 0.175,\n                \"H049-ATRT-0006\" = 0.2,\n                \"H049-ATRT-0022-P\" = 0.175,\n                \"H049-UV6K\" = 0.2,\n                \"H049-ATRT-0007\" = 0.2,\n                \"H049-ATRT-0009\" = 0.175,\n                \"ATRT21\" = 0.175,\n                \"ATRT24\" = 0.175,\n                \"ATRT04\" = 0.175,\n                \"ATRT05.2\" = 0.175,\n                \"ATRT15_RV3\" = 0.2,\n                \"JD113T\" = 0.175,\n                \"ATRT14\" = 0.175,\n                \"CG_SB_NB8358\" = 0.175)\n\n# Retrieve cells to exclude.\ncells.exclude &lt;- NULL\nfor (patient in unique(sample$orig.ident)){\n  cutoff &lt;- cutoffs[[patient]]\n  sample.test &lt;- sample[, sample$orig.ident == patient]\n  cells.exclude &lt;- append(cells.exclude, names(sample.test$`Scrublet Score`[sample.test$`Scrublet Score` &gt;= cutoff]))\n}\n\n# Exclude them.\nsample &lt;- sample[, !(colnames(sample) %in% cells.exclude)]"
  },
  {
    "objectID": "analysis/snRNAseq/03_Normalization_and_Integration.html",
    "href": "analysis/snRNAseq/03_Normalization_and_Integration.html",
    "title": "Normalization and Integration",
    "section": "",
    "text": "# Global variables\nn_pcs &lt;- 25\nregress_out_vars &lt;- c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\")\nnormalization_batch &lt;- \"orig.ident\"\nintegration_batch &lt;- \"technology\"\n\n\n# Set options so that all new assays are also Seurat v5.\noptions(Seurat.object.assay.version = \"v5\")\n\n# Change the assay to Seurat V5.\nsample[[\"RNA\"]] &lt;- as(object = sample[[\"RNA\"]], Class = \"Assay5\")\n\nsample[[\"RNA\"]] &lt;- split(x = sample[[\"RNA\"]], \n                         f = sample@meta.data[, normalization_batch])\n\n# Perform normalization.\nsample &lt;- Seurat::NormalizeData(sample)\nsample &lt;- Seurat::FindVariableFeatures(sample)\nsample &lt;- Seurat::ScaleData(sample, vars.to.regress = regress_out_vars)\n\n# Perform PCA.\nsample &lt;- Seurat::RunPCA(sample)\n\n# Perform Clustering.\nsample &lt;- Seurat::FindNeighbors(sample, \n                                dims = 1:n_pcs, \n                                reduction = \"pca\")\n\nsample &lt;- Seurat::FindClusters(sample,  \n                               cluster.name = \"unintegrated_clusters\")\n\n# Perform UMAP.\nsample &lt;- Seurat::RunUMAP(sample, \n                          dims = 1:n_pcs, \n                          reduction = \"pca\", \n                          reduction.name = \"umap_unintegrated\")\n\n# Fix dim names.\nsample@reductions$umap_unintegrated@key &lt;- \"umap_unintegrated_\"\ncolnames(sample@reductions$umap_unintegrated@cell.embeddings) &lt;- c(\"umap_unintegrated_1\", \"umap_unintegrated_2\")\n\n# Join layers.\nsample &lt;- SeuratObject::JoinLayers(sample)\nsample@assays[[\"RNA\"]]@layers &lt;- sample@assays[[\"RNA\"]]@layers[c(\"counts\", \"data\", \"scale.data\")]\n\n# Integrate with harmony.\nsample &lt;- harmony::RunHarmony(sample,\n                              assay = \"RNA\",\n                              group.by.vars = c(normalization_batch, integration_batch),\n                              theta = c(1, 2))\n\n# Reclustering and UMAP.\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"harmony\", dims = 1:30)\nsample &lt;- Seurat::FindClusters(sample, cluster.name = \"harmony_clusters\")\nsample &lt;- Seurat::RunUMAP(sample, reduction = \"harmony\", dims = 1:30, reduction.name = \"umap.harmony\", reduction.key = \"UMAPHARMONY_\")"
  },
  {
    "objectID": "analysis/snRNAseq/04_CNV_analysis.html",
    "href": "analysis/snRNAseq/04_CNV_analysis.html",
    "title": "CNV analysis",
    "section": "",
    "text": "# Methodology from: https://www.cell.com/cell-reports-medicine/pdf/S2666-3791(23)00426-3.pdf\n\n\n# Subset Seurat object to only contain tumor cells.\n\nsample@assays$RNA &lt;- as(sample@assays$RNA, \"Assay\")\n\n# Generate a new metadata column storing the mapping cell-metacell.\nsample[[\"metacell_mapping\"]] &lt;- \"not_mapped\"\nSeurat::Idents(sample) &lt;- sample$TME_annotation\n\n# Will store all the metacells.\nwhole_metacells &lt;- data.frame(test = rownames(sample), row.names = rownames(sample))\n# Will store the complete annotation for the metacells.\nwhole_annotation &lt;- data.frame(cluster_names = \"test\", row.names = \"test\")\n\nmeta_counter &lt;- 0 # To keep a count of the metacells that are created.\nmetacell_content &lt;- 5 # How many cells per metacell.\n\nfor (cluster_id in rev(levels(sample))){\n  print(sprintf(\"Computing metacells for cluster %s.\", cluster_id))\n  # Will store the metacells per cluster.\n  metacells &lt;- data.frame(test = rownames(sample), row.names = rownames(sample))\n  \n  # Subset the sample by each cluster ID.\n  chunksample &lt;- sample[, sample$TME_annotation == cluster_id]\n  \n  # Get the count data as a data frame and transpose it so columns are GENES and rows are CELLS.\n  countdata &lt;- t(as.data.frame(Seurat::GetAssayData(chunksample, assay = \"RNA\", slot =  \"counts\")))\n  \n  # Get the possible amount of metacells.\n  times &lt;- trunc(dim(countdata)[1] / metacell_content)\n  \n  for (i in seq(1,times)){\n    meta_counter &lt;- meta_counter + 1\n    # Generate slice points for each metacell.\n    start &lt;- ((i -1) * metacell_content + 1)\n    end &lt;- i * metacell_content\n    \n    \n    # Compute the slice as a data frame containing the sum of the subsetted cells. dims = 1 row (metacell), X columns (genes)\n    slice &lt;- as.data.frame(colSums(countdata[start:end, ]))\n    \n    # Get the name of the cells merged.\n    cell_names &lt;- rownames(countdata[start:end, ])\n    \n    # Add the metacell.\n    col_name &lt;- sprintf(\"metacell_%s\", meta_counter)\n    metacells[[col_name]] &lt;- slice[,1]\n    \n    # Add the mapping.\n    sample$metacell_mapping[colnames(sample) %in% cell_names] &lt;- col_name\n  }\n  \n  # Delete the test column as we already have more than 1 column in our data frame.\n  metacells[[\"test\"]] &lt;- NULL\n  \n  # Will contain the annotation of the generated metacells. Columns: cluster identities. Rows: each metacell.\n  annotation &lt;- data.frame(cluster_names = colnames(metacells), row.names = colnames(metacells))\n  # Replace the dummy cluster_names column's values for the actual label for the cluster.\n  annotation$cluster_names &lt;- cluster_id\n  \n  # Add the annotation data and the metacell data to the global containers. In the end: # Columns for metacell object = # rows for annotation object.\n  whole_metacells &lt;- cbind(whole_metacells, metacells)\n  whole_annotation &lt;- rbind(whole_annotation, annotation)\n}\n\n# Turn the names into characters for the sake of avoiding errors when subsetting.\nwhole_annotation$cluster_names &lt;- as.character(whole_annotation$cluster_names)\n\n# Delete the test row from the global annotation data.\nwhole_annotation &lt;- whole_annotation[!rownames(whole_annotation) %in% c(\"test\"), , drop = FALSE]\n\n# Delete the test column from the global metacell data.\nwhole_metacells$test &lt;- NULL\n\ncnv_analysis_folder &lt;- \"\" # Path to store the output of inferCNV\ndir.create(cnv_analysis_folder, recursive = TRUE)\nannotation_file &lt;- paste0(cnv_analysis_folder, \"/annotation_metacells.tsv\")\n\n# Save the annotation object.\nutils::write.table(whole_annotation,\n                   file = annotation_file,\n                   sep = \"\\t\",\n                   row.names = TRUE,\n                   col.names = FALSE,\n                   quote = FALSE)\n\n# Return the metacell object as a matrix (required for running inferCNV).\ncount_matrix &lt;- as.matrix(whole_metacells)\n\n# Run inferCNV:\ngene_ordering_file &lt;- \"\" # Path to where the file with the order of the genes is stored. It can also be downloaded here: https://data.broadinstitute.org/Trinity/CTAT/cnv/\n\nref_clusters &lt;- c(\"\") # Which clusters to use as a reference.\n\n# Create the inferCNV object.\ninfercnv_obj &lt;- infercnv::CreateInfercnvObject(raw_counts_matrix = count_matrix,\n                                               annotations_file = annotation_file,\n                                               delim = \"\\t\",\n                                               gene_order_file = gene_ordering_file,\n                                               ref_group_names = ref_clusters)\n\n# Run inferCNV.\ncnv_analysis_folder_output &lt;- paste0(cnv_analysis_folder, \"/output\") # This path needs to not exist in your filesystem otherwise inferCNV will stop complaining that the path exists.\n\ninfercnv_obj &lt;- infercnv::run(infercnv_obj,\n                              cutoff = 0.1,  # use 1 for smart-seq, 0.1 for 10x-genomics\n                              min_cells_per_gene = 3, # Default.\n                              out_dir = cnv_analysis_folder,  # dir is auto-created for storing outputs\n                              cluster_by_groups = TRUE,   # Cluster by groups.\n                              denoise = TRUE,\n                              HMM = TRUE,\n                              HMM_type = \"i6\",\n                              window_length = 201,\n                              num_threads = 8,\n                              resume_mode=FALSE)\n\n# For further denoising, you can apply median filtering, but this might remove true signal from the plot.\ninfercnv_obj_median_filtered = infercnv::apply_median_filtering(infercnv_obj)\n\ninfercnv::plot_cnv(infercnv_obj_median_filtered,\n                   out_dir =  cnv_analysis_folder,\n                   output_filename = 'infercnv.median_filtered',\n                   x.range = \"auto\",\n                   x.center = 1,\n                   title = \"infercnv\",\n                   color_safe_pal = FALSE)"
  },
  {
    "objectID": "analysis/snRNAseq/05_Supervised_Annotation.html",
    "href": "analysis/snRNAseq/05_Supervised_Annotation.html",
    "title": "Supervised Annotation",
    "section": "",
    "text": "# RDS object and annotation genesets are loaded.\n\n\nSeurat::DefaultAssay(sample) &lt;- \"RNA\"\n# This computes Enrichment scores and sets them up as an assay.\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample, input_gene_list = nmf_markers, flavor = \"UCell\", return_object = TRUE)\n\n# Retrieve the Seurat object.\nsample &lt;- out$Object\n\n# Scale data and perform dimensional reduction.\nsample &lt;- Seurat::ScaleData(sample)\nsample &lt;- Seurat::RunPCA(sample, features = rownames(sample))\nsample &lt;- Seurat::RunUMAP(sample, dims = 1:7)\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"pca\", dims = 1:7)\nsample &lt;- Seurat::FindClusters(sample, reduction = \"pca\", dims = 1:7)\n\n# Annotate clusters with clear enrichment."
  },
  {
    "objectID": "analysis/snATACseq/01_Analysis.html",
    "href": "analysis/snATACseq/01_Analysis.html",
    "title": "snATACseq analysis",
    "section": "",
    "text": "#This scripts described how to pre-process 10X Genomics multiome data starting with an output of cell-ranger-arc\n\n#For questions contact the Drost Lab: j.drost@prinsesmaximacentrum.nl\n\n#Pipeline as described below was used for organoids as well as tissue samples used for scMultiome-seq\n\n#Libraries needed\nlibrary(Signac)\nlibrary(JASPAR2020)\nlibrary(TFBSTools)\nlibrary(Seurat)\nlibrary(EnsDb.Hsapiens.v86)\nlibrary(BSgenome.Hsapiens.UCSC.hg38)\nlibrary(future)\nlibrary(ggplot2)\nlibrary(Matrix)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(Polychrome)\nlibrary(biomaRt)\nlibrary(GO.db)\nlibrary(org.Hs.eg.db)\nlibrary(RSQLite)\nlibrary(stringr)\nlibrary(SingleR)\nlibrary(clustree)\nlibrary(infercnv)\nlibrary(celldex)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(plyr)\nlibrary(plyranges)\nlibrary(chromVAR)\n\n#Change to your working directory\nsetwd(\"/hpc/pmc_drost/rstudio_ire/multiome_IP/libraries\")\n\n#plan(\"multicore\", workers = 4)\noptions(future.globals.maxSize = 50 * 1024 ^ 3)\n\n##Load gene sets used to remove confounder effect of cell cycle and red blood cells\ngenesRM &lt;- readRDS(\"genes_remove_HB_CC_stress.RDS\")\n\n\n# Configure variables ----\nbasedir &lt;- getwd()\nCFG &lt;- list()\nCFG$data_dir &lt;- paste0(basedir, \"/data/\")\nCFG$work_dir &lt;- paste0(basedir, \"/work_dir/\")\nCFG$output_dir &lt;- paste0(basedir, \"/output/\")\nCFG$metadata_dir &lt;- paste0(basedir)       #Needs to be changed depending on where this file is stored\nCFG$workspace_dir &lt;- paste0(basedir, \"/workspace/\")\nCFG$ndims &lt;- 40           #Number of dimensions for dimensional reduction\nCFG$random_seed &lt;- 1234   #Random seed for UMAP generation\nCFG$mito_pattern &lt;- \"^MT-\"\nCFG$min_txpts &lt;- 800      #As discussed with the single cell facility in the Princess Maxima Center \nCFG$max_txpts &lt;- 30000    \nCFG$min_features &lt;- 500  \nCFG$max_pctmito &lt;- 20     \nCFG$min_TSS &lt;- 1\nCFG$max_nucleo &lt;- 1.5\nCFG$max_frgmts &lt;- 50000\nCFG$min_frgmts &lt;- 800\nCFG$max_pct_hemo &lt;- 5\nCFG$gradient_colors = viridis::viridis(101, direction = -1)\nCFG$cbPalette4 &lt;- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#EE5050\",\n                    \"#111111\", \"#00E656\", \"#C8C8C8\", \"#E6009F\", \"hotpink1\", \"#D55E00\", \"#CC79A7\",\n                    \"cyan2\", \"darkmagenta\")\nset.seed(CFG$random_seed)\n\n\n#Get gene annotations for hg38\nannotation &lt;- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)\nucsc.levels &lt;- str_replace(string=paste(\"chr\",seqlevels(annotation),sep=\"\"), pattern=\"chrMT\", replacement=\"chrM\") #mitochondria annotation\nseqlevels(annotation) &lt;- ucsc.levels\ngenome(annotation) &lt;- \"hg38\"\n\n\n# Load data ----\n## Load metadata and create directory information ----\nmetadata.exp &lt;- read.table(paste0('/hpc/pmc_drost/rstudio_ire/multiome_IP/libraries/multiome_drost_metadata_new.txt'), header=T) #Loads metadata table for experiments (M) with accompanying library and analysis numbers\n\nexperiments &lt;-unique(metadata.exp[,1])   #Here you can subset for experiments (M) of interest (or just take all)\n\nlib &lt;- unique(paste0(metadata.exp$experiment, \"_\",\n                     metadata.exp$RNA_lib, \"_\",\n                     metadata.exp$ATAC_lib, \"_\",\n                     metadata.exp$analysis\n))  #Generates character vector with the full path name on the surfdrive seq_data folder to identify the libraries per experiment\n\n#Generates dataframe with the directory for the count install.packages ATAC fragments (column 3) to be retrieved\ndir &lt;- data.frame(experiments, \n                  dirFilt =paste0(CFG$data_dir, lib, \"/filtered_feature_bc_matrix\"),\n                  dirAll = paste0(CFG$data_dir, lib)) \n\nselect_data &lt;- unique((metadata.exp %&gt;% filter(source %in% c(\"organoid\",\"organoids\")))[,1]) #this line kchanges if you take the tissue data\n\ndir &lt;- dir[which(dir$experiments %in% select_data),]\n\n\n## Function to calculate colSums in GEX data per experiment  ---\n## Function to calculate colSums in GEX data per experiment  ---\nfun.GEX.colSums &lt;- function(a){\n  #b &lt;- Matrix::colSums(counts.list[[a]]) \n  b &lt;- Matrix::colSums(counts.list[[a]]$'Gene Expression') ##this is for combined analysis\n  return(b)\n}\n\n# load the RNA and ATAC data and create a Seurat object\n##Here we read only GEX data\nfun.READ10X &lt;- function(a){\n  counts.list &lt;- Read10X(data.dir = dir[dir$experiments == a, 2]) \n  #counts.list &lt;- counts.list[[1]] ##comment this if running both ATAC and GEX together\n  return(counts.list)\n}\n\nfun.GEX.meta &lt;- function(a){\n  data &lt;- counts.list[[a]]$'Gene Expression'                                #use this if doing combined ATAC and GEX reading\n  #data &lt;- counts.list[[a]]    \n  mitos &lt;- grep(CFG$mito_pattern, rownames(data), value = TRUE)             #Find mitochondrial genes\n  percent_mito &lt;- 100 * Matrix::colSums(data[mitos, ]) / GEX.colSums[[a]]   #Calculate percentage of mitochondrial genes per cell;  gives named vector which is necessary for adding the meta.data later (barcodes have to be included)\n  nuclear &lt;- setdiff(rownames(data), mitos)                                 #Define nuclear genes via setdiff function\n  log2_transcript_counts &lt;- log2(1 + Matrix::colSums(data[nuclear , ]))     #log2_transcript_counts for nuclear genes\n  log2_feature_counts &lt;- log2(1 + Matrix::colSums(data[nuclear, ] &gt; 0))\n  meta &lt;- data.frame(percent_mito = percent_mito,                           #create meta.data df for Seurat object\n                     log2_counts = log2_transcript_counts,\n                     log2_features = log2_feature_counts,\n                     source = rep(metadata.exp[match(a, metadata.exp[,1]),6], ncol(data)),\n                     lib = rep(a, ncol(data)))                              #Automatically adds correct experiment to df\n  list &lt;- list(meta, nuclear)\n  return(list)\n}\n\n\nfun.GEX.Seurat &lt;- function(a){\n  counts &lt;- counts.list[[a]]$`Gene Expression`[GEX.meta[[a]][[2]],]                               #use this if doing combined ATAC and GEX reading\n  #counts &lt;- counts.list[[a]]\n  srat &lt;- CreateSeuratObject(counts = counts, assay = \"RNA\", meta = GEX.meta[[a]][[1]])        #Add information in meta.data from above\n  return(srat)\n}\n\n## Load data for selected data/library ----\ncounts.list &lt;- lapply(select_data, fun.READ10X)     #Make sure to use the correct function (both, GEX, ATAC)\nnames(counts.list) &lt;- select_data\nGEX.colSums &lt;- sapply(select_data, fun.GEX.colSums)\nnames(GEX.colSums) &lt;- select_data\n\n## Generate GEX meta.data list ----\nGEX.meta &lt;- lapply(select_data, fun.GEX.meta)\nnames(GEX.meta) &lt;- select_data\n##Create Seurat object with data and metadata\nsrat.GEX &lt;- sapply(select_data, fun.GEX.Seurat)\n\n# create  ATAC assay and add it to the object\n##But first, read peak files\ngrFiles &lt;- list()\nfor(exp in select_data){\n  # ##read peaks file\n  bedFile &lt;- read.table(paste0(dir$dirAll[match(exp, dir$experiments)], \"/atac_peaks.bed\"),\n                        col.names = c(\"chr\", \"start\", \"end\")\n  )\n  grFiles[[exp]] &lt;- makeGRangesFromDataFrame(bedFile)\n}\n# Create a unified set of peaks to quantify in each dataset\ncombined.peaks &lt;- disjoin(x = c(grFiles[[1]], grFiles[[2]], grFiles[[3]]))\n# Filter out bad peaks based on length and combine peaks\npeakwidths &lt;- width(combined.peaks)\ncombined.peaks &lt;- combined.peaks[peakwidths  &lt; 10000 & peakwidths &gt; 20]\n##Here filter further to only keep standard chromosomes\ncombined.peaks &lt;- keepStandardChromosomes(combined.peaks, pruning.mode=\"coarse\")\n##Here filter to remove blacklisted genes\ncombined.peaks &lt;- subsetByOverlaps(x = combined.peaks, ranges = blacklist_hg38_unified, invert = TRUE)\n\natacAll &lt;- srat.GEX\nfor(exp in select_data){\n  fragpath &lt;- paste0(dir$dirAll[match(exp, dir$experiments)], \"/atac_fragments.tsv.gz\")\n  atacAll[[exp]][[\"ATAC\"]] &lt;- CreateChromatinAssay(\n    counts = counts.list[[exp]]$Peaks,\n    sep = c(\":\", \"-\"),\n    fragments = fragpath,\n    annotation = annotation\n  )\n  DefaultAssay(atacAll[[exp]]) &lt;- \"ATAC\"\n  atacAll[[exp]] &lt;- NucleosomeSignal(atacAll[[exp]])\n  atacAll[[exp]] &lt;- TSSEnrichment(atacAll[[exp]])\n  ##Create fragment object for each sample\n  frags &lt;- CreateFragmentObject(path = fragpath)\n  CRcounts &lt;- FeatureMatrix(fragments =Fragments(atacAll[[exp]]),\n                            features = combined.peaks, \n                            cells = colnames(atacAll[[exp]]))\n  atacAll[[exp]][[\"peaks\"]] &lt;- CreateChromatinAssay(\n    counts = CRcounts,\n    fragments = fragpath,\n    annotation = annotation\n  )\n  \n  \npdf(file=paste0(CFG$output_dir, exp, \"_QC_Seurat_merge_blacklist.pdf\"))\n  p &lt;- VlnPlot(\n    object = atacAll[[exp]],\n    features = c(\"nCount_RNA\", \"nCount_ATAC\", \"TSS.enrichment\", \"nucleosome_signal\"),\n    ncol = 4,\n    pt.size = 0\n  )\n  print(p)\n  dev.off()\n  saveRDS(atacAll, \"srat_merged_disjoin_organoids.RDS\")\n}\n\n\nfor(exp in select_data){\n  atacAll[[exp]] &lt;- subset(\n    x = atacAll[[exp]],\n    subset = nCount_RNA &gt;= CFG$min_txpts &    #Minimum threshold transcripts \n      nCount_RNA &lt;= CFG$max_txpts &     #Maximum threshold transcripts\n      percent_mito &lt;= CFG$max_pctmito &\n      nucleosome_signal &lt; CFG$max_nucleo &\n      TSS.enrichment &gt; CFG$min_TSS &\n      nCount_ATAC &lt; CFG$max_frgmts &\n      nCount_ATAC &gt; CFG$min_frgmts)\n  pdf(file=paste0(CFG$output_dir, exp, \"_QC_filtered_merged_BL.pdf\"))\n  p &lt;- VlnPlot(\n    object = atacAll[[exp]],\n    features = c(\"nCount_RNA\", \"nCount_ATAC\", \"TSS.enrichment\", \"nucleosome_signal\"),\n    ncol = 4,\n    pt.size = 0\n  )\n  print(p)\n  dev.off()\n}\n\n\n##Merge seurat objects from the filtered libraries\nsrat &lt;- merge(atacAll[[1]], c(atacAll[[2]], atacAll[[3]]),\n              add.cell.ids = names(atacAll))\n\n## Normalize GEX data using LogNormalize ----\nDefaultAssay(srat) &lt;- \"RNA\"\nsrat &lt;- NormalizeData(srat, normalization.method = \"LogNormalize\")    #Goes to slot \"Data\" of RNA assay (GetAssayData function)\nsrat &lt;- ScaleData(srat, features = rownames(srat), verbose = FALSE)   #Goes to slot \"scale.data\" of RNA assay (GetAssayData function)\nsrat &lt;- FindVariableFeatures(srat)\n\n## Normalize GEX data using SCTransform ----\n# SCTransform automatically scales data and finds variables\nDefaultAssay(srat) &lt;- \"RNA\"\nsrat &lt;- SCTransform(srat,verbose = FALSE, variable.features.n = 3000)  #Specify number of features for downstream analysis\n\nsaveRDS(srat, \"090523_srat_SCT_done\")\nsrat &lt;- readRDS(\"120523_srat_SCT_done_organoids\")\n\n## Inspect most highly variable genes ----\nDefaultAssay(srat) &lt;- \"SCT\"\ntop10 &lt;- head(VariableFeatures(srat), 10)\nplot1 &lt;- VariableFeaturePlot(srat)\nplot2 &lt;- LabelPoints(plot = plot1, points = top10)\nplot2\n\n##Dimensional reduction ----\n### PCA: Calculation ----\n# There can only be one PCA in the Seurat object. Start with SCTransform to generate UMAP; LogNormalized will be used for gene expression analysis\nsrat &lt;- RunPCA(srat, npcs =50)                             #PCA for SCTransformed Seurat object\n### PCA: Visualize nuclei along the first two principal axes per normalization method ----\nDimPlot(srat, reduction = \"pca\", pt.size = 1, group.by = 'lib', cols = CFG$cbPalette4)\n### Elbow Plot to choose number of dimensions ----\nElbowPlot(srat, ndims = 50, reduction = \"pca\")\n###Alternatively, consider a more quantitative approach to determine how many pcs to use\n# Determine percent of variation associated with each PC\npct &lt;- srat@reductions$pca@stdev / sum(srat@reductions$pca@stdev) * 100\n# Calculate cumulative percents for each PC\ncum &lt;- cumsum(pct)\n# Determine which PC exhibits cumulative percent greater than 90% and % variation associated with the PC as less than 5\nco1 &lt;- which(cum &gt; 90 & pct &lt; 5)[1]\n# Determine the difference between variation of PC and subsequent PC\nco2 &lt;- sort(which((pct[1:length(pct)-1] - pct[2:length(pct)]) &gt; 0.1),  decreasing = T)[1] + 1 # last point where change of % of variation is more than 0.1%.\n# Minimum of the two calculation\npcs &lt;- min(co1, co2) # change to any other number\n\n### PC scores heatmaps ----\nDimHeatmap(srat, dims = 1:20, cells = 100)\n\n### UMAP (before filtering) ----\nsrat &lt;- RunUMAP(srat, dims = 1:30, n.neighbors = 30)          #Default n.neighbors = 30\npdf(file = \"Unfiltered variable features UMAP_merged.pdf\")\nDimPlot(srat, reduction = \"umap\", pt.size = 0.5, group.by = 'lib', cols = CFG$cbPalette4) +\n  ggtitle(\"SCT unfiltered UMAP, 20 PCs\")\ndev.off()\n\n\n## Filter certain gene groups from variable features ----\n# This concerns cell cycle genes, stress genes etc. \n##It makes use of the SCutils package developed by our scGenomics facility\n### Remove cells with high hemoglobin content ----\nhb.genes &lt;- genesRM$hb.genes\nhb.genes &lt;- intersect(hb.genes, rownames(srat))\nhb.counts &lt;- Matrix::colSums(srat@assays$RNA@counts[hb.genes,])\nsrat &lt;- AddMetaData(srat,\n                    col.name = \"log2hb_genes\",\n                    metadata = log2(1 + hb.counts))\nsrat &lt;- AddMetaData(srat,\n                    col.name = \"pct_hemo\",\n                    metadata = 100 * hb.counts/srat@meta.data$nCount_RNA)\nsrat &lt;- AddMetaData(srat,\n                    col.name = \"percent.rb\",\n                    metadata = PercentageFeatureSet(srat, pattern = \"^RP[SL]\"))\nsrat &lt;- CellCycleScoring(object = srat,\n                         g2m.features = cc.genes$g2m.genes,\n                         s.features = cc.genes$s.genes)\n\nsrat &lt;- subset(srat, pct_hemo &lt;= CFG$max_pct_hemo)  #Will likely only filter out few nuclei\n\n#Now we have a filtered dataset where we need to add a chromvar assay \n#Add a chromVAR array to the seurat object \n# Get a list of motif position frequency matrices from the JASPAR database\npfm &lt;- getMatrixSet(\n  x = JASPAR2020,\n  opts = list(collection = \"CORE\",species = \"Homo sapiens\", tax_group = 'vertebrates', all_versions = FALSE)\n)\n\n# add motif information\nDefaultAssay(srat) &lt;- 'peaks'\ntissue &lt;- SetIdent(srat, value=\"cell_status_and_subtype\")\ntissue &lt;- AddMotifs(\n  object = tissue,\n  genome = BSgenome.Hsapiens.UCSC.hg38,\n  pfm = pfm\n)\n\n\n#Add chromVar assay to the seurat object\nregister(MulticoreParam(8))\nregister(SerialParam())\nDefaultAssay(srat) &lt;- \"peaks\"\n\n# Calculate chromvar scores on the peak assay\n#Run this as seperate script as job instead of in the command line \ntissue &lt;- RunChromVAR(\n  object = srat,\n  assay = 'peaks',\n  genome = BSgenome.Hsapiens.UCSC.hg38)"
  },
  {
    "objectID": "analysis/Xenium/01_Analysis.html",
    "href": "analysis/Xenium/01_Analysis.html",
    "title": "Xenium analysis",
    "section": "",
    "text": "# Processing\n\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(spacexr)\nlibrary(tidyverse)\n\n##### The following create a \"minimal\" Seurat object that can be used for filtering.\n\n\nmetadata &lt;- as.data.frame(data.table::fread(paste0(dir.path,\"cells.csv.gz\"))) # Read cell data\n\n###### Read the gene expression data and create Seurat object\ndata &lt;- Read10X(paste0(dir.path,\"cell_feature_matrix/\"))\nsrat &lt;- CreateSeuratObject(data$`Gene Expression`, assay = \"Xenium\", meta.data = metadata)\n\n##### Subset for cells with at least 10 detected transcripts and a positive cell area\nsrat &lt;- subset(srat, cells = WhichCells(srat, expression = transcript_counts &gt;= 10 & cell_area &gt; 1)) \n\n\n##### Construct the reference for RCTD annotation. In this specific case we are using the ATRT Multiome data\n##### \n\nmultiome &lt;- readRDS(\"Multiome.rds\") # Seurat object with the Multiome data\ncounts &lt;- GetAssayData(multiome, assay = \"RNA\", slot = \"counts\")\ncluster &lt;- as.factor(multiome$Tumor_Annotation)\nnames(cluster) &lt;- colnames(multiome)\nnUMI &lt;- multiome$nCount_RNA\nnames(nUMI) &lt;- colnames(multiome)\nnUMI &lt;- colSums(counts)\n\nreference &lt;- Reference(counts, cluster, nUMI)\n\n##### Construct the RCTD query object\n\ncells &lt;- read.csv(\"cells_stats.csv\") # Vector of cell ID's corresponding to the sample of interest. Excludes cells manually assigned as \"Necrotic\"\nsrat &lt;- subset(srat, cells = cells$Cell.ID)\n\nquery.counts &lt;- GetAssayData(srat, assay = \"Xenium\", slot = \"counts\")\ncoords &lt;- FetchData(srat, c(\"x_centroid\",\"y_centroid\")); colnames(coords) &lt;- c(\"x\",\"y\")\n\nquery &lt;- SpatialRNA(coords, query.counts, colSums(query.counts))\nrm(cells, coords, query.counts, srat);gc()\n\nRCTD &lt;- create.RCTD(query, reference, max_cores = 8, UMI_min = 10, UMI_min_sigma = 10)\n\n##### Run RCTD and add annotations to the Seurat object\nRCTD &lt;- run.RCTD(RCTD, doublet_mode = \"doublet\")\n\nannotations.df &lt;- RCTD@results$results_df\nannotations &lt;- annotations.df$first_type\nnames(annotations) &lt;- rownames(annotations.df)\nannotations &lt;- as.data.frame(annotations)\ncolnames(annotations) &lt;- \"group\"\nsrat &lt;- AddMetaData(srat, metadata = annotations)\n\n\n##### Normalize counts by cell area\nsrat &lt;- GetAssayData(srat, assay = \"Xenium\", layer = \"counts\")\n\nnorm &lt;- sweep(raw, 2, srat$cell_area, FUN = '/')\n\nsrat &lt;- SetAssayData(object = srat,\n                       layer = \"data\",\n                       new.data = norm,\n                       assay = \"Xenium\")\n\n\n# Code is commented because of compilation errors with Quarto.\n\n# # Neighborhood analysis\n# # The following code was used to perform Neighborhood Enrichment analysis and export the results to CSV files for downstream analysis in R\n# # Run independently for each tumor sample\n# \n# import scimap as sm\n# import anndata as ad\n# import pandas as pd\n# import scanpy as sc\n# import squidpy as sq\n# \n# # Read expression matrix\n# adata = sc.read_10x_h5(\n#     filename = \"cell_feature_matrix.h5\"\n# )\n# \n# # Read the cell info file\n# df = pd.read_csv(\n#     \"cells.csv.gz\"\n# )\n# \n# df.set_index(adata.obs_names, inplace = True)\n# adata.obs = df.copy()\n# \n# adata.obsm[\"spatial\"] = adata.obs[[\"x_centroid\",\"y_centroid\"]].copy().to_numpy()\n# \n# # Read RCTD annotations\n# annotations = pd.read_csv(\n#     \"ANNOTATIONS.csv\"\n# )\n# \n# # Keep only malignant cells\n# annotations = annotations[~annotations.group.isin([\"Necrotic\",\"Mural\",\"Endothelial\",\"OPC\",\"Microglia_Immune\",\"Astrocytes\",\"Neurons\"])]\n# \n# adata_sub = adata[annotations[\"cell_id\"]].copy()\n# del(adata)\n# \n# annotations.set_index(adata_sub.obs_names, inplace = True)\n# adata_sub.obs[\"type\"]= annotations[\"group\"].copy().astype('category')\n# \n# adata_sub.obs['imageid'] = 'imageid'\n# \n# adata_sub = sm.tl.spatial_interaction (adata_sub, \n#                                   method='knn', \n#                                   knn=10, \n#                                   label='spatial_interaction_knn',\n#                                   x_coordinate = 'x_centroid', \n#                                   y_coordinate = 'y_centroid',\n#                                   phenotype = 'type')\n# \n# adata_sub.uns['spatial_interaction_knn'].to_csv(\"Output.csv\", index=True)\n# \n# # Export the interaction frequencies\n# sq.gr.spatial_neighbors(adata_sub, coord_type = \"generic\", delaunay = False, n_neighs = 10)\n# \n# pd.DataFrame(adata_sub.uns[\"type_interactions\"]).to_csv(\"interactions.csv\")"
  },
  {
    "objectID": "analysis/bulkRNAseq/01_GenerateDESeq2Dataset.html",
    "href": "analysis/bulkRNAseq/01_GenerateDESeq2Dataset.html",
    "title": "Generate DESeq2 Dataset",
    "section": "",
    "text": "library(magrittr)\n\ncount.matrix &lt;- \"path_to_counts\"\nmetadata.matrix &lt;- \"path_to_metadata\"\n# Read the counts and store it as RDS.\ncounts &lt;- read.table(count.matrix, sep = \" \") %&gt;% \n          tibble::remove_rownames() %&gt;% \n          tibble::column_to_rownames(var = \"EnsemblGene\")\n\n# Read metadata and store it as RDS.\nmetadata &lt;- readr::read_table(metadata.matrix) \nmetadata &lt;- as.data.frame(metadata) %&gt;% tibble::column_to_rownames(var = \"sampleName\")\n\n# Make all variables factors\nmetadata$condition &lt;- factor(metadata$condition)\nmetadata$replicate &lt;- factor(metadata$replicate)\nmetadata$treatment &lt;- factor(metadata$treatment)\nmetadata$model &lt;- factor(metadata$model)\n\n# Ensure order of metadata and order of counts columns are the same.\nassertthat::assert_that(isTRUE(sum(colnames(counts) == rownames(metadata)) == 16),\n                        msg = \"The order of columns in the counts and rows in metadata is not the same.\")\n\n# And filter for low expressed genes \n## Keep genes with at least 10 counts\n\nmin.counts &lt;- 10\n\nkeep &lt;- rowSums(counts) &gt;= min.counts\ncounts &lt;- counts[keep, ] \n\n# Create the DESeq2 object.\ndds &lt;- DESeq2::DESeqDataSetFromMatrix(countData = counts,\n                                      colData = metadata,\n                                      design = ~ condition)\n\n\n# Save this dds file file and use it in the rest of the scripts."
  },
  {
    "objectID": "analysis/bulkRNAseq/02_QC_Assessment.html",
    "href": "analysis/bulkRNAseq/02_QC_Assessment.html",
    "title": "Quality Control",
    "section": "",
    "text": "library(magrittr)\n\ndds.path &lt;- \"path_to_dds_file\"\ndds &lt;- readRDS(dds.path)\n\n# Transform data.\nvsd &lt;- DESeq2::vst(dds)\n\n# PCA plot.\np1 &lt;- DESeq2::plotPCA(vsd, intgroup = c(\"treatment\")) + \n                      ggplot2::theme_bw(base_size = 18) + \n                      ggplot2::coord_cartesian() + \n                      ggplot2::scale_color_manual(values = stats::setNames(SCpubr::do_ColorPalette(\"steelblue\", square = TRUE), levels(dds$treatment)))\n\np1$labels$colour &lt;- \"Treatment\"\np1$layers[[1]]$aes_params$size &lt;- 8\np1$layers[[1]]$aes_params$alpha &lt;- 0.75\n  \np2 &lt;- DESeq2::plotPCA(vsd, intgroup = c(\"model\")) + \n      ggplot2::theme_bw(base_size = 18) + \n      ggplot2::coord_cartesian() + \n      ggplot2::scale_color_manual(values = c(\"ATRT04\" = \"#243a76\", \"ATRT08\" = \"#096837\"))\np2$labels$colour &lt;- \"Model\"\np2$layers[[1]]$aes_params$size &lt;- 8\np2$layers[[1]]$aes_params$alpha &lt;- 0.75\n\np3 &lt;- DESeq2::plotPCA(vsd, intgroup = c(\"replicate\")) + \n      ggplot2::theme_bw(base_size = 18) + \n      ggplot2::coord_cartesian() + \n      ggplot2::scale_color_manual(values = stats::setNames(SCpubr::do_ColorPalette(\"steelblue\", opposite = TRUE), levels(dds$replicate)))\np3$labels$colour &lt;- \"Replicate\"\np3$layers[[1]]$aes_params$size &lt;- 8\np3$layers[[1]]$aes_params$alpha &lt;- 0.5\n\np.pca &lt;- p1 | p2 | p3\n\n\n# Sample to sample distance plot.\ndist.matrix &lt;- as.matrix(stats::dist(t(SummarizedExperiment::assay(vsd))))\n\np.dist &lt;- pheatmap::pheatmap(dist.matrix,\n                             cutree_rows = 2,\n                             cutree_cols = 2,\n                             col = colorRampPalette(rev(RColorBrewer::brewer.pal(9, \"Blues\")))(255),\n                             border_color = \"white\",\n                             treeheight_row = 0,\n                             treeheight_col = 0, \n                             ) %&gt;% \n          ggplotify::as.ggplot() + \n          ggplot2::coord_fixed()\n\n# Sample correlation plot.\np.cor &lt;- pheatmap::pheatmap(stats::cor(SummarizedExperiment::assay(vsd)),\n                            border_color = \"white\",\n                            col = colorRampPalette(rev(RColorBrewer::brewer.pal(11, \"RdBu\")))(255),\n                            cutree_rows = 2,\n                            cutree_cols = 2,\n                            treeheight_row = 0,\n                            treeheight_col = 0) %&gt;% \n         ggplotify::as.ggplot() + \n         ggplot2::coord_fixed()\n\n# MeanSD plot\np.meansd &lt;- vsn::meanSdPlot(SummarizedExperiment::assay(vsd))$gg + \n            ggplot2::scale_fill_gradientn(colors = RColorBrewer::brewer.pal(\"YlGnBu\", n = 9)) +\n            ggplot2::theme_bw(base_size = 18) \np.meansd$layers[[1]]$aes_params$colour &lt;- \"black\"\np.meansd$layers[[2]]$aes_params$linewidth &lt;- 2\n\nlayout &lt;- \"AAA\n           BCD\"\np &lt;- patchwork::wrap_plots(A = p.pca,\n                           B = p.dist,\n                           C = p.cor,\n                           D = p.meansd,\n                           design = layout)"
  },
  {
    "objectID": "analysis/bulkRNAseq/03_DE_Analysis.html",
    "href": "analysis/bulkRNAseq/03_DE_Analysis.html",
    "title": "DE analysis",
    "section": "",
    "text": "library(magrittr)\n\ndds.path &lt;- \"path_to_dds_file\"\ndds &lt;- readRDS(dds.path)\n\n# Table of equivalences between ENSID to gene SYMBOL\npath.to.equivalences &lt;- \"path_to_ensID_to_SYMBOL_equivalences\"\nannotLookup &lt;- readRDS(path.to.equivalences)\n\n# Run DESeq.\ndds &lt;- DESeq2::DESeq(object = dds)\n\n# Get the comparison contrasts.\ncontrasts &lt;- c(paste0(c(\"AT04_Enti\", \"AT04_RO31\",\"AT04_Thio\"), \"_vs_\", \"AT04_DMSO\"),\n               paste0(c(\"AT08_Enti\", \"AT08_RO31\",\"AT08_Thio\"), \"_vs_\", \"AT08_DMSO\"))\n\n\n# Compute DE.\nres.list &lt;- list()\n\n# Iterate across pair of conditions.\nfor (cond1 in levels(dds$condition)){\n  for (cond2 in levels(dds$condition)){\n    contrast &lt;- paste0(cond1, \"_vs_\", cond2)\n    if (isTRUE(contrast %in% contrasts)){\n      # Compute DE genes.\n      res &lt;- DESeq2::results(dds, contrast = c(\"condition\", cond1,  cond2))\n      # Add matching gene symbols.\n      res &lt;- res %&gt;% \n             as.data.frame() %&gt;% \n             tibble::rownames_to_column(var = \"EnsemblGene\") %&gt;% \n             dplyr::left_join(annotLookup, by = \"EnsemblGene\")\n      \n      # Remove duplicated gene symbols.\n      res &lt;- res[!duplicated(res$Gene), ]\n      \n      # Remove NAs in gene symbols\n      res &lt;- res[!is.na(res$Gene), ]\n      \n      # Add gene symbols to rownames.\n      res &lt;- res %&gt;% \n             tibble::remove_rownames() %&gt;% \n             tibble::column_to_rownames(var = \"Gene\")\n      \n      # Filter for significance and order by descending logFC and pvalue.\n      res &lt;- res %&gt;% \n             dplyr::filter(padj &lt;= 0.05) %&gt;% \n             dplyr::arrange(.data$padj, dplyr::desc(abs(.data$log2FoldChange)))\n      \n      # Add result to result list.\n      res.list[[contrast]] &lt;- res\n    }\n  }\n}\n\n# Save the results as an RDS file.\n\n\n# Retrieve top 100 DE genes per contrast and condition.\nlist.genes &lt;- list()\n\nfor (contrast in names(res.list)){\n  # Drugs.\n  cond1 &lt;- stringr::str_split(contrast, pattern = \"_vs_\")[[1]][1]\n  # DMSO.\n  cond2 &lt;- stringr::str_split(contrast, pattern = \"_vs_\")[[1]][2]\n  \n  res &lt;- res.list[[contrast]]\n  \n  genes.up &lt;- res %&gt;% dplyr::filter(.data$log2FoldChange &gt; 0) %&gt;% rownames\n  genes.up &lt;- genes.up[1:100]\n  \n  genes.down &lt;- res %&gt;% dplyr::filter(.data$log2FoldChange &lt; 0) %&gt;% rownames\n  genes.down &lt;- genes.down[1:100]\n  \n  list.genes[[paste0(contrast, \"_MarkersFor_\", cond1)]] &lt;- genes.up\n  list.genes[[paste0(contrast, \"_MarkersFor_\", cond2)]] &lt;- genes.down\n}\n\n# Save the results as an RDS file."
  },
  {
    "objectID": "visualization/Figure_1.html",
    "href": "visualization/Figure_1.html",
    "title": "Figure 1",
    "section": "",
    "text": "# Overarching Seurat object.\npath.to.sample &lt;- \"path_to_snRNAseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\n# Color palettes.\nsubtype.colors &lt;- c(\"ATRT-TYR\"    = \"#87191c\",\n                    \"ATRT-SHH\"    = \"#243a76\",\n                    \"ATRT-MYC\"    = \"#096837\")\n\norig.colors &lt;- c(\"ATRT-TYR-1\" = \"#feac81\",\n                 \"ATRT-TYR-2\" = \"#f78462\",\n                 \"ATRT-TYR-3\" = \"#b9563f\",\n                 \"ATRT-TYR-4\" = \"#f05b43\",\n                 \"ATRT-TYR-5\" = \"#c62320\",\n                 \"ATRT-TYR-6\" = \"#831818\",\n                 \"ATRT-SHH-1\" = \"#abc9c8\",\n                 \"ATRT-SHH-2\" = \"#72aeb6\",\n                 \"ATRT-SHH-3\" = \"#4692b0\",\n                 \"ATRT-SHH-4\" = \"#2f70a1\",\n                 \"ATRT-SHH-5\" = \"#bad6f9\",\n                 \"ATRT-SHH-6\" = \"#7db0ea\",\n                 \"ATRT-SHH-7\" = \"#447fdd\",\n                 \"ATRT-SHH-8\" = \"#134b73\",\n                 \"ATRT-SHH-9\" = \"#0a3351\",\n                 \"ATRT-MYC-1\" = \"#c2d6a4\",\n                 \"ATRT-MYC-2\" = \"#9cc184\",\n                 \"ATRT-MYC-3\" = \"#3c7c3d\",\n                 \"ATRT-MYC-4\" = \"#1f5b25\")\n\ntechnology.colors &lt;- c(\"10X v3 5'\"    = \"#005f73\",\n                       \"10X multiome\" = \"#ee9b00\")\n\ntissue.colors &lt;- c(\"Snap frozen\" = \"#b15102\",\n                   \"Viably frozen\" = \"#0262B1\")\n\ncolors.use &lt;- c(\"Astrocytes\"               = \"#FED9B7\",\n                \"Neurons\"                  = \"#DCFEB7\",\n                \"OPC\"                      = \"#B7FED9\",\n                \"Microglia\"                = \"#B7DCFE\", \n                \"Endothelial\"              = \"#D9B7FE\",\n                \"Pericytes\"                = \"#FEB7DC\")\n\ncolors.use.tumor &lt;- c(\"IPC-like\"                 = \"#be920e\",            \n                      \"CP-like\"                  = \"#be660e\",\n                      \"Cilia-like\"               = \"#be0e0e\",\n                      \"Mesenchymal-like\"         = \"#0ebe66\",\n                      \"RG-like\"                  = \"#0497c8\",\n                      \"NPC-like\"                 = \"#0466c8\",\n                      \"OPC-like\"                 = \"#0435c8\",\n                      \"Hypoxic\"                  = \"#92be0e\",\n                      \"Immune-like\"              = \"#920ebe\")\n\n# Figure 1B ---------\n\n# Read in metadata.\nmetadata &lt;- as.data.frame(readxl::read_excel(\"/omics/odcf/analysis/hipo/hipo_049/ATRT/ATRT_Publication_GitHub/datasets/ATRT_metadata.xlsx\"))\nmetadata$ATRT_subtype[!(metadata$ATRT_subtype %in% c(\"ATRT-TYR\", \"ATRT-MYC\"))] &lt;- \"ATRT-SHH\"\n\n\n\n\n\n\n# Process metadata.\nmetadata &lt;- metadata %&gt;% \n            tibble::as_tibble() %&gt;% \n            dplyr::mutate(\"ATRT subgroup\" = factor(.data$ATRT_subtype, levels = c(\"ATRT-TYR\", \"ATRT-SHH\", \"ATRT-SHH-1A\", \"ATRT-SHH-1B\", \"ATRT-SHH-2\", \"ATRT-MYC\")),\n                          \"Tissue Type\" = factor(.data$tissue_type, levels = c(\"Snap frozen\", \"Viably frozen\")),\n                          \"Technology\" = factor(.data$`Sequencing technology`, levels = c(\"10X v3 5'\", \"10X multiome\"))) %&gt;% \n            dplyr::select(dplyr::all_of(c(\"ATRT subgroup\", \"Tissue Type\", \"Technology\", \"id\"))) %&gt;% \n            as.data.frame() %&gt;% \n            tibble::column_to_rownames(\"id\")\n\n\n# Generate final list of colors\ncolors.use &lt;- list(\"ATRT subgroup\" = subtype.colors,\n                   \"ID\" = orig.colors,\n                   \"Technology\" = technology.colors,\n                   \"Tissue Type\" = tissue.colors)\n\n# Reorder rows and columns.\nmetadata &lt;- metadata[rev(1:nrow(metadata)), rev(colnames(metadata))]\n\n# Plot.\np &lt;- SCpubr::do_MetadataPlot(from_df = TRUE,\n                            df = metadata,\n                            legend.position = \"bottom\",\n                            legend.ncol = 2,\n                            colors.use = colors.use,\n                            axis.text.face = \"plain\", \n                            font.size = 16, \n                            legend.font.size = 14, \n                            legend.symbol.size = 4,\n                            flip = FALSE,\n                            cluster = FALSE)\n# Make names go on top.\np[[1]] &lt;- p[[1]] +\n          ggplot2::theme(axis.text.x.top = ggplot2::element_text(color = \"black\", angle = 45, hjust = 0, vjust = 0.1),\n                         axis.ticks.x.top = ggplot2::element_line(color = \"black\")) +\n          ggplot2::guides(\"fill\" = ggplot2::guide_legend(ncol = 1, title.position = \"top\", title.hjust = 0.5))\n\n# Change legend style of second and third plots to only one column.\np[[2]] &lt;- p[[2]] +\n          ggplot2::guides(\"fill\" = ggplot2::guide_legend(ncol = 1, title.position = \"top\", title.hjust = 0.5))\n\np[[3]] &lt;- p[[3]] +\n          ggplot2::guides(\"fill\" = ggplot2::guide_legend(ncol = 1, title.position = \"top\", title.hjust = 0.5))\n\n\n# Make names disappear on bottom.\np &lt;- p + \n     ggplot2::theme(axis.text.x.bottom = ggplot2::element_blank(),\n                         axis.ticks.x.bottom = ggplot2::element_blank())\n\n\n\n# Figure 1C ---------\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        group.by = \"ID\",\n                        reduction = \"umap_unintegrated\",\n                        font.size = 16,\n                        label.size = 4,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 4,\n                        label = TRUE,\n                        repel = TRUE,\n                        colors.use = orig.colors,\n                        legend.icon.size = 8,\n                        legend.ncol = 4,\n                        legend.position = \"none\")\n\n\n\n# Figure 1D ---------\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        group.by = \"Final_Annotation\",\n                        reduction = \"umap_unintegrated\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        colors.use = colors.use,\n                        legend.icon.size = 8,\n                        legend.ncol = 2,\n                        na.value = \"grey90\",\n                        legend.position = \"bottom\",\n                        idents.keep = c(\"Microglia\", \"Astrocytes\", \"Neurons\", \"OPC\", \"Endothelial\", \"Pericytes\"))\n\n\n# Figure 1E ---------\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        group.by = \"subtype\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        colors.use = subtype.colors,\n                        legend.icon.size = 8,\n                        legend.ncol = 3,\n                        legend.position = \"bottom\")\n\n# Figure 1F ---------\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        group.by = \"Final_Annotation\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        colors.use = colors.use,\n                        legend.icon.size = 8,\n                        legend.ncol = 2,\n                        na.value = \"grey90\",\n                        legend.position = \"bottom\",\n                        idents.keep = c(\"Microglia\", \"Astrocytes\", \"Neurons\", \"OPC\", \"Endothelial\", \"Pericytes\"))\n\n# Figure 1G ---------\nsupervised.annotation.markers.path &lt;- \"\"\nmarkers &lt;- readRDS(supervised.annotation.markers.path)\n\n# Compute enrichment wiht SCpubr.\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample, \n                             input_gene_list = markers, \n                             flavor = \"UCell\", \n                             return_object = TRUE,\n                             scale_scores = FALSE)\n\n# Retrieve the Seurat object with enrichment scores.\nsample &lt;- out$Object\nsample &lt;- Seurat::ScaleData(sample)\n\n\nnmf.based &lt;- c(\"Cycle\", \"Stress\", \"Interferon\", \"Hypoxia\", \"Oxphos\", \"Metal\", \"Mesenchymal\", \"pEMT\", \"Alveolar\", \"Basal\", \"Squamous\", \"Glandular\", \"Ciliated\", \"AC\", \"OPC\", \"NPC\")\natlas.based &lt;- c(\"Neuron\", \"Neuroblast\", \"Neuronal.IPC\", \"Radial.glia\", \"Glioblast\", \"Oligo\", \"Fibroblast\", \"Neural.crest\", \"Placodes\", \"Immune\", \"Vascular\", \"Erythrocyte\")\npanglaodb.based &lt;- c(\"CP\", \"PSC\", \"ESC\")\n\norder.use &lt;- c(\"CP-like\", \"IPC-like\", \"Cilia-like\", \"RG-like\", \"NPC-like\", \"OPC-like\", \"Immune-like\", \"Hypoxic\", \"Mesenchymal-like\")\n\nsets.use &lt;- c(\"OPC\", \"Hypoxia\", \"NPC\", \"Ciliated\", \"CP\", \"Mesenchymal\", \"Cycle\",\n              \"Radial.glia\", \"Oligo\", \"Neuron\", \"Neuroblast\", \"Neuronal.IPC\", \"Immune\")\n\nidents.use &lt;- c(\"IPC-like\", \"CP-like\", \"Cilia-like\", \n                \"Mesenchymal-like\", \"RG-like\", \"NPC-like\", \n                \"OPC-like\", \"Immune-like\", \"Hypoxic\")\n\n# Compute Enrichment heatmap.\np &lt;- SCpubr::do_ExpressionHeatmap(sample[sets.use, sample$Annotation %in% idents.use],\n                                  assay = \"Enrichment\",\n                                  features = rownames(sample),\n                                  group.by = \"Annotation\",\n                                  legend.title = \"UCell score\",\n                                  font.size = 16,\n                                  min.cutoff = 0.05,\n                                  max.cutoff = 0.2,\n                                  cluster = TRUE,\n                                  groups.order = list(\"Annotation\" = rev(order.use)),\n                                  features.order = sets.use,\n                                  legend.position = \"bottom\",\n                                  flip = TRUE) + \n      ggplot2::ylab(\"NMF | Atlas\") +\n      ggplot2::xlab(NULL) + \n      ggplot2::theme(plot.margin = ggplot2::margin(t = 0, b = 0, r = 0, l = 0))\n\n# Figure 1H ---------\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        group.by = \"Final_Annotation\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        colors.use = colors.use,\n                        legend.icon.size = 8,\n                        legend.ncol = 3,\n                        na.value = \"grey90\",\n                        legend.position = \"bottom\",\n                        idents.keep = c(\"IPC-like\", \"CP-like\", \"Cilia-like\", \n                                        \"Mesenchymal-like\", \"RG-like\", \"NPC-like\", \n                                        \"OPC-like\", \"Immune-like\", \"Hypoxic\"))"
  },
  {
    "objectID": "visualization/Figure_2.html",
    "href": "visualization/Figure_2.html",
    "title": "Figure 2",
    "section": "",
    "text": "# Overarching snRNAseq object.\npath.to.sample &lt;- \"path_to_snRNAseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\nsubtype.colors &lt;- c(\"ATRT-TYR\"    = \"#87191c\",\n                    \"ATRT-SHH\"    = \"#243a76\",\n                    \"ATRT-MYC\"    = \"#096837\")\n\ncell.cycle.colors &lt;- c(\"G1\"    = \"#e07a5f\",\n                       \"G2M\"   = \"#3C405b\", \n                       \"S\"     = \"#f4f1de\")                    \n\n# Figure 2A ---------\np &lt;- SCpubr::do_DimPlot(sample,\n                        group.by = \"subtype\",\n                        split.by = \"Annotation\",\n                        idents.keep = \"IPC-like\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        legend.icon.size = 8,\n                        legend.ncol = 3,\n                        label.size = 4,\n                        legend.position = \"bottom\",\n                        legend.title = \"ATRT subgroup\",\n                        na.value = \"grey90\")\np &lt;- p[[2]]\n\np &lt;- p + \n     ggplot2::scale_color_manual(values = subtype.colors, na.value = \"grey90\") +\n     ggplot2::ggtitle(NULL) + \n     ggplot2::theme(legend.position = \"bottom\") + \n     ggplot2::guides(color = ggplot2::guide_legend(title.hjust = 0.5,\n                                                   override.aes = list(shape = 21,\n                                                                       fill = subtype.colors,\n                                                                       color = \"black\",\n                                                                       size = 8)))\n\n\n# Figure 2B ---------\nsample$Annotation &lt;- as.character(sample$Annotation)\nsample &lt;- sample[, sample$Annotation %in% names(colors.use)]\nsample$Phase &lt;- factor(sample$Phase, levels = c(\"G2M\", \"G1\", \"S\"))\n\np &lt;- SCpubr::do_BarPlot(sample = sample,\n                        group.by = \"Phase\",\n                        split.by = \"Annotation\",\n                        font.size = 16,\n                        colors.use = cell.cycle.colors,\n                        legend.ncol = 3,\n                        legend.position = \"bottom\",\n                        legend.title = \"Cell Cycle Phase\",\n                        order = TRUE,\n                        order.by = \"G2M\",\n                        position = \"fill\",\n                        flip = TRUE) + \n      ggplot2::labs(x = \"\") + \n      ggplot2::guides(\"fill\" = ggplot2::guide_legend(reverse = TRUE,\n                                                     title.position = \"top\",\n                                                     title.hjust = 0.5))   \n\n\n# snATACseq figures\n\n#Script used to make the figures used in main figure 2 \n\n#Libraries needed\nlibrary(SCpubr)\nlibrary(Seurat)\nlibrary(Signac)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ComplexHeatmap)\nlibrary(UCell)\nlibrary(circlize)\n\n#Set the directory to where you have your data or want to store your output\nsetwd(\"/home/ipaassen/ATRT_sc_atlas/\")\n\n#Load seurat object and other datasets needed\nATRT &lt;- readRDS(\"/data/projects/p868_CRISPR-RNA_TP53-RB1/irene/231207_ATRT_multiome_EnrichmentUMAP_newclusters.RDS\")\nmotifs &lt;- readRDS(\"motif_to_genesymbol.RDS\") #To convert motif IDs to TF binding to it\ngene_markers &lt;- readRDS(\"10X_v3_frozen_samples_normalized_TME_and_TB_annotated_integrated_with_metacell_mapping_reannotated_top100_markers.rds\") #Marker genes as identified in analysis pipeline of the snRNA dataset\n\n#Define colour coding\nsubtype_colors &lt;- c(\"ATRT_SHH\" = \"#253A79\", \"ATRT_MYC\" = \"#056A37\", \"ATRT_TYR\" = \"#931A1D\", \"ecMRT_BrainMet\" = \"#10C663\")\nidents_colors &lt;- c(\"SHH.unspecified\" = \"#A4C2D6\",\"CP.like\" = \"#be660e\",\"Cilia.like\" = \"#be0e0e\",\"OPC.like\" = \"#0435c8\", \n                   \"Rest\" = \"#84D3E5\", 'NPC.like' = \"#0466c8\",'Hypoxic' = \"#2A7072\",\n                   'Mesenchymal.like' = \"#0ebe66\",\"IPC.like\" = \"#be920e\", \n                   \"MYC.TYR.unspecified\" = \"#D6A4A9\", \"RG.like\" = \"#0497c8\")\nTF_colours &lt;- c(\"MYC.Mes\" = \"#024431\", \"SHH.OPC\" =  \"#211D5C\", \"SHH.NPC\" = \"#20428A\", \"TYR.cilia\" = \"#8C1730\", \"SHH.shared\" = \"#0078BB\")\n\n\n\n#\n#\n############### Script for figures #######################\n#\n#\n\n\n#Main figure 2, Panel E\n#\n#UMAP based on enrichment of the different cells on their enrichment scores for the different identities as identified during supervised annotation of the snRNAseq dataset\ndo_DimPlot(ATRT, reduction = \"umap\", group.by = \"Enrich.scores\",colors.use = idents_colors, plot.axes = F) #enrichUMAP\n\n\n#\n#\n############## Calculation of Differential motif activity per mature-like cells vs. IPC-like cells #########################\n#\n#\n\n\n#Settings for differenital motif activityt calling\nATRT &lt;- SetIdent(ATRT, value = \"Enrich.scores\")\nDefaultAssay(ATRT) &lt;- 'chromvar'\n\n#\n#\n######### Main Figure 2 Panel F  #############\n#\n#\n\n\n#Cilia-like\nCilia.TFs &lt;- FindMarkers(\n  ATRT,\n  ident.1 = \"IPC.like\",\n  ident.2 = \"Cilia.like\",\n  logfc.threshold = 0,\n  min.pct = 0.1,\n  only.pos = F)\n\n#\n############# Main Figure 2 F #################\n#\n#Make vulcanoplot of p-value and log2FC\nd1 &lt;- SCpubr::do_VolcanoPlot(sample = ATRT,\n                             de_genes = Cilia.TFs,\n                             pval_cutoff = 1e-40,\n                             FC_cutoff = 1,\n                             plot.title = \"ATRT-TYR: IPC.vs.Cilia\",add_gene_tags = F) + scale_color_brewer(palette = \"OrRd\", direction = -1)\n\n\n#Filter for highest TYR marker genes\nCilia.specific &lt;-Cilia.TFs[Cilia.TFs$avg_log2FC &lt; -1 & Cilia.TFs$p_val_adj &lt; 1e-40,]\nCilia.genes &lt;- motifs$symbol[motifs$motif %in% rownames(Cilia.specific)]\nCilia.specific$gene &lt;- motifs$symbol[motifs$motif %in% rownames(Cilia.specific)]\n\n\norder_genes &lt;- unique(c(rownames(Cilia.specific)))\nTYR_motifs &lt;- motifs[motifs$motif %in% order_genes,]\nTYR_motifs$symbol &lt;- gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)\",\"\",TYR_motifs$symbol)\nGroup_order &lt;- list(\"Enrich.scores\" = c(\"IPC.like\",\"RG.like\" ,\"NPC.like\",\"OPC.like\",\"SHH.unspecified\",\"Mesenchymal.like\",\"CP.like\",\"Cilia.like\",\"MYC.TYR.unspecified\"))\n\n\n\n#Plot average expression of the different cluster for 2 most specific TYR genes: OTX2, LMX1A and LMX1B \nTYR &lt;- AverageExpression(ATRT, assay = \"RNA\",features = c(\"LMX1A\",\"OTX2\",\"LMX1B\"),group.by = \"Enrich.scores\")$RNA\nTYR_Av &lt;- as.data.frame(TYR[,c(3,2,1)])\nTYR_Av$Gene &lt;- rownames(TYR_Av)\nTYR_Av  &lt;- gather(TYR_Av, key = \"Cell.identity\", value = \"RNA_Log\", -Gene)\n\n#\n#\n########## Main Figure 2, Panel I ##################\n#\n#\nggplot(TYR_Av, aes(x=Cell.identity, y = RNA_Log, fill = Cell.identity)) + geom_bar(stat = \"identity\") + facet_wrap(~Gene) + scale_fill_brewer(palette = \"Reds\") + theme_bw()\n\n\n#Check the code for Figure_S8 to have the additional filtering steps for MYC, OPC and NPC markers\n\n#Bind all motifs together into one list which will be used as input for the heatmap depicted in figure 2, panel D\nbig_list.motifs &lt;- list(SHH.NPC = rownames(NPC.specific),\n                        SHH.OPC = rownames(OPC.specific),\n                        TYR.cilia = rownames(Cilia.specific),\n                        MYC.Mes = rownames(Mesenchymal.specific))\n\n#\n#\n## Main Figure 2, Panel G\n#\n#\n#Make enrichUMAP with most interesting TFs\ndo_FeaturePlot(ATRT, features = c(\"LMX1A\"), reduction = \"umap\", \n               assay = 'RNA', order = T, legend.title = \"LMX1A expression\",\n               legend.position = \"bottom\")\n\n#\n#\n## Main Figure 2, Panel H\n#\n#\n#LMX1A is motif ID MA0702.2\ndo_FeaturePlot(ATRT, features = c(\"MA0702.2\"), reduction = \"umap\", assay = 'chromvar', order = T, enforce_symmetry = F,\n               legend.title = \"LMX1A chromvar score\",\n               label.size = 4,\n               use_viridis = T,\n               viridis.palette = \"inferno\",\n               viridis.direction = -1,\n               min.cutoff = 0,\n               legend.position = \"bottom\")\n\n\n#\n#\n#\n# Making of Heatmap of Figure 2, Panel D #################\n#\n#\n\n#Make final heatmap of motif activity using chrom var counts\nchromvar_score &lt;- GetAssayData(ATRT,  assay = \"chromvar\", slot = \"data\")\n\n#Make dataframe to use for the row annotation, where the different TFs are linked to the ATRT subtype there are identified in\nrow_order &lt;- unlist(big_list.motifs)  \nTFs &lt;- as.data.frame(row_order)\nTFs$ident &lt;- rownames(TFs)\nTFs$ident &lt;- gsub('[[:digit:]]+',\"\",TFs$ident)\ncolnames(TFs) &lt;- c(\"Motif\",\"ident\")\nduplets &lt;- TFs[duplicated(TFs$Motif),]\nduplets$ident &lt;- \"SHH.shared\"\nduplets$ident[8] &lt;- \"MYC.Mes\"\nfor (i in 1:nrow(duplets)){\n  m &lt;- duplets$Motif[i]\n  duplets$gene[i] &lt;- motifs$symbol[motifs$motif == m]\n}\n\n`%notin%` &lt;- Negate(`%in%`)\nTFs &lt;- TFs[TFs$Motif %notin% duplets$Motif,]\nfor (i in 1:nrow(TFs)){\n  m &lt;- TFs$Motif[i]\n  TFs$gene[i] &lt;- motifs$symbol[motifs$motif == m]\n}\n\nTFs &lt;- rbind(duplets, TFs) #Final dataframe to use for row annotation\n\n#Make row annotation\nrow_ha = rowAnnotation(Identitiy.called = TFs$ident, col = list(Identitiy.called = TF_colours))\n\n#Dataframe to use for column annotation and making of column annotation\nmeta &lt;- ATRT@meta.data\ntypes &lt;- meta$Enrich.scores\ncluster = cluster_between_groups(chromvar_score[rownames(chromvar_score),], types)\ncolumn_ha = HeatmapAnnotation(Subtype = meta$subtype, Identity = meta$Enrich.scores, col = list(Subtype = subtype_colors, Identity = idents_colors))\n\n#Colour settings for heatmap\ncol_fun = colorRamp2(c(-4, 0, 4), c(\"darkblue\", \"white\", \"darkred\"))\n\n#Filter dataset on only motif IDs of interest\ndata &lt;- chromvar_score[TFs$Motif,]\n\n\npdf(\"heatmap_TFOI_ATRTs_only_withlegend.pdf\",width=25, height=25) \nHeatmap(data,\n        top_annotation = column_ha,\n        width = unit(20, \"cm\"), height = unit(20, \"cm\"),\n        right_annotation = row_ha,\n        row_labels = TFs$gene,\n        col = col_fun,\n        row_names_gp = gpar(fontsize = 5),\n        #row_order = TFs$Motif,\n        cluster_rows = F,\n        border=T,\n        show_heatmap_legend = F,\n        row_split = TFs$ident,\n        cluster_columns = cluster, column_split = 8,\n        show_row_dend = F, show_column_names = F) \ndev.off()\n\n\n\nwrite.table(Seurat::GetAssayData(ATRT, assay = \"peaks\", slot = \"counts\"), \n            col.names = TRUE, \n            row.names = TRUE, \n            quote = FALSE, \n            sep = \"\\t\", \n            file = gzfile(\"ATRT_tissue_ATAC_peaks_counts_raw.tsv.gz\"))"
  },
  {
    "objectID": "visualization/Figure_3.html",
    "href": "visualization/Figure_3.html",
    "title": "Figure 3",
    "section": "",
    "text": "# 3B\nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Use the Seurat built-in DotPlot function to pull the necessary data easily\ndata &lt;- DotPlot(srat, features = c(\"S100A1\",'MGP',\"TNNT1\",\"H2AFJ\",\n                                   \"THBS2\",\"CARMN\",\"TBX18\",\"COL6A3\",\n                                   \"VWF\",\"ADGRL4\",\"ERG\",\"EGFL7\",\n                                   \"DNAAF1\",\"ADGB\",\"CFAP61\",\"CFAP157\",\n                                   \"PTPRC\",\"ADAM28\",\"PIK3R5\",\"FYB1\",\n                                   \"TNC\",\"ETNPPL\",\"MAPK4\",\"BAALC\",\n                                   \"MTUS2\",\"OCA2\",\"HTR2C\",\"GRM8\",\n                                   \"MOBP\",\"MOG\",\"CARNS1\",\"SLCO1A2\",\n                                   \"CDC25C\",\"KIF18B\",\"KIF14\",\"CENPE\",\n                                   \"MYT1L\",\"DCX\",\"KCNH7\",\"NYAP2\",\n                                   \"KCNQ5\",\"MEOX2\",\"DNER\",\"SNTG1\",\n                                   \"DPPA4\",\"SLC9A2\",\"CRYM\",\"CHSY3\",\n                                   \"DLGAP2\",\"GRIN1\",\"ASIC2\",\"CHD5\"),\n                scale.max = 60)$data\n\n# Re-order IDs for plotting\ndata$id &lt;- factor(data$id, levels = rev(c(\"Astrocytes\",\n                                          \"Neurons\",\n                                          \"OPC\",\n                                          \"Microglia_Immune\",\n                                          \"Endothelial\",\n                                          \"Mural\",\n                                          \"IPC-like\",\n                                          \"CP-like\",\n                                          \"Cilia-like\",\n                                          \"OPC-like\",\n                                          \"NPC-like\",\n                                          \"RG-like\",\n                                          \"Mesenchymal-like\")),\n                  labels = rev(c(\"Astrocytes\",\n                                 \"Neurons\",\n                                 \"OPC\",\n                                 \"Microglia & immune\",\n                                 \"Endothelial\",\n                                 \"Pericytes\",\n                                 \"IPC-like\",\n                                 \"CP-like\",\n                                 \"Cilia-like\",\n                                 \"OPC-like\",\n                                 \"NPC-like\",\n                                 \"RG-like\",\n                                 \"Mesenchymal-like\")))\n\ndata$features.plot &lt;- factor(data$features.plot, levels = (c(\"TNC\",\"ETNPPL\",\"MAPK4\",\"BAALC\",\n                                                             \"DLGAP2\",\"GRIN1\",\"ASIC2\",\"CHD5\",\n                                                             \"MOBP\",\"MOG\",\"CARNS1\",\"SLCO1A2\",\n                                                             \"PTPRC\",\"ADAM28\",\"PIK3R5\",\"FYB1\",\n                                                             \"VWF\",\"ADGRL4\",\"ERG\",\"EGFL7\",\n                                                             \"THBS2\",\"CARMN\",\"TBX18\",\"COL6A3\",\n                                                             \"CDC25C\",\"KIF18B\",\"KIF14\",\"CENPE\",\n                                                             \"MTUS2\",\"OCA2\",\"HTR2C\",\"GRM8\",\n                                                             \"DNAAF1\",\"ADGB\",\"CFAP61\",\"CFAP157\",\n                                                             \"KCNQ5\",\"MEOX2\",\"DNER\",\"SNTG1\",\n                                                             \"MYT1L\",\"DCX\",\"KCNH7\",\"NYAP2\",\n                                                             \"DPPA4\",\"SLC9A2\",\"CRYM\",\"CHSY3\",\n                                                             \"S100A1\",'MGP',\"TNNT1\",\"H2AFJ\")))\n\n\n\nggplot(data, aes(y = id, x = features.plot, size = pct.exp, fill = avg.exp.scaled)) +\n  geom_point(shape=21, stroke = 0.1) +\n  theme_classic() +\n  scale_size_area(max_size = 3.5) +\n  scale_fill_distiller(palette = \"RdBu\", limits=c(-2.5,2.5)) +\n  labs(fill=\"Average expression\", size = \"Percent expressed\") +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme(axis.text.y = element_text(size=6, color = \"black\"),\n        axis.text.x = element_text(size=5, color = \"black\", angle = 90, hjust = 1, face = \"italic\"),\n        legend.text = element_text(size=6, color = \"black\"),\n        legend.title = element_text(size=6, color = \"black\"),\n        legend.key.size = unit(0.75, 'lines'),\n        legend.position = \"none\", \n        axis.ticks = element_line(size = 0.25), \n        axis.line = element_line(size = 0.25))\n\n\n# 3C\n\n# Code commented due to compilation errors with Quarto.\n\n# import numpy as np\n# import pandas as pd\n# \n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# \n# import scanpy as sc\n# import squidpy as sq\n# \n# import os\n# from copy import deepcopy\n# \n# #### This script was run per tumor sample to generate the plots in Figures 3C and S7C, but the steps are identical\n# \n# # Read expression matrix\n# adata = sc.read_10x_h5(\n#     filename = \"cell_feature_matrix.h5\"\n# )\n# \n# # Read the cell info file\n# df = pd.read_csv(\n#     \"cells.csv.gz\"\n# )\n# \n# df.set_index(adata.obs_names, inplace = True)\n# adata.obs = df.copy()\n# \n# adata.obsm[\"spatial\"] = adata.obs[[\"x_centroid\",\"y_centroid\"]].copy().to_numpy()\n# \n# # Read RCTD annotations\n# annotations = pd.read_csv(\n#     \"ANNOTATIONS.csv\"\n# )\n# \n# adata_sub = adata[annotations[\"cell_id\"]].copy()\n# del(adata)\n# \n# annotations.set_index(adata_sub.obs_names, inplace = True)\n# adata_sub.obs[\"type\"]= annotations[\"group\"].copy().astype('category')\n# \n# import matplotlib.colors\n# \n# colors = [\"#BA531CFF\",\"#be660e\",\"#be0e0e\",\"#5E4CCDFF\",\"#be920e\",\"#0ebe66\",\"#0092AAFF\",\"#a32978\",\"#0466c8\",\n#          \"#BFBFBF\",\"#787F00FF\",\"#009257FF\",\"#0435c8\", \"#0497c8\"]\n# \n# cmap = matplotlib.colors.ListedColormap(colors)\n# \n# \n# sq.pl.spatial_scatter(adata_sub, \n#                       shape = None, \n#                       color = \"type\", \n#                       size = 1, \n#                       library_id = \"spatial\",\n#                       img = False, \n#                       figsize = (15,15),\n#                       palette = cmap,\n#                       frameon = False,\n#                       colorbar = False,\n#                       title = \"\",\n#                       legend_loc = None\n#                      )\n\n\n# 3C - Cells \nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Create cell segmentation object\ncell_boundaries_df &lt;- as.data.frame(data.table::fread(\"cell_boundaries.csv.gz\")) # Xenium on-board analysis output\ncell_boundaries_df &lt;- cell_boundaries_df[cell_boundaries_df$cell_id %in% colnames(srat),1:3]\nnames(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\nsegmentation &lt;- CreateSegmentation(cell_boundaries_df)\nrm(cell_boundaries_df)\n\n# Create centroids object\ncell_info &lt;- as.data.frame(data.table::fread( \"cells.csv.gz\"))\ncell_centroid_df &lt;- data.frame(\n  x = cell_info$x_centroid,\n  y = cell_info$y_centroid,\n  cell = cell_info$cell_id,\n  stringsAsFactors = FALSE\n)\nrm(cell_info)\ncell_centroid_df &lt;- cell_centroid_df[cell_centroid_df$cell %in% colnames(srat),]\ncentroids &lt;- CreateCentroids(cell_centroid_df)\n\n# Add FOV to Seurat object\ncoords &lt;- CreateFOV(\n  coords = list( centroids = centroids, segmentation = segmentation),\n  type = c(\"segmentation\", \"centroids\"),\n  assay = \"Xenium\"\n)\n\nsrat[[\"fov\"]] &lt;- coords\nrm(segmentation, centroids, coords)\n\n# Crop object and make the plot\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(5300, 5700), x = c(3800, 4200), coords = \"plot\")\nsrat[[\"crop\"]] &lt;- cropped.coords\nsrat$group[is.na(srat$group)] &lt;- \"Unannotated\"\nIdents(srat) &lt;- \"group\"\n\ncpal &lt;- c(\"Astrocytes\" = \"#BA531CFF\",\n          \"Cilia-like\" = \"#be0e0e\",\n          \"CP-like\" = \"#be660e\",\n          \"Endothelial\" = \"#5E4CCDFF\",\n          \"IPC-like\" = \"#be920e\",\n          \"Mesenchymal-like\" = \"#0ebe66\",\n          \"Microglia_Immune\" = \"#0092AAFF\",\n          \"Mural\" = \"#a32978\",\n          \"Neurons\" = \"#787F00FF\",\n          \"NPC-like\" = \"#0466c8\",\n          \"OPC\" = \"#009257FF\",\n          \"OPC-like\" = \"#0435c8\",\n          \"RG-like\" = \"#0497c8\",\n          \"Necrotic\" = \"grey55\",\n          \"Unannotated\" = \"grey55\")\n\n\nImageDimPlot(srat, fov = \"crop\", boundaries = \"segmentation\", dark.background = F, flip_xy = T, group.by = \"group\", cols = cpal, axes = F, border.size = NA, border.color = NA) + NoLegend()\n\n# 3D\nlibrary(Seurat)\nlibrary(tidyverse)\n\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\ndata &lt;- srat@meta.data %&gt;% select(group, sample)\n\n# Keep only malignant cells\ndata &lt;- data %&gt;% filter(group %in% c( \"IPC-like\",\n                                      \"CP-like\",\n                                      \"Cilia-like\",\n                                      \"OPC-like\",\n                                      \"NPC-like\",\n                                      \"RG-like\",\n                                      \"Mesenchymal-like\"))\n\n# Build proportion table\ndf &lt;- as.data.frame(prop.table(table(data$group,data$sample), 2))\n\n\ndf$subtype &lt;- plyr::mapvalues(df$Var2,\n                              from = c(\"ATRT-05\",\n                                       \"ATRT-15-RV4\",\n                                       \"ATRT-173\",\n                                       \"ATRT-207\",\n                                       \"ATRT-243\",\n                                       \"ATRT-256\",\n                                       \"ATRT-340\"),\n                              to = c(\"ATRT-SHH\",\"ATRT-TYR\",\"ATRT-SHH\",\"ATRT-MYC\",\"ATRT-MYC\",\"ATRT-SHH\",\"ATRT-TYR\")\n)\ncolnames(df) &lt;- c(\"Annotation\",\"Tumor\",\"Freq\",\"Subtype\")\n\n\n\ncpal &lt;- c(\"Astrocytes\" = \"#BA531CFF\",\n          \"Cilia-like\" = \"#be0e0e\",\n          \"CP-like\" = \"#be660e\",\n          \"Endothelial\" = \"#5E4CCDFF\",\n          \"IPC-like\" = \"#be920e\",\n          \"Mesenchymal-like\" = \"#0ebe66\",\n          \"Microglia & immune\" = \"#0092AAFF\",\n          \"Pericytes\" = \"#a32978\",\n          \"Neurons\" = \"#787F00FF\",\n          \"NPC-like\" = \"#0466c8\",\n          \"OPC\" = \"#009257FF\",\n          \"OPC-like\" = \"#0435c8\",\n          \"RG-like\" = \"#0497c8\",\n          \"Necrotic\" = \"grey55\")\n\ndf$Annotation &lt;- factor(df$Annotation, levels = c(\"IPC-like\",\n                                                  \"CP-like\",\n                                                  \"Cilia-like\",\n                                                  \"OPC-like\",\n                                                  \"NPC-like\",\n                                                  \"RG-like\",\n                                                  \"Mesenchymal-like\",\n                                                  \"Necrotic\"))\n\n\ndf$Tumor &lt;- factor(df$Tumor, levels = c(\"ATRT-05\",\n                                        \"ATRT-173\",\n                                        \"ATRT-256\",\n                                        \"ATRT-15-RV4\",\n                                        \"ATRT-340\",\n                                        \"ATRT-207\",\n                                        \"ATRT-243\"))\n\nggplot(df, aes(x = Tumor, y = Freq, fill = Annotation)) +\n  geom_bar(position = \"fill\", stat = \"identity\", color = \"black\", linewidth = 0.1) +\n  xlab(\"\") +\n  ylab(\"Proportion of tumor cells\") +\n  scale_fill_manual(values = cpal) +\n  theme_classic() +\n  facet_grid(cols = vars(Subtype), scales = \"free\", space = \"free\") +\n  theme(legend.title = element_blank(),\n        legend.text = element_text(size = 6, color = \"black\"),\n        legend.position = \"none\",\n        axis.title = element_text(size = 6, colour = \"black\"),\n        axis.text = element_text(size = 6, color = \"black\"),\n        axis.text.x = element_text(angle = 90, hjust = 1),\n        axis.ticks = element_line(size = 0.25), \n        axis.line = element_line(size = 0.25), \n        strip.text = element_text(size = 6, color = \"black\"),\n        strip.background = element_blank(),\n        legend.key.size = unit(3,\"mm\"),\n        legend.key.spacing.y = unit(1,\"mm\"))\n\n# 3E - Center \nlibrary(tidyverse)\n\n\n# Read enrichment files generated by NeighborhoodAnalysis.py and combine\nfiles &lt;- list.files(path = \"python\", pattern = \"SpatInt.csv\", full.names = T)\nls &lt;- lapply(files, read.csv)\nnames(ls) &lt;- gsub(\"python/\",\"\", gsub(\"-SpatInt.csv\", \"\", files))\nfor (f in seq_along(ls)){\n  ls[[f]]$line &lt;- names(ls)[f] \n}\n\ndf &lt;- purrr::reduce(ls, rbind.data.frame)\ndf &lt;- df[,-1]\n\n\n# Read interaction files generated by NeighborhoodAnalysis.py, format and combine\nints.files &lt;- list.files(path = \"python\", pattern = \"_interactions.csv\", full.names = T)\nints &lt;- lapply(ints.files, read.csv)\nfor(d in seq_along(ints)) {\n  ints[[d]] &lt;- ints[[d]][,-1]\n  \n  colnames(ints[[d]]) &lt;- rownames(ints[[d]]) &lt;- c(\"Astrocytes\",\n                                      \"CP-like\",\n                                      \"Cilia-like\",\n                                      \"Endothelial\",\n                                      \"IPC-like\",\n                                      \"Mesenchymal-like\",\n                                      \"Microglia/immune\",\n                                      \"VLMC\",\n                                      \"NPC-like\",\n                                      \"Neurons\",\n                                      \"OPC\",\n                                      \"OPC-like\",\n                                      \"RG-like\")\n  \n  ints[[d]] &lt;- ints[[d]][c(2,3,5,6,9,12,13),c(2,3,5,6,9,12,13)]\n  \n  ints[[d]] &lt;- ints[[d]] %&gt;% rownames_to_column(\"neighbour_phenotype\") %&gt;% pivot_longer(2:8, names_to = \"phenotype\", values_to = \"n\")\n  \n  ints[[d]] &lt;- ints[[d]] %&gt;% group_by(phenotype) %&gt;% mutate(freq = n / sum(n))\n}\n\nnames(ints) &lt;- gsub(\"ATRT\",\"ATRT-\",gsub(\"python/\",\"\",gsub(\"_interactions.csv\",\"\",ints.files)))\n\nfor(d in seq_along(ints)) {\n  ints[[d]][,\"line\"] &lt;- names(ints)[d]\n}\n\n\n\n\n\n# Compute ATRT-TYR group\nints.sub &lt;- purrr::reduce(ints[c(3,8)], rbind.data.frame)\nints.sub &lt;- ints.sub %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\n\n\nmn &lt;- df %&gt;% filter(line %in% c(\"ATRT-340\",\"ATRT-15-RV4\")) %&gt;% filter(pvalue_imageid &lt; 0.01) %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean = mean(imageid))\n\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"CP-like\",\"Cilia-like\"))\ndata$subgroup &lt;- \"TYR\"\ndata_comb &lt;- data\n\n\n\n\n# Compute ATRT-MYC group\nints.sub &lt;- purrr::reduce(ints[c(6,5)], rbind.data.frame)\nints.sub &lt;- ints.sub %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\n\n\nmn &lt;- df %&gt;% filter(line %in% c(\"ATRT-243\",\"ATRT-207\")) %&gt;% filter(pvalue_imageid &lt; 0.01) %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean = mean(imageid))\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\n\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"Mesenchymal-like\"))\ndata$subgroup &lt;- \"MYC\"\n\ndata_comb &lt;- rbind.data.frame(data,data_comb)\n\n\n\n# Compute ATRT-SHH_OPC group\nints.sub &lt;- ints[[\"ATRT-256\"]] %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\nmn &lt;- df %&gt;% filter(line == \"ATRT-256\")\n\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\ncolnames(data)[3] &lt;- \"mean\"\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"OPC-like\",\"RG-like\"))\ndata$subgroup &lt;- \"SHH_OPC\"\ndata_comb &lt;- rbind.data.frame(data[,c(1,2,3,6,7)],data_comb)\n\n\n\n\n\n# Compute ATRT-SHH_NPC group\nints.sub &lt;- purrr::reduce(ints[c(1,4)], rbind.data.frame)\nints.sub &lt;- ints.sub %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\n\n\nmn &lt;- df %&gt;% filter(line %in% c(\"ATRT-05\",\"ATRT-173\")) %&gt;% filter(pvalue_imageid &lt; 0.01) %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean = mean(imageid))\n\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\n\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"RG-like\",\"NPC-like\"))\ndata$subgroup &lt;- \"SHH_NPC\"\n\ndata_comb &lt;- rbind.data.frame(data,data_comb)\n\ndata_comb$subgroup &lt;- factor(data_comb$subgroup, levels = c(\"SHH_NPC\",\n                                                            \"SHH_OPC\",\n                                                            \"TYR\",\n                                                            \"MYC\"))\n\ndata_comb$neighbour_phenotype &lt;- factor(data_comb$neighbour_phenotype,\n                                        levels = rev(c(\"NPC-like\",\n                                                   \"RG-like\",\n                                                   \"OPC-like\",\n                                                   \"IPC-like\",\n                                                   \"CP-like\",\n                                                   \"Cilia-like\",\n                                                   \"Mesenchymal-like\")))\n\ndata_comb$phenotype &lt;- factor(data_comb$phenotype,\n                                        levels = (c(\"NPC-like\",\n                                                    \"OPC-like\",\n                                                       \"RG-like\",\n                                                       \n                                                    \"CP-like\",\n                                                    \"Cilia-like\",\n                                                    \"Mesenchymal-like\",\n                                                       \"IPC-like\"\n                                                       \n                                                       )))\n\n\nggplot(data_comb %&gt;% filter(phenotype != \"IPC-like\" ), aes( x = phenotype, y = neighbour_phenotype, fill = mean, size = mean_interactions)) +\n  geom_point(shape=21, stroke = 0.25) +\n  scale_fill_distiller(palette = \"RdBu\", limits=c(-1,1)) +\n  scale_size_continuous(range = c(1,3))+\n  facet_wrap(vars(subgroup), scales = \"free_x\", ncol = 4) +\n  ylab(\"Neighbor cell type\") +\n  xlab(\"Target cell type\") +\n  theme_classic() +\n  labs(size = \"Mean percentage in neighborhood\",\n       fill = \"Mean enrichment\") +\n  theme(axis.title = element_text(size = 6, color = \"black\"),\n        axis.text = element_text(size = 6, color = \"black\"),\n        strip.background = element_blank(),\n        strip.text = element_blank(),\n        axis.ticks = element_line(size = 0.25), \n        axis.line = element_line(size = 0.25),\n        legend.position = \"none\",\n        legend.text = element_text(size=6, color = \"black\"),\n        legend.title = element_text(size=6, color = \"black\"),\n        legend.key.size = unit(0.75, 'lines'),\n        panel.spacing.y = unit(5, \"mm\")) +\n  guides(size=guide_legend(title.position = \"top\",\n                           override.aes = list(fill = \"black\")),\n         fill=guide_colourbar(title.position = \"top\", \n                              barheight = 3.5, barwidth = 0.5,\n                              frame.colour = \"black\", ticks.colour = \"black\", label = T,\n                              frame.linewidth = 0.1))\n\n# 3E - Right\nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Create cell segmentation object\ncell_boundaries_df &lt;- as.data.frame(data.table::fread(\"cell_boundaries.csv.gz\")) # Xenium on-board analysis output\ncell_boundaries_df &lt;- cell_boundaries_df[cell_boundaries_df$cell_id %in% colnames(srat),1:3]\nnames(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\nsegmentation &lt;- CreateSegmentation(cell_boundaries_df)\nrm(cell_boundaries_df)\n\n# Create centroids object\ncell_info &lt;- as.data.frame(data.table::fread( \"cells.csv.gz\"))\ncell_centroid_df &lt;- data.frame(\n  x = cell_info$x_centroid,\n  y = cell_info$y_centroid,\n  cell = cell_info$cell_id,\n  stringsAsFactors = FALSE\n)\nrm(cell_info)\ncell_centroid_df &lt;- cell_centroid_df[cell_centroid_df$cell %in% colnames(srat),]\ncentroids &lt;- CreateCentroids(cell_centroid_df)\n\n# Add FOV to Seurat object\ncoords &lt;- CreateFOV(\n  coords = list( centroids = centroids, segmentation = segmentation),\n  type = c(\"segmentation\", \"centroids\"),\n  assay = \"Xenium\"\n)\n\nsrat[[\"fov\"]] &lt;- coords\nrm(segmentation, centroids, coords)\n\n# Crop object and make the plot\n\n#### Below are the per-sample cropping coordinates\n\n# ATRT-340\ncropped.coords &lt;- Crop(srat[[\"fov\"]], x = c(17000, 17500), y = c(2600, 3100), coords = \"plot\")\n\n# ATRT-173\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(2800, 3300), x = c(14700, 15200), coords = \"plot\")\n\n# ATRT-256\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(9000, 9500), x = c(10000, 10500), coords = \"plot\")\n\n# ATRT-243\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(5000, 5500), x = c(9000, 9500), coords = \"plot\")\n\n\nsrat[[\"crop\"]] &lt;- cropped.coords\nsrat$group[is.na(srat$group)] &lt;- \"Unannotated\"\nIdents(srat) &lt;- \"group\"\n\npal &lt;- c(\"Astrocytes\" = \"grey75\",\n         \"Cilia-like\" = \"#be0e0e\",\n         \"CP-like\" = \"#be660e\",\n         \"Endothelial\" = \"grey75\",\n         \"IPC-like\" = \"#be920e\",\n         \"Mesenchymal-like\" = \"#0ebe66\",\n         \"Microglia_Immune\" = \"grey75\",\n         \"Mural\" = \"grey75\",\n         \"Neurons\" = \"grey75\",\n         \"NPC-like\" = \"#0466c8\",\n         \"OPC\" = \"grey75\",\n         \"OPC-like\" = \"#0435c8\",\n         \"RG-like\" = \"#0497c8\",\n         \"Necrotic\" = \"grey75\",\n         \"Unannotated\" = \"grey75\")\n\n\nImageDimPlot(srat, fov = \"crop\", boundaries = \"segmentation\", dark.background = F, flip_xy = T, group.by = \"group\", cols = cpal, axes = T, border.size = 0.025) + NoLegend()\n\n# 3F - Bottom Right \nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Create cell segmentation object\ncell_boundaries_df &lt;- as.data.frame(data.table::fread(\"cell_boundaries.csv.gz\")) # Xenium on-board analysis output\ncell_boundaries_df &lt;- cell_boundaries_df[cell_boundaries_df$cell_id %in% colnames(srat),1:3]\nnames(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\nsegmentation &lt;- CreateSegmentation(cell_boundaries_df)\nrm(cell_boundaries_df)\n\n# Create centroids object\ncell_info &lt;- as.data.frame(data.table::fread( \"cells.csv.gz\"))\ncell_centroid_df &lt;- data.frame(\n  x = cell_info$x_centroid,\n  y = cell_info$y_centroid,\n  cell = cell_info$cell_id,\n  stringsAsFactors = FALSE\n)\nrm(cell_info)\ncell_centroid_df &lt;- cell_centroid_df[cell_centroid_df$cell %in% colnames(srat),]\ncentroids &lt;- CreateCentroids(cell_centroid_df)\n\n# Add FOV to Seurat object\ncoords &lt;- CreateFOV(\n  coords = list( centroids = centroids, segmentation = segmentation),\n  type = c(\"segmentation\", \"centroids\"),\n  assay = \"Xenium\"\n)\n\nsrat[[\"fov\"]] &lt;- coords\nrm(segmentation, centroids, coords)\n\n# Crop object and make the plot\n\n#### Below are the per-sample cropping coordinates\n\n# ATRT-340\ncropped.coords &lt;- Crop(srat[[\"fov\"]], x = c(17000, 17500), y = c(2600, 3100), coords = \"plot\")\n\n# ATRT-173\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(2800, 3300), x = c(14700, 15200), coords = \"plot\")\n\n# ATRT-256\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(9000, 9500), x = c(10000, 10500), coords = \"plot\")\n\n# ATRT-243\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(5000, 5500), x = c(9000, 9500), coords = \"plot\")\n\n\nsrat[[\"crop\"]] &lt;- cropped.coords\n\nImageFeaturePlot(srat, features = \"MKI67\",fov = \"crop\", boundaries = \"segmentation\", \n                 border.size = NA, dark.background = F, border.color = NA) + NoLegend() + ggtitle(\"\") + scale_fill_viridis_c(option = \"D\")\n\n# 3F - Left\nlibrary(tidyverse)\n\n\n# Read enrichment files generated by NeighborhoodAnalysis.py and combine\nfiles &lt;- list.files(path = \"python\", pattern = \"SpatInt.csv\", full.names = T)\nls &lt;- lapply(files, read.csv)\nnames(ls) &lt;- gsub(\"python/\",\"\", gsub(\"-SpatInt.csv\", \"\", files))\nfor (f in seq_along(ls)){\n  ls[[f]]$line &lt;- names(ls)[f] \n}\n\ndf &lt;- purrr::reduce(ls, rbind.data.frame)\ndf &lt;- df[,-1]\n\n\n# Read interaction files generated by NeighborhoodAnalysis.py, format and combine\nints.files &lt;- list.files(path = \"python\", pattern = \"_interactions.csv\", full.names = T)\nints &lt;- lapply(ints.files, read.csv)\nfor(d in seq_along(ints)) {\n  ints[[d]] &lt;- ints[[d]][,-1]\n  \n  colnames(ints[[d]]) &lt;- rownames(ints[[d]]) &lt;- c(\"Astrocytes\",\n                                      \"CP-like\",\n                                      \"Cilia-like\",\n                                      \"Endothelial\",\n                                      \"IPC-like\",\n                                      \"Mesenchymal-like\",\n                                      \"Microglia/immune\",\n                                      \"VLMC\",\n                                      \"NPC-like\",\n                                      \"Neurons\",\n                                      \"OPC\",\n                                      \"OPC-like\",\n                                      \"RG-like\")\n  \n  ints[[d]] &lt;- ints[[d]][c(2,3,5,6,9,12,13),c(2,3,5,6,9,12,13)]\n  \n  ints[[d]] &lt;- ints[[d]] %&gt;% rownames_to_column(\"neighbour_phenotype\") %&gt;% pivot_longer(2:8, names_to = \"phenotype\", values_to = \"n\")\n  \n  ints[[d]] &lt;- ints[[d]] %&gt;% group_by(phenotype) %&gt;% mutate(freq = n / sum(n))\n}\n\nnames(ints) &lt;- gsub(\"ATRT\",\"ATRT-\",gsub(\"python/\",\"\",gsub(\"_interactions.csv\",\"\",ints.files)))\n\nfor(d in seq_along(ints)) {\n  ints[[d]][,\"line\"] &lt;- names(ints)[d]\n}\n\n\n\n\n\n# Compute ATRT-TYR group\nints.sub &lt;- purrr::reduce(ints[c(3,8)], rbind.data.frame)\nints.sub &lt;- ints.sub %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\n\n\nmn &lt;- df %&gt;% filter(line %in% c(\"ATRT-340\",\"ATRT-15-RV4\")) %&gt;% filter(pvalue_imageid &lt; 0.01) %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean = mean(imageid))\n\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"CP-like\",\"Cilia-like\"))\ndata$subgroup &lt;- \"TYR\"\ndata_comb &lt;- data\n\n\n\n\n# Compute ATRT-MYC group\nints.sub &lt;- purrr::reduce(ints[c(6,5)], rbind.data.frame)\nints.sub &lt;- ints.sub %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\n\n\nmn &lt;- df %&gt;% filter(line %in% c(\"ATRT-243\",\"ATRT-207\")) %&gt;% filter(pvalue_imageid &lt; 0.01) %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean = mean(imageid))\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\n\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"Mesenchymal-like\"))\ndata$subgroup &lt;- \"MYC\"\n\ndata_comb &lt;- rbind.data.frame(data,data_comb)\n\n\n\n# Compute ATRT-SHH_OPC group\nints.sub &lt;- ints[[\"ATRT-256\"]] %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\nmn &lt;- df %&gt;% filter(line == \"ATRT-256\")\n\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\ncolnames(data)[3] &lt;- \"mean\"\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"OPC-like\",\"RG-like\"))\ndata$subgroup &lt;- \"SHH_OPC\"\ndata_comb &lt;- rbind.data.frame(data[,c(1,2,3,6,7)],data_comb)\n\n\n\n\n\n# Compute ATRT-SHH_NPC group\nints.sub &lt;- purrr::reduce(ints[c(1,4)], rbind.data.frame)\nints.sub &lt;- ints.sub %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean_interactions = mean(freq))\n\n\nmn &lt;- df %&gt;% filter(line %in% c(\"ATRT-05\",\"ATRT-173\")) %&gt;% filter(pvalue_imageid &lt; 0.01) %&gt;% group_by(phenotype, neighbour_phenotype) %&gt;% summarize(mean = mean(imageid))\n\ndata &lt;- merge(mn, ints.sub, by = c(\"phenotype\",\"neighbour_phenotype\"))\n\ndata &lt;- data  %&gt;% filter(phenotype %in% c(\"IPC-like\",\"RG-like\",\"NPC-like\"))\ndata$subgroup &lt;- \"SHH_NPC\"\n\ndata_comb &lt;- rbind.data.frame(data,data_comb)\n\ndata_comb$subgroup &lt;- factor(data_comb$subgroup, levels = c(\"SHH_NPC\",\n                                                            \"SHH_OPC\",\n                                                            \"TYR\",\n                                                            \"MYC\"))\n\ndata_comb$neighbour_phenotype &lt;- factor(data_comb$neighbour_phenotype,\n                                        levels = rev(c(\"NPC-like\",\n                                                   \"RG-like\",\n                                                   \"OPC-like\",\n                                                   \"IPC-like\",\n                                                   \"CP-like\",\n                                                   \"Cilia-like\",\n                                                   \"Mesenchymal-like\")))\n\ndata_comb$phenotype &lt;- factor(data_comb$phenotype,\n                                        levels = (c(\"NPC-like\",\n                                                    \"OPC-like\",\n                                                       \"RG-like\",\n                                                       \n                                                    \"CP-like\",\n                                                    \"Cilia-like\",\n                                                    \"Mesenchymal-like\",\n                                                       \"IPC-like\"\n                                                       \n                                                       )))\n\n\nggplot(data_comb %&gt;% filter(phenotype == \"IPC-like\" & neighbour_phenotype == \"IPC-like\"), aes( x = phenotype, y = neighbour_phenotype, fill = mean, size = mean_interactions)) +\n  geom_point(shape=21, stroke = 0.25) +\n  scale_fill_distiller(palette = \"RdBu\", limits=c(-1,1)) +\n  scale_size_continuous(range = c(1,3))+\n  facet_wrap(vars(subgroup), scales = \"free_y\", ncol = 1) +\n  ylab(\"Neighbor cell type\") +\n  xlab(\"Target cell type\") +\n  theme_classic() +\n  labs(size = \"Mean percentage in neighborhood\",\n       fill = \"Mean enrichment\") +\n  theme(axis.title = element_text(size = 6, color = \"black\"),\n        axis.text = element_text(size = 6, color = \"black\"),\n        strip.background = element_blank(),\n        strip.text = element_blank(),\n        axis.ticks = element_line(size = 0.25), \n        axis.line = element_line(size = 0.25),\n        legend.position = \"none\",\n        legend.text = element_text(size=6, color = \"black\"),\n        legend.title = element_text(size=6, color = \"black\"),\n        legend.key.size = unit(0.75, 'lines'),\n        panel.spacing.y = unit(5, \"mm\")) +\n  guides(size=guide_legend(title.position = \"top\",\n                           override.aes = list(fill = \"black\")),\n         fill=guide_colourbar(title.position = \"top\", \n                              barheight = 3.5, barwidth = 0.5,\n                              frame.colour = \"black\", ticks.colour = \"black\", label = T,\n                              frame.linewidth = 0.1))\n\n\n# 3F - Top Right \nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Create cell segmentation object\ncell_boundaries_df &lt;- as.data.frame(data.table::fread(\"cell_boundaries.csv.gz\")) # Xenium on-board analysis output\ncell_boundaries_df &lt;- cell_boundaries_df[cell_boundaries_df$cell_id %in% colnames(srat),1:3]\nnames(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\nsegmentation &lt;- CreateSegmentation(cell_boundaries_df)\nrm(cell_boundaries_df)\n\n# Create centroids object\ncell_info &lt;- as.data.frame(data.table::fread( \"cells.csv.gz\"))\ncell_centroid_df &lt;- data.frame(\n  x = cell_info$x_centroid,\n  y = cell_info$y_centroid,\n  cell = cell_info$cell_id,\n  stringsAsFactors = FALSE\n)\nrm(cell_info)\ncell_centroid_df &lt;- cell_centroid_df[cell_centroid_df$cell %in% colnames(srat),]\ncentroids &lt;- CreateCentroids(cell_centroid_df)\n\n# Add FOV to Seurat object\ncoords &lt;- CreateFOV(\n  coords = list( centroids = centroids, segmentation = segmentation),\n  type = c(\"segmentation\", \"centroids\"),\n  assay = \"Xenium\"\n)\n\nsrat[[\"fov\"]] &lt;- coords\nrm(segmentation, centroids, coords)\n\n# Crop object and make the plot\n\n#### Below are the per-sample cropping coordinates\n\n# ATRT-340\ncropped.coords &lt;- Crop(srat[[\"fov\"]], x = c(17000, 17500), y = c(2600, 3100), coords = \"plot\")\n\n# ATRT-173\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(2800, 3300), x = c(14700, 15200), coords = \"plot\")\n\n# ATRT-256\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(9000, 9500), x = c(10000, 10500), coords = \"plot\")\n\n# ATRT-243\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(5000, 5500), x = c(9000, 9500), coords = \"plot\")\n\n\nsrat[[\"crop\"]] &lt;- cropped.coords\nsrat$group[is.na(srat$group)] &lt;- \"Unannotated\"\nIdents(srat) &lt;- \"group\"\n\ncpal &lt;- c(\"Astrocytes\" = \"grey80\",\n          \"Cilia-like\" = \"grey80\",\n          \"CP-like\" = \"grey80\",\n          \"Endothelial\" = \"grey80\",\n          \"IPC-like\" = \"#be920e\",\n          \"Mesenchymal-like\" = \"grey80\",\n          \"Microglia_Immune\" = \"grey80\",\n          \"Mural\" = \"grey80\",\n          \"Neurons\" = \"grey80\",\n          \"NPC-like\" = \"grey80\",\n          \"OPC\" = \"grey80\",\n          \"OPC-like\" = \"grey80\",\n          \"RG-like\" = \"grey80\",\n          \"Necrotic\" = \"grey80\",\n          \"Unannotated\" = \"grey80\")\n\n\nImageDimPlot(srat, fov = \"crop\", boundaries = \"segmentation\", dark.background = F, flip_xy = T, group.by = \"group\", cols = cpal, axes = T, border.size = 0.025) + NoLegend()"
  },
  {
    "objectID": "visualization/Figure_4.html",
    "href": "visualization/Figure_4.html",
    "title": "Figure 4",
    "section": "",
    "text": "path.to.dds.object &lt;- \"path_to_dds_object\"\ndds &lt;- readRDS(path.to.dds.object)\n\npath.to.marker.set &lt;- \"path_to_top100_markers\"\nmarkers &lt;- readRDS(path.to.marker.set)\nmarkers &lt;- markers[c(\"IPC-like\", \"Cilia-like\", \"Mesenchymal-like\", \"NPC-like\", \"OPC-like\")]\n\npath.to.equivalences &lt;- \"path_to_EnsID_to_SYMBOL_equivalences\"\nannotLookup &lt;- readRDS(path.to.equivalences)\n\npath.to.metadata &lt;- \"path_to_metadata\"\nmetadata &lt;- readRDS(path.to.metadata)\n\n\n# Figure 4B ---------\n# Perform VST in the whole dataset.\ncounts &lt;- DESeq2::counts(dds, normalized = TRUE)\nvsd &lt;- DESeq2::vst(dds, blind = TRUE)\ncounts.transformed &lt;- SummarizedExperiment::assay(vsd)\n\n# Add gene symbols to count data.\ncounts.transformed &lt;- counts.transformed %&gt;% \n                      as.data.frame() %&gt;% \n                      tibble::rownames_to_column(var = \"EnsemblGene\") %&gt;% \n                      dplyr::left_join(annotLookup, by = \"EnsemblGene\")\ncounts.transformed &lt;- counts.transformed[!is.na(counts.transformed$Gene), ]\ncounts.transformed &lt;- counts.transformed[!duplicated(counts.transformed$Gene), ]\ncounts.transformed &lt;- counts.transformed %&gt;% \n                      tibble::remove_rownames() %&gt;% \n                      tibble::column_to_rownames(var = \"Gene\") %&gt;% \n                      dplyr::select(-\"EnsemblGene\")\n\n# Get lists of genes.\n\n\n# Subset count data.\nmarkers.use &lt;- c()\nfor (name in names(markers)){\n  genes &lt;- markers[[name]]\n  genes &lt;- genes[genes %in% rownames(counts.transformed)]\n  genes &lt;- genes[!duplicated(genes)]\n  names(genes) &lt;- rep(name, length(genes))\n  markers.use &lt;- append(markers.use, genes)\n}\nmarkers.use &lt;- markers.use[!duplicated(markers.use)]\n\n# Subset by model.\ncolnames.use.04 &lt;- colnames(counts.transformed)[stringr::str_detect(colnames(counts.transformed), \"AT04\")]\ncolnames.use.08 &lt;- colnames(counts.transformed)[stringr::str_detect(colnames(counts.transformed), \"AT08\")]\n\ncounts.use.04 &lt;- counts.transformed[markers.use, colnames.use.04] %&gt;% as.matrix()\ncounts.use.08 &lt;- counts.transformed[markers.use, colnames.use.08] %&gt;% as.matrix()\n\n# Annotation dfs for Heatmaps.\nannotation.df &lt;- data.frame(\"Celltype\" = names(markers.use),\n                            \"Gene\" = markers.use) %&gt;% \n                 tibble::remove_rownames() %&gt;% \n                 tibble::column_to_rownames(var = \"Gene\")\n\nannotation.df2 &lt;- metadata %&gt;% dplyr::filter(.data$model == \"ATRT04\") %&gt;% dplyr::select(dplyr::all_of(c(\"treatment\", \"model\")))\ncolnames(annotation.df2) &lt;- c(\"Treatment\", \"Model\")\nannotation.df3 &lt;- metadata %&gt;% dplyr::filter(.data$model == \"ATRT08\") %&gt;% dplyr::select(dplyr::all_of(c(\"treatment\", \"model\")))\ncolnames(annotation.df3) &lt;- c(\"Treatment\", \"Model\")\n\ncolors.use.reduced &lt;- c(\"IPC-like\"                 = \"#be920e\",\n                        \"Cilia-like\"               = \"#be0e0e\",\n                        \"Mesenchymal-like\"         = \"#0ebe66\",\n                        \"NPC-like\"                 = \"#0466c8\",\n                        \"OPC-like\"                 = \"#0435c8\")\ncolors.use.model &lt;- c(\"ATRT04\" = \"#243a76\", \"ATRT08\" = \"#096837\")\ncolors.use.treatment &lt;- c(\"DMSO\"         = \"#A78A7F\",\n                          \"Entinostat\"   = \"#9CA77F\",\n                          \"RO31\"         = \"#7F9CA7\",\n                          \"Thiostrepton\" = \"#8A7FA7\")\n\np1 &lt;- pheatmap::pheatmap(mat = t(counts.use.04),\n                         scale = \"column\",\n                         cluster_rows = FALSE,\n                         cluster_cols = FALSE,\n                         show_colnames = FALSE,\n                         fontsize = 16,\n                         annotation_col = annotation.df,\n                         annotation_row = annotation.df2,\n                         color = grDevices::colorRampPalette(colors = rev(RColorBrewer::brewer.pal(\"RdBu\", n = 11)))(100),\n                         annotation_colors = list(\"Celltype\" = colors.use.reduced,\n                                                  \"Model\" = colors.use.model,\n                                                  \"Treatment\" = colors.use.treatment),\n                         border_color = \"white\",\n                         gaps_row = c(2, 4, 6), \n                         gaps_col = c(100, 189, 287, 384)) %&gt;% \n       ggplotify::as.ggplot()\n\np2 &lt;- pheatmap::pheatmap(mat = t(counts.use.08),\n                         scale = \"column\",\n                         cluster_rows = FALSE,\n                         cluster_cols = FALSE,\n                         show_colnames = FALSE,\n                         fontsize = 16,\n                         annotation_col = annotation.df,\n                         annotation_row = annotation.df3,\n                         color = grDevices::colorRampPalette(colors = rev(RColorBrewer::brewer.pal(\"RdBu\", n = 11)))(100),\n                         annotation_colors = list(\"Celltype\" = colors.use.reduced,\n                                                  \"Model\" = colors.use.model,\n                                                  \"Treatment\" = colors.use.treatment),\n                         border_color = \"white\",\n                         gaps_row = c(2, 4, 6), \n                         gaps_col = c(100, 189, 287, 384)) %&gt;% \n       ggplotify::as.ggplot()\np &lt;- p1 / p2\n\n\n# Figure 4C ---------\nmarkers &lt;- c(\"MKI67\", \"MELK\", \"SOX9\", \"L1CAM\", \"FGFR4\")\n\n# Perform VST in the whole dataset.\ncounts &lt;- DESeq2::counts(dds, normalized = TRUE)\nvsd &lt;- DESeq2::vst(dds, blind = TRUE)\ncounts.transformed &lt;- SummarizedExperiment::assay(vsd)\n\n# Add gene symbols to count data.\ncounts.transformed &lt;- counts.transformed %&gt;% \n                      as.data.frame() %&gt;% \n                      tibble::rownames_to_column(var = \"EnsemblGene\") %&gt;% \n                      dplyr::left_join(annotLookup, by = \"EnsemblGene\")\ncounts.transformed &lt;- counts.transformed[!is.na(counts.transformed$Gene), ]\ncounts.transformed &lt;- counts.transformed[!duplicated(counts.transformed$Gene), ]\ncounts.transformed &lt;- counts.transformed %&gt;% \n                      tibble::remove_rownames() %&gt;% \n                      tibble::column_to_rownames(var = \"Gene\") %&gt;% \n                      dplyr::select(-\"EnsemblGene\")\n\nmetadata &lt;- readRDS(\"/omics/odcf/analysis/hipo/hipo_049/ATRT/ATRT_Publication_GitHub/datasets/ATRT_RNA_bulk_metadata_clean.rds\")\nmetadata.04 &lt;- metadata[stringr::str_detect(metadata$condition, \"AT04\"), c(\"treatment\", \"model\")]\nmetadata.08 &lt;- metadata[stringr::str_detect(metadata$condition, \"AT08\"), c(\"treatment\", \"model\")]\ncolnames(metadata.04) &lt;- c(\"Treatment\", \"Model\")\ncolnames(metadata.08) &lt;- c(\"Treatment\", \"Model\")\n\ncolors.use.model &lt;- c(\"ATRT04\" = \"#243a76\", \"ATRT08\" = \"#096837\")\ncolors.use.treatment &lt;- c(\"DMSO\"         = \"#A78A7F\",\n                          \"Entinostat\"   = \"#9CA77F\",\n                          \"RO31\"         = \"#7F9CA7\",\n                          \"Thiostrepton\" = \"#8A7FA7\")\n  \n  \np1 &lt;- pheatmap::pheatmap(t(counts.transformed[markers, 1:8]),\n                          cluster_rows = FALSE,\n                          cluster_cols = FALSE,\n                          scale = \"column\",\n                          cellwidth = 30,\n                          cellheight = 30,\n                          show_rownames = TRUE,\n                          show_colnames = TRUE,\n                          border_color = \"white\",\n                          annotation_row = metadata.04,\n                          annotation_colors = list(\"Model\" = colors.use.model,\n                                                   \"Treatment\" = colors.use.treatment),\n                          angle_col = 90,\n                          gaps_row = c(2, 4, 6),\n                          color = rev(grDevices::colorRampPalette(colors = RColorBrewer::brewer.pal(\"RdBu\", n = 11))(100))) %&gt;% \n        ggplotify::as.ggplot()\n\np2 &lt;- pheatmap::pheatmap(t(counts.transformed[markers, 9:16]),\n                          cluster_rows = FALSE,\n                          cluster_cols = FALSE,\n                          scale = \"column\",\n                          cellwidth = 30,\n                          cellheight = 30,\n                          show_rownames = TRUE,\n                          show_colnames = TRUE,\n                          border_color = \"white\",\n                          annotation_row = metadata.08,\n                          gaps_row = c(2, 4, 6),\n                          annotation_colors = list(\"Model\" = colors.use.model,\n                                                   \"Treatment\" = colors.use.treatment),\n                          angle_col = 90,\n                          color = rev(grDevices::colorRampPalette(colors = RColorBrewer::brewer.pal(\"RdBu\", n = 11))(100))) %&gt;% \n        ggplotify::as.ggplot()\n\np &lt;- p1 | p2"
  },
  {
    "objectID": "visualization/Figure_S1.html",
    "href": "visualization/Figure_S1.html",
    "title": "Figure S1",
    "section": "",
    "text": "# Overarching Seurat object.\npath.to.sample &lt;- \"path_to_snRNAseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\norig.colors &lt;- c(\"ATRT-TYR-1\" = \"#feac81\",\n                 \"ATRT-TYR-2\" = \"#f78462\",\n                 \"ATRT-TYR-3\" = \"#b9563f\",\n                 \"ATRT-TYR-4\" = \"#f05b43\",\n                 \"ATRT-TYR-5\" = \"#c62320\",\n                 \"ATRT-TYR-6\" = \"#831818\",\n                 \"ATRT-SHH-1\" = \"#abc9c8\",\n                 \"ATRT-SHH-2\" = \"#72aeb6\",\n                 \"ATRT-SHH-3\" = \"#4692b0\",\n                 \"ATRT-SHH-4\" = \"#2f70a1\",\n                 \"ATRT-SHH-5\" = \"#bad6f9\",\n                 \"ATRT-SHH-6\" = \"#7db0ea\",\n                 \"ATRT-SHH-7\" = \"#447fdd\",\n                 \"ATRT-SHH-8\" = \"#134b73\",\n                 \"ATRT-SHH-9\" = \"#0a3351\",\n                 \"ATRT-MYC-1\" = \"#c2d6a4\",\n                 \"ATRT-MYC-2\" = \"#9cc184\",\n                 \"ATRT-MYC-3\" = \"#3c7c3d\",\n                 \"ATRT-MYC-4\" = \"#1f5b25\")\n\nsubtype.colors &lt;- c(\"ATRT-TYR\"    = \"#87191c\",\n                    \"ATRT-SHH\"    = \"#243a76\",\n                    \"ATRT-MYC\"    = \"#096837\")\n\n\n# Figure S1A ---------\nsample$TME &lt;- ifelse(sample$seurat_clusters %in% c(\"20\", \"19\", \"16\", \"13\"), \"TME\", \"Tumor\")\n\nsample$ID &lt;- factor(sample$ID, levels = names(orig.colors))\n\np &lt;- SCpubr::do_BarPlot(sample,\n                        group.by = \"ID\",\n                        split.by = \"unintegrated_clusters\",\n                        facet.by = \"TME\",\n                        font.size = 16,\n                        colors.use = orig.colors,\n                        position = \"fill\",\n                        flip = TRUE,\n                        xlab = \"Clusters\",\n                        legend.ncol = 4)\n\n# Figure S1B ---------\npath.to.TME.markers &lt;- \"path_to_TME_markers\"\nmarkers &lt;- readRDS(path.to.TME.markers)\n\np &lt;- SCpubr::do_EnrichmentHeatmap(sample = sample[, sample$unintegrated_clusters %in% c(\"20\", \"19\", \"16\", \"13\")],\n                                  input_gene_list = markers,\n                                  group.by = \"unintegrated_clusters\",\n                                  flavor = \"UCell\",\n                                  flip = TRUE,\n                                  font.size = 16,\n                                  cluster = TRUE) + \n      ggplot2::xlab(\"Clusters\")\n\n\n# Figure S1C ---------\np &lt;- SCpubr::do_DimPlot(sample,\n                        group.by = \"subtype\",\n                        reduction = \"umap_unintegrated\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        colors.use = subtype.colors,\n                        legend.icon.size = 8,\n                        legend.ncol = 3,\n                        legend.position = \"bottom\")\n\n# Figure S1D ---------\npath.to.CNV.scores &lt;- \"path_to_CNV_scores\"\nscores &lt;- readRDS(path.to.CNV.scores)\n\n\nout &lt;- SCpubr::do_CopyNumberVariantPlot(sample = sample,\n                                        infercnv_object = scores,\n                                        chromosome_locations = SCpubr::human_chr_locations,\n                                        using_metacells = TRUE,\n                                        metacell_mapping = sample$metacell_mapping,\n                                        return_object = TRUE)\n\nsample &lt;- out$Object\n\np &lt;- SCpubr::do_FeaturePlot(sample,\n                            features = \"22\",\n                            enforce_symmetry = TRUE,\n                            symmetry.type = \"centered\",\n                            symmetry.center = 1,\n                            reduction = \"umap_unintegrated\",\n                            font.size = 16,\n                            max.cutoff = 1.1,\n                            min.cutoff = 0.9,\n                            legend.title = \"Chr. 22 CNV score\",\n                            raster = TRUE,\n                            raster.dpi = 2048,\n                            pt.size = 8,\n                            legend.position = \"bottom\")\n\n # Figure S1F ---------                           \nmarkers &lt;- list(\"ATRT-TYR\" = c(\"TYR\", \"MITF\", \"OTX2\", \"LMX1A\", \"PRRX1\", \"MSX2\", \"BMP4\", \"PDGFRB\"),\n                \"ATRT-SHH\" = c(\"HES1\", \"GLI2\", \"BOC\", \"ASCL1\", \"HES5\", \"MYCN\", \"PTCH1\", \"DTX1\", \"CBL\"),\n                \"ATRT-MYC\" = c(\"MYC\", \"CEBPB\", \"HOTAIR\", \"MYO1C\"))\n\np1 &lt;- SCpubr::do_DotPlot(sample,\n                         features = markers, \n                         font.size = 16,\n                         group.by = \"subtype\")"
  },
  {
    "objectID": "visualization/Figure_S2.html",
    "href": "visualization/Figure_S2.html",
    "title": "Figure S2",
    "section": "",
    "text": "# Overarching Seurat object.\npath.to.sample &lt;- \"path_to_snRNAseq_sample_with_dimensional_reduction_enrichment\"\nsample &lt;- readRDS(path.to.sample)\n\nsubtype.colors &lt;- c(\"ATRT-TYR\"    = \"#87191c\",\n                    \"ATRT-SHH\"    = \"#243a76\",\n                    \"ATRT-MYC\"    = \"#096837\")\n\n\ncolors.use &lt;- c(\"Tumor\"              = \"#C0C0C0\",\n                \"IPC-like\"                 = \"#be920e\",\n                \"CP-like\"                  = \"#be660e\",\n                \"Cilia-like\"               = \"#be0e0e\",\n                \"Mesenchymal-like\"         = \"#0ebe66\",\n                \"RG-like\"                  = \"#0497c8\",\n                \"NPC-like\"                 = \"#0466c8\",\n                \"OPC-like\"                 = \"#0435c8\",\n                \"Hypoxic\"                  = \"#92be0e\")\n\norig.colors &lt;- c(\"ATRT-TYR-1\" = \"#feac81\",\n                 \"ATRT-TYR-2\" = \"#f78462\",\n                 \"ATRT-TYR-3\" = \"#b9563f\",\n                 \"ATRT-TYR-4\" = \"#f05b43\",\n                 \"ATRT-TYR-5\" = \"#c62320\",\n                 \"ATRT-TYR-6\" = \"#831818\",\n                 \"ATRT-SHH-1\" = \"#abc9c8\",\n                 \"ATRT-SHH-2\" = \"#72aeb6\",\n                 \"ATRT-SHH-3\" = \"#4692b0\",\n                 \"ATRT-SHH-4\" = \"#2f70a1\",\n                 \"ATRT-SHH-5\" = \"#bad6f9\",\n                 \"ATRT-SHH-6\" = \"#7db0ea\",\n                 \"ATRT-SHH-7\" = \"#447fdd\",\n                 \"ATRT-SHH-8\" = \"#134b73\",\n                 \"ATRT-SHH-9\" = \"#0a3351\",\n                 \"ATRT-MYC-1\" = \"#c2d6a4\",\n                 \"ATRT-MYC-2\" = \"#9cc184\",\n                 \"ATRT-MYC-3\" = \"#3c7c3d\",\n                 \"ATRT-MYC-4\" = \"#1f5b25\")\n\n# Figure S2B ---------\np1 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"harmony_clusters\", \n                         split.by.combined = FALSE,\n                         reduction = \"enrichment.umap\",\n                         font.size = 16,\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         na.value = \"grey90\",\n                         pt.size = 8,\n                         legend.ncol = 3,\n                         label = TRUE,\n                         repel = TRUE,\n                         legend.position = \"none\")\n\np3 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"subtype\", \n                         split.by.combined = FALSE,\n                         reduction = \"enrichment.umap\",\n                         font.size = 16,\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         colors.use = subtype.colors,\n                         na.value = \"grey90\",\n                         pt.size = 8,\n                         legend.ncol = 3,\n                         label = TRUE,\n                         repel = TRUE,\n                         legend.position = \"none\")\n\n\np2 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"Annotation\", \n                         split.by.combined = FALSE,\n                         reduction = \"enrichment.umap\",\n                         font.size = 16,\n                         raster = TRUE,\n                         colors.use = colors.use,\n                         raster.dpi = 2048,\n                         na.value = \"grey90\",\n                         pt.size = 8,\n                         legend.ncol = 3,\n                         label = TRUE,\n                         repel = TRUE,\n                         legend.position = \"none\")\nlayout &lt;- \"AAAABBBBCCCC\n           AAAABBBBCCCC\n           AAAABBBBCCCC\n           AAAABBBBCCCC\n           DDDDDDDDDDDD\"\n\np &lt;- patchwork::wrap_plots(A = p1[[1]], \n                           B = p3[[1]],\n                           C = p2[[1]],\n                           D = patchwork::guide_area(),\n                           design = layout,\n                           guides = \"collect\") &\n     patchwork::plot_annotation(theme = ggplot2::theme(legend.position = \"bottom\"))\n\n\n# Figure S2C ---------\np &lt;- SCpubr::do_ExpressionHeatmap(sample = sample,\n                                  features = rownames(sample),\n                                  group.by = c(\"enrichment_clusters\", \"harmony_clusters\", \"ID\", \"Annotation\"),\n                                  flip = TRUE,\n                                  font.size = 12,\n                                  legend.title = \"UCell score\", \n                                  slot = \"scale.data\", \n                                  enforce_symmetry = TRUE, \n                                  max.cutoff = 3, \n                                  min.cutoff = -3)\np[[1]]$labels$x &lt;- \"Enrichment-based clusters\"\np[[1]]$labels$y &lt;- \"Gene sets\"\np[[2]]$labels$x &lt;- \"Integration-based clusters\"\np &lt;- p & ggplot2::theme(axis.text.x.bottom = ggplot2::element_text(angle = 90))\n\n\ncolors.use &lt;- c(\"IPC-like\"                 = \"#be920e\",\n                \n                \"CP-like\"                  = \"#be660e\",\n                \"Cilia-like\"               = \"#be0e0e\",\n                \n                \"Mesenchymal-like\"         = \"#0ebe66\",\n                \n                \"RG-like\"                  = \"#0497c8\",\n                \"NPC-like\"                 = \"#0466c8\",\n                \"OPC-like\"                 = \"#0435c8\",\n                \n                \"Hypoxic\"                  = \"#92be0e\",\n                \"Immune-like\"              = \"#920ebe\")\n\n\n# Figure S2D ---------\n\npath.to.snRNAseq.sample &lt;- \"path_to_snRNAseq_sample\"\nsample &lt;- readRDS(path.to.snRNAseq.sample)\n\nsample$ID &lt;- as.character(sample$ID)\nsample$subtype &lt;- factor(sample$subtype, levels = c(\"ATRT-TYR\", \"ATRT-SHH\", \"ATRT-MYC\"))\nsample.use &lt;- sample[, !(sample$Annotation %in% c(\"Tumor\", \"TME\"))]\nsample.use &lt;- sample[, sample$Full_Annotation %in% c(\"IPC-like\", \"CP-like\", \"Cilia-like\", \n                                                          \"Mesenchymal-like\", \"RG-like\", \"NPC-like\", \n                                                          \"OPC-like\", \"Immune-like\", \"Hypoxic\")]\nsample.use$Annotation &lt;- as.character(sample.use$Annotation)\nsample.use$Annotation &lt;- factor(sample.use$Annotation, levels = c(\"IPC-like\", \"CP-like\", \"Cilia-like\", \"Immune-like\", \"OPC-like\", \"NPC-like\", \"RG-like\", \"Mesenchymal-like\", \"Hypoxic\"))\n\np &lt;- SCpubr::do_BarPlot(sample.use,\n                        group.by = \"Annotation\",\n                        split.by = \"ID\",\n                        facet.by = \"subtype_extended\",\n                        position = \"fill\",\n                        order = TRUE,\n                        order.by = \"IPC-like\",\n                        flip = TRUE,\n                        colors.use = colors.use,\n                        font.size = 16,\n                        legend.ncol = 3,\n                        xlab = \"\")\n\n\n# Figure S2E ---------\np &lt;- SCpubr::do_BarPlot(sample.use,\n                        group.by = \"ID\",\n                        split.by = \"Final_Annotation_Focus\",\n                        position = \"fill\",\n                        order = TRUE,\n                        flip = TRUE,\n                        colors.use = orig.colors,\n                        font.size = 16,\n                        legend.ncol = 3,\n                        xlab = \"\")\n\n\n# Figure S2F ---------\n\nsample &lt;- readRDS(path.to.snRNAseq.sample)\nsample$Final_Annotation[sample$Final_Annotation == \"Microglia & Immune\"] &lt;- \"Microglia\"\nsample$Final_Annotation[sample$Final_Annotation %in% c(\"NMF-MP2\",\n                                                       \"NMF-MP3\",\n                                                       \"NMF-MP5\",\n                                                       \"NMF-MP8\",\n                                                       \"SHH-1\",\n                                                       \"SHH-2\",\n                                                       \"SHH-3\",\n                                                       \"MYC-1\",\n                                                       \"Unannotated\")] &lt;- \"Unannotated\"\n# - Add proportions of each tumor cell populations across all patients.\n\n\n\n`%&gt;%` &lt;- magrittr::`%&gt;%`\n`:=` &lt;- rlang::`:=`\n\nfont.size = 16\nfont.type = \"sans\"\nplot.title.face = \"bold\"\nplot.subtitle.face = \"plain\"\nplot.caption.face = \"italic\"\naxis.title.face = \"bold\"\naxis.text.face = \"plain\"\ngrid.color = \"white\"\nborder.color = \"black\"\naxis.text.x.angle = 45\n\ngroup.by &lt;- \"Final_Annotation\"\nsplit.by &lt;- \"ID\"\nfacet.by &lt;- \"subtype\"\nflip &lt;- FALSE\n\nprop &lt;- SCpubr::do_BarPlot(sample = sample,\n                           group.by = group.by,\n                           split.by = split.by,\n                           position = \"fill\",\n                           return_data = TRUE)$Data\n\n# Clustering.\n# Transform to wide to retrieve the hclust.\ndf.order &lt;- prop %&gt;%\n            dplyr::select(-dplyr::all_of(c(\"n\"))) %&gt;% \n            tidyr::pivot_wider(id_cols = group.by,\n                               names_from = split.by,\n                               values_from = \"freq\") %&gt;%\n            tibble::column_to_rownames(group.by) %&gt;%\n            as.matrix()\ndf.order[is.na(df.order)] &lt;- 0\n\ncol_order &lt;- colnames(df.order)[stats::hclust(stats::dist(t(df.order), method = \"euclidean\"), method = \"ward.D\")$order]\nrow_order &lt;- c(\"Astrocytes\",\n               \"Endothelial\",\n               \"Microglia\",\n               \"Neurons\",\n               \"OPC\",\n               \"Pericytes\",\n               \n               \"IPC-like\",\n               \"CP-like\",\n               \"Cilia-like\",\n               \"RG-like\",\n               \"OPC-like\",\n               \"NPC-like\",\n               \"Mesenchymal-like\",\n               \"Immune-like\",\n               \"Hypoxic\",\n               \"Unannotated\")\n\n\ncolors.gradient &lt;- SCpubr:::compute_continuous_palette(name = \"YlGnBu\",\n                                                       use_viridis = FALSE,\n                                                       direction = 1,\n                                                       enforce_symmetry = FALSE)\n\ncolors.gradient.count &lt;- SCpubr:::compute_continuous_palette(name = \"YlOrBr\",\n                                                             use_viridis = FALSE,\n                                                             direction = 1,\n                                                             enforce_symmetry = FALSE)\n\n\nprop &lt;- prop %&gt;% \n        dplyr::mutate(\"{group.by}\" := factor(.data[[group.by]], levels = row_order),\n                      \"{split.by}\" := factor(.data[[split.by]], levels = col_order),\n                      \"freq\" = .data$freq * 100,\n                      \"Class\" = ifelse(.data[[group.by]] %in% c(\"Astrocytes\",\n                                                                \"Endothelial\",\n                                                                \"Microglia\",\n                                                                \"Neurons\",\n                                                                \"OPC\",\n                                                                \"Pericytes\"), \"TME\", \"Tumor\")) %&gt;% \n        dplyr::left_join(y = {sample@meta.data %&gt;% \n                              dplyr::select(dplyr::all_of(c(\"ID\", \"subtype\"))) %&gt;% \n                              dplyr::group_by(ID) %&gt;% \n                              dplyr::summarise(\"subtype\" = unique(.data$subtype))})\n\nlist.heatmaps.tme &lt;- list()\nlist.heatmaps.tumor &lt;- list()\nlist.heatmaps.prop &lt;- list()\nmetadata &lt;- rev(c(\"ATRT-TYR\", \"ATRT-SHH\", \"ATRT-MYC\"))\ncounter &lt;- 0\nfor (name in metadata){\n  counter &lt;- counter + 1\n  \n  axis.parameters &lt;- SCpubr:::handle_axis(flip = flip,\n                                          group.by = rep(\"A\", length(unique(sample$Final_Annotation))),\n                                          group = name,\n                                          counter = counter,\n                                          axis.text.x.angle = axis.text.x.angle,\n                                          plot.title.face = plot.title.face,\n                                          plot.subtitle.face = plot.subtitle.face,\n                                          plot.caption.face = plot.caption.face,\n                                          axis.title.face = axis.title.face,\n                                          axis.text.face = axis.text.face,\n                                          legend.title.face = \"bold\",\n                                          legend.text.face = \"plain\")\n  \n  p &lt;- prop %&gt;% \n       dplyr::filter(.data$subtype == name,\n                     .data$Final_Annotation %in% c(\"Astrocytes\",\n                                                   \"Endothelial\",\n                                                   \"Microglia\",\n                                                   \"Neurons\",\n                                                   \"OPC\",\n                                                   \"Pericytes\")) %&gt;% \n       ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                              y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                              fill = .data$freq)) + \n       ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n       ggplot2::geom_text(ggplot2::aes(label = round(.data$freq, 1), \n                                       color = ifelse(.data$freq &gt; 50, \"white\", \"black\")), \n                          size = 3.75) +\n       ggplot2::scale_y_discrete(expand = c(0, 0)) +\n       ggplot2::scale_x_discrete(expand = c(0, 0),\n                                 position = \"top\") +\n       ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                       x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n       ggplot2::coord_equal() +\n       ggplot2::scale_color_identity() + \n       ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                     na.value = \"grey75\",\n                                     name = \"Percentage\",\n                                     breaks = c(0, 25, 50, 75, 100),\n                                     labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                     limits = c(0, 100)) + \n       ggplot2::xlab(NULL) +\n       ggplot2::ylab(NULL) +\n       ggplot2::theme_minimal(base_size = font.size) +\n       ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                      axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                      axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                      axis.ticks.y.right = ggplot2::element_blank(),\n                      axis.text.y.left = axis.parameters$axis.text.y.left,\n                      axis.text.y.right = ggplot2::element_blank(),\n                      axis.text.x.top = axis.parameters$axis.text.x.top,\n                      axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                      axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                      axis.title.x.top = axis.parameters$axis.title.x.top,\n                      axis.title.y.right = ggplot2::element_blank(),\n                      axis.title.y.left = axis.parameters$axis.title.y.left,\n                      strip.background = axis.parameters$strip.background,\n                      strip.clip = axis.parameters$strip.clip,\n                      strip.text = axis.parameters$strip.text,\n                      legend.position = \"bottom\",\n                      axis.line = ggplot2::element_blank(),\n                      plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                      plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                      plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                      plot.title.position = \"plot\",\n                      panel.grid = ggplot2::element_blank(),\n                      panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                      text = ggplot2::element_text(family = font.type),\n                      plot.caption.position = \"plot\",\n                      legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                      legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                      legend.justification = \"center\",\n                      plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                      panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                      panel.grid.major = ggplot2::element_blank(),\n                      plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                      panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                      legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                      legend.spacing = ggplot2::unit(0, \"cm\"),\n                      panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                      panel.spacing.y = ggplot2::unit(0, \"cm\"))\n  \n  p &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                         legend.title = \"Percentage\",\n                                         legend.aes = \"fill\",\n                                         legend.type = \"colorbar\",\n                                         legend.position = \"bottom\",\n                                         legend.width = 1,\n                                         legend.length = 12.5,\n                                         legend.framewidth = 0.5,\n                                         legend.tickwidth = 0.5,\n                                         legend.framecolor = \"grey50\",\n                                         legend.tickcolor = \"white\")\n  \n  list.heatmaps.tme[[name]] &lt;- p\n  \n  p &lt;- prop %&gt;% \n       dplyr::filter(.data$subtype == name,\n                     !(.data$Final_Annotation %in% c(\"Astrocytes\",\n                                                   \"Endothelial\",\n                                                   \"Microglia\",\n                                                   \"Neurons\",\n                                                   \"OPC\",\n                                                   \"Pericytes\"))) %&gt;% \n       ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                              y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                              fill = .data$freq)) + \n       ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n       ggplot2::geom_text(ggplot2::aes(label = round(.data$freq, 1), \n                                       color = ifelse(.data$freq &gt; 50, \"white\", \"black\")), \n                          size = 3.75) +\n       ggplot2::scale_y_discrete(expand = c(0, 0)) +\n       ggplot2::scale_x_discrete(expand = c(0, 0),\n                                 position = \"top\") +\n       ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                       x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n       ggplot2::coord_equal() +\n       ggplot2::scale_color_identity() + \n       ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                     na.value = \"grey75\",\n                                     name = \"Percentage\",\n                                     breaks = c(0, 25, 50, 75, 100),\n                                     labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                     limits = c(0, 100)) + \n       ggplot2::xlab(NULL) +\n       ggplot2::ylab(NULL) +\n       ggplot2::theme_minimal(base_size = font.size) +\n       ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                      axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                      axis.ticks.y.left = ggplot2::element_blank(),\n                      axis.ticks.y.right = axis.parameters$axis.ticks.y.right,\n                      axis.text.y.left = ggplot2::element_blank(),\n                      axis.text.y.right = axis.parameters$axis.text.y.right,\n                      axis.text.x.top = axis.parameters$axis.text.x.top,\n                      axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                      axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                      axis.title.x.top = axis.parameters$axis.title.x.top,\n                      axis.title.y.right = axis.parameters$axis.title.y.right,\n                      axis.title.y.left = ggplot2::element_blank(),\n                      strip.background = axis.parameters$strip.background,\n                      strip.clip = axis.parameters$strip.clip,\n                      strip.text = axis.parameters$strip.text,\n                      legend.position = \"bottom\",\n                      axis.line = ggplot2::element_blank(),\n                      plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                      plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                      plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                      plot.title.position = \"plot\",\n                      panel.grid = ggplot2::element_blank(),\n                      panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                      text = ggplot2::element_text(family = font.type),\n                      plot.caption.position = \"plot\",\n                      legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                      legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                      legend.justification = \"center\",\n                      plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                      panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                      panel.grid.major = ggplot2::element_blank(),\n                      plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                      panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                      legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                      legend.spacing = ggplot2::unit(0, \"cm\"),\n                      panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                      panel.spacing.y = ggplot2::unit(0, \"cm\"))\n  \n  \n  p &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                         legend.title = \"Percentage\",\n                                         legend.aes = \"fill\",\n                                         legend.type = \"colorbar\",\n                                         legend.position = \"bottom\",\n                                         legend.width = 1,\n                                         legend.length = 12.5,\n                                         legend.framewidth = 0.5,\n                                         legend.tickwidth = 0.5,\n                                         legend.framecolor = \"grey50\",\n                                         legend.tickcolor = \"white\")\n  \n  list.heatmaps.tumor[[name]] &lt;- p\n  \n  \n  \n  \n  # Heatmap with tumor/tme proportions.\n  \n  data.use &lt;- prop %&gt;% \n              dplyr::select(dplyr::all_of(c(split.by, \"subtype\", \"Class\", \"freq\"))) %&gt;% \n              dplyr::group_by(Class, .data[[split.by]]) %&gt;% \n              dplyr::summarise(\"Combfreq\" = sum(.data$freq),\n                               \"subtype\" = unique(.data$subtype))\n\n  \n  p &lt;- data.use %&gt;% \n      dplyr::filter(.data$subtype == name,) %&gt;% \n      ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Class,\n                                             y = .data[[split.by]],\n                                             fill = .data$Combfreq)) + \n      ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n      ggplot2::geom_text(ggplot2::aes(label = round(.data$Combfreq, 1), \n                                      color = ifelse(.data$Combfreq &gt; 50, \"white\", \"black\")), \n                         size = 3.75) +\n      ggplot2::scale_y_discrete(expand = c(0, 0)) +\n      ggplot2::scale_x_discrete(expand = c(0, 0),\n                                position = \"top\") +\n      ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                      x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n      ggplot2::coord_equal() +\n      ggplot2::scale_color_identity() + \n      ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                    na.value = \"grey75\",\n                                    name = \"Percentage\",\n                                    breaks = c(0, 25, 50, 75, 100),\n                                    labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                    limits = c(0, 100)) + \n      ggplot2::xlab(NULL) +\n      ggplot2::ylab(name) +\n      ggplot2::theme_minimal(base_size = font.size) +\n      ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                     axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                     axis.ticks.y.left = ggplot2::element_blank(),\n                     axis.ticks.y.right = ggplot2::element_blank(),\n                     axis.text.y.left = ggplot2::element_blank(),\n                     axis.text.y.right = ggplot2::element_blank(),\n                     axis.text.x.top = axis.parameters$axis.text.x.top,\n                     axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                     axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                     axis.title.x.top = axis.parameters$axis.title.x.top,\n                     axis.title.y.right = ggplot2::element_blank(),\n                     axis.title.y.left = axis.parameters$axis.title.y.left,\n                     strip.background = axis.parameters$strip.background,\n                     strip.clip = axis.parameters$strip.clip,\n                     strip.text = axis.parameters$strip.text,\n                     legend.position = \"bottom\",\n                     axis.line = ggplot2::element_blank(),\n                     plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                     plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                     plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                     plot.title.position = \"plot\",\n                     panel.grid = ggplot2::element_blank(),\n                     panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                     text = ggplot2::element_text(family = font.type),\n                     plot.caption.position = \"plot\",\n                     legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                     legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                     legend.justification = \"center\",\n                     plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                     panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                     panel.grid.major = ggplot2::element_blank(),\n                     plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                     panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                     legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                     legend.spacing = ggplot2::unit(0, \"cm\"),\n                     panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                     panel.spacing.y = ggplot2::unit(0, \"cm\"))\n  \n  \n  p &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                         legend.title = \"Percentage\",\n                                         legend.aes = \"fill\",\n                                         legend.type = \"colorbar\",\n                                         legend.position = \"bottom\",\n                                         legend.width = 1,\n                                         legend.length = 12.5,\n                                         legend.framewidth = 0.5,\n                                         legend.tickwidth = 0.5,\n                                         legend.framecolor = \"grey50\",\n                                         legend.tickcolor = \"white\")\n  list.heatmaps.prop[[name]] &lt;- p\n}\n\n\nlist.heatmaps.range &lt;- list()\n# Ranges heatmap.\ndata.use &lt;- prop %&gt;% \n            dplyr::select(dplyr::all_of(c(group.by, split.by, \"freq\"))) %&gt;% \n            dplyr::filter(.data$Final_Annotation %in% c(\"Astrocytes\",\n                                                        \"Endothelial\",\n                                                        \"Microglia\",\n                                                        \"Neurons\",\n                                                        \"OPC\",\n                                                        \"Pericytes\")) %&gt;% \n            dplyr::mutate(\"Count\" = ifelse(.data$freq &gt; 0, 1, 0)) %&gt;% \n            dplyr::group_by(.data[[group.by]]) %&gt;% \n  dplyr::summarise(\"Maximum Frequency\" = max(.data$freq),\n                   \"Minimum Frequency\" = min(.data$freq))\n\np &lt;- data.use %&gt;%\n  tidyr::pivot_longer(cols = -\"Final_Annotation\",\n                      names_to = \"Var\",\n                      values_to = \"Value\") %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = .data[[group.by]],\n                                         y = .data$Var,\n                                         fill = .data$Value)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$Value, 1), \n                                  color = ifelse(.data$Value &gt; 50, \"white\", \"black\")), \n                     size = 3.75) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = ggplot2::element_blank(),\n                 axis.ticks.y.right = ggplot2::element_blank(),\n                 axis.text.y.left = ggplot2::element_blank(),\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = axis.parameters$axis.title.x.top,\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\n\np &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                       legend.title = \"Percentage\",\n                                       legend.aes = \"fill\",\n                                       legend.type = \"colorbar\",\n                                       legend.position = \"bottom\",\n                                       legend.width = 1,\n                                       legend.length = 12.5,\n                                       legend.framewidth = 0.5,\n                                       legend.tickwidth = 0.5,\n                                       legend.framecolor = \"grey50\",\n                                       legend.tickcolor = \"white\")\n\nlist.heatmaps.range[[\"TME\"]] &lt;- p \n\ndata.use &lt;- prop %&gt;% \n  dplyr::select(dplyr::all_of(c(group.by, split.by, \"freq\"))) %&gt;% \n  dplyr::filter(!(.data$Final_Annotation %in% c(\"Astrocytes\",\n                                              \"Endothelial\",\n                                              \"Microglia\",\n                                              \"Neurons\",\n                                              \"OPC\",\n                                              \"Pericytes\"))) %&gt;% \n  dplyr::mutate(\"Count\" = ifelse(.data$freq &gt; 0, 1, 0)) %&gt;% \n  dplyr::group_by(.data[[group.by]]) %&gt;% \n  dplyr::summarise(\"Maximum Frequency\" = max(.data$freq),\n                   \"Minimum Frequency\" = min(.data$freq))\n\np &lt;- data.use %&gt;%\n  tidyr::pivot_longer(cols = -\"Final_Annotation\",\n                      names_to = \"Var\",\n                      values_to = \"Value\") %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = .data[[group.by]],\n                                         y = .data$Var,\n                                         fill = .data$Value)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$Value, 1), \n                                  color = ifelse(.data$Value &gt; 50, \"white\", \"black\")), \n                     size = 3.75) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = ggplot2::element_blank(),\n                 axis.ticks.y.right = ggplot2::element_line(color = \"black\"),\n                 axis.text.y.left = ggplot2::element_blank(),\n                 axis.text.y.right = ggplot2::element_text(color = \"black\"),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = axis.parameters$axis.title.x.top,\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\n\np &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                       legend.title = \"Percentage\",\n                                       legend.aes = \"fill\",\n                                       legend.type = \"colorbar\",\n                                       legend.position = \"bottom\",\n                                       legend.width = 1,\n                                       legend.length = 12.5,\n                                       legend.framewidth = 0.5,\n                                       legend.tickwidth = 0.5,\n                                       legend.framecolor = \"grey50\",\n                                       legend.tickcolor = \"white\")\n\nlist.heatmaps.range[[\"Tumor\"]] &lt;- p \n\n\ndata.use &lt;- prop %&gt;% \n            dplyr::select(dplyr::all_of(c(split.by, \"subtype\", \"Class\", \"freq\"))) %&gt;% \n            dplyr::group_by(Class, .data[[split.by]]) %&gt;% \n            dplyr::summarise(\"Combfreq\" = sum(.data$freq),\n                             \"subtype\" = unique(.data$subtype)) %&gt;% \n            dplyr::mutate(\"Count\" = ifelse(.data$Combfreq &gt; 0, 1, 0)) %&gt;% \n            dplyr::group_by(.data$Class) %&gt;% \n            dplyr::summarise(\"Maximum Frequency\" = max(.data$Combfreq),\n                             \"Minimum Frequency\" = min(.data$Combfreq))\n\np &lt;- data.use %&gt;%\n  tidyr::pivot_longer(cols = -\"Class\",\n                      names_to = \"Var\",\n                      values_to = \"Value\") %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Class,\n                                         y = .data$Var,\n                                         fill = .data$Value)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$Value, 1), \n                                  color = ifelse(.data$Value &gt; 50, \"white\", \"black\")), \n                     size = 3.75) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = ggplot2::element_blank(),\n                 axis.ticks.y.right = ggplot2::element_blank(),\n                 axis.text.y.left = ggplot2::element_blank(),\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = axis.parameters$axis.title.x.top,\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\n\np &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                       legend.title = \"Percentage\",\n                                       legend.aes = \"fill\",\n                                       legend.type = \"colorbar\",\n                                       legend.position = \"bottom\",\n                                       legend.width = 1,\n                                       legend.length = 12.5,\n                                       legend.framewidth = 0.5,\n                                       legend.tickwidth = 0.5,\n                                       legend.framecolor = \"grey50\",\n                                       legend.tickcolor = \"white\")\n\nlist.heatmaps.range[[\"Fraction\"]] &lt;- p \n\n\n# Present in patients.\nlist.heatmaps.count &lt;- list()\ndata.use &lt;- prop %&gt;% \n  dplyr::select(dplyr::all_of(c(group.by, split.by, \"freq\"))) %&gt;% \n  dplyr::filter(.data$Final_Annotation %in% c(\"Astrocytes\",\n                                              \"Endothelial\",\n                                              \"Microglia\",\n                                              \"Neurons\",\n                                              \"OPC\",\n                                              \"Pericytes\")) %&gt;% \n  dplyr::mutate(\"Count\" = ifelse(.data$freq &gt; 0, 1, 0)) %&gt;% \n  dplyr::group_by(.data[[group.by]]) %&gt;% \n  dplyr::summarise(\"Present in patients\" = sum(.data$Count))\n\np &lt;- data.use %&gt;%\n  tidyr::pivot_longer(cols = -\"Final_Annotation\",\n                      names_to = \"Var\",\n                      values_to = \"Value\") %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = .data[[group.by]],\n                                         y = .data$Var,\n                                         fill = .data$Value)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$Value, 1), \n                                  color = ifelse(.data$Value &gt; 13, \"white\", \"black\")), \n                     size = 3.75) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient.count,\n                                na.value = \"grey75\",\n                                name = \"Count\",\n                                breaks = c(0, 5, 10, 15, 20),\n                                labels = c(\"0\", \"5\", \"10\", \"15\", \"20\"),\n                                limits = c(0, 20)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = ggplot2::element_blank(),\n                 axis.ticks.y.right = ggplot2::element_blank(),\n                 axis.text.y.left = ggplot2::element_blank(),\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = axis.parameters$axis.title.x.top,\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\n\np &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                       legend.title = \"Count\",\n                                       legend.aes = \"fill\",\n                                       legend.type = \"colorbar\",\n                                       legend.position = \"bottom\",\n                                       legend.width = 1,\n                                       legend.length = 12.5,\n                                       legend.framewidth = 0.5,\n                                       legend.tickwidth = 0.5,\n                                       legend.framecolor = \"grey50\",\n                                       legend.tickcolor = \"white\")\n\nlist.heatmaps.count[[\"TME\"]] &lt;- p \n\ndata.use &lt;- prop %&gt;% \n  dplyr::select(dplyr::all_of(c(group.by, split.by, \"freq\"))) %&gt;% \n  dplyr::filter(!(.data$Final_Annotation %in% c(\"Astrocytes\",\n                                                \"Endothelial\",\n                                                \"Microglia\",\n                                                \"Neurons\",\n                                                \"OPC\",\n                                                \"Pericytes\"))) %&gt;% \n  dplyr::mutate(\"Count\" = ifelse(.data$freq &gt; 0, 1, 0)) %&gt;% \n  dplyr::group_by(.data[[group.by]]) %&gt;% \n  dplyr::summarise(\"Present in patients\" = sum(.data$Count))\n\np &lt;- data.use %&gt;%\n  tidyr::pivot_longer(cols = -\"Final_Annotation\",\n                      names_to = \"Var\",\n                      values_to = \"Value\") %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = .data[[group.by]],\n                                         y = .data$Var,\n                                         fill = .data$Value)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$Value, 1), \n                                  color = ifelse(.data$Value &gt; 13, \"white\", \"black\")), \n                     size = 3.75) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient.count,\n                                na.value = \"grey75\",\n                                name = \"Count\",\n                                breaks = c(0, 5, 10, 15, 20),\n                                labels = c(\"0\", \"5\", \"10\", \"15\", \"20\"),\n                                limits = c(0, 20)) +  \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = ggplot2::element_blank(),\n                 axis.ticks.y.right = ggplot2::element_line(color = \"black\"),\n                 axis.text.y.left = ggplot2::element_blank(),\n                 axis.text.y.right = ggplot2::element_text(color = \"black\"),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = axis.parameters$axis.title.x.top,\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\n\np &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                       legend.title = \"Count\",\n                                       legend.aes = \"fill\",\n                                       legend.type = \"colorbar\",\n                                       legend.position = \"bottom\",\n                                       legend.width = 1,\n                                       legend.length = 12.5,\n                                       legend.framewidth = 0.5,\n                                       legend.tickwidth = 0.5,\n                                       legend.framecolor = \"grey50\",\n                                       legend.tickcolor = \"white\")\n\nlist.heatmaps.count[[\"Tumor\"]] &lt;- p \n\n\ndata.use &lt;- prop %&gt;% \n  dplyr::select(dplyr::all_of(c(split.by, \"subtype\", \"Class\", \"freq\"))) %&gt;% \n  dplyr::group_by(Class, .data[[split.by]]) %&gt;% \n  dplyr::summarise(\"Combfreq\" = sum(.data$freq),\n                   \"subtype\" = unique(.data$subtype)) %&gt;% \n  dplyr::mutate(\"Count\" = ifelse(.data$Combfreq &gt; 0, 1, 0)) %&gt;% \n  dplyr::group_by(.data$Class) %&gt;% \n  dplyr::summarise(\"Present in patients\" = sum(.data$Count))\n\np &lt;- data.use %&gt;%\n  tidyr::pivot_longer(cols = -\"Class\",\n                      names_to = \"Var\",\n                      values_to = \"Value\") %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = .data$Class,\n                                         y = .data$Var,\n                                         fill = .data$Value)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$Value, 1), \n                                  color = ifelse(.data$Value &gt; 13, \"white\", \"black\")), \n                     size = 3.75) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient.count,\n                                na.value = \"grey75\",\n                                name = \"Count\",\n                                breaks = c(0, 5, 10, 15, 20),\n                                labels = c(\"0\", \"5\", \"10\", \"15\", \"20\"),\n                                limits = c(0, 20)) +  \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = ggplot2::element_blank(),\n                 axis.ticks.y.right = ggplot2::element_blank(),\n                 axis.text.y.left = ggplot2::element_blank(),\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = axis.parameters$axis.title.x.top,\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\n\np &lt;- SCpubr:::modify_continuous_legend(p = p,\n                                       legend.title = \"Count\",\n                                       legend.aes = \"fill\",\n                                       legend.type = \"colorbar\",\n                                       legend.position = \"bottom\",\n                                       legend.width = 1,\n                                       legend.length = 12.5,\n                                       legend.framewidth = 0.5,\n                                       legend.tickwidth = 0.5,\n                                       legend.framecolor = \"grey50\",\n                                       legend.tickcolor = \"white\")\n\nlist.heatmaps.count[[\"Fraction\"]] &lt;- p \n\n\n\n\n\nlist.heatmaps.range$Fraction$labels$y &lt;- \"Range\"\nlist.heatmaps.count$Fraction$labels$y &lt;- \"N\"\nlist.heatmaps.count$Fraction$labels$x &lt;- \"Ratio\"\nlist.heatmaps.count$TME$labels$x &lt;- \"TME\"\nlist.heatmaps.count$Tumor$labels$x &lt;- \"Tumor\"\n\np &lt;- patchwork::wrap_plots(A = list.heatmaps.count$Fraction | list.heatmaps.count$TME | list.heatmaps.count$Tumor,\n                           B = list.heatmaps.range$Fraction | list.heatmaps.range$TME | list.heatmaps.range$Tumor,\n                           C = list.heatmaps.prop$`ATRT-TYR` | list.heatmaps.tme$`ATRT-TYR` | list.heatmaps.tumor$`ATRT-TYR`,\n                           D = list.heatmaps.prop$`ATRT-SHH` | list.heatmaps.tme$`ATRT-SHH` | list.heatmaps.tumor$`ATRT-SHH`,\n                           E = list.heatmaps.prop$`ATRT-MYC` | list.heatmaps.tme$`ATRT-MYC` | list.heatmaps.tumor$`ATRT-MYC`,\n                           guides = \"collect\",\n                           heights = c(1, 2, 6, 9, 4),\n                           ncol = 1) + \n     patchwork::plot_annotation(theme = ggplot2::theme(legend.position = \"bottom\",\n                                                       plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")))"
  },
  {
    "objectID": "visualization/Figure_S4.html",
    "href": "visualization/Figure_S4.html",
    "title": "Figure S4",
    "section": "",
    "text": "path.to.sample &lt;- \"path_to_snRNAseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\nsubtype.colors &lt;- c(\"ATRT-TYR\"    = \"#87191c\",\n                    \"ATRT-SHH\"    = \"#243a76\",\n                    \"ATRT-MYC\"    = \"#096837\")\n\ncolors.use.reduced &lt;- c(\"Tumor\"              = \"#C0C0C0\",\n                        \"TME\"                = \"#70798c\",\n                        \"IPC-like\"                 = \"#be920e\",\n                        \"CP-like\"                  = \"#be660e\",\n                        \"Cilia-like\"               = \"#be0e0e\",\n                        \"Mesenchymal-like\"         = \"#0ebe66\",\n                        \"RG-like\"                  = \"#0497c8\",\n                        \"NPC-like\"                 = \"#0466c8\",\n                        \"OPC-like\"                 = \"#0435c8\",\n                        \"Hypoxic\"                  = \"#92be0e\",\n                        \"Immune-like\"              = \"#920ebe\")\n\nmarkers.path &lt;- \"path_to_supervised_annotation_set\"\nmarkers &lt;- readRDS(markers.path)\n\nmarkers.stem &lt;- \"path_to_stemness_markers\"\nstem.markers &lt;- readRDS(markers.stem)\n\nmarkers$PSC &lt;- stem.markers$PSC\nmarkers &lt;- markers[c(\"Neuronal_IPC\", \"Cycle\", \"PSC\")]\nnames(markers) &lt;- c(\"Neuronal.IPC\", \"Cycle\", \"PSC\")\n\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample = sample, input_gene_list = markers, flavor = \"UCell\", return_object = TRUE)\nsample &lt;- out$Object\nsample &lt;- Seurat::ScaleData(sample, features = rownames(sample))\n\n# Figure S4A ---------\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                         group.by = \"Annotation\",\n                         idents.keep = \"IPC-like\",\n                         font.size = 16,\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         pt.size = 8,\n                         colors.use = colors.use.reduced,\n                         legend.icon.size = 8,\n                         legend.ncol = 1,\n                         legend.position = \"bottom\")\n\n\n# Figure S4B ---------\nsample &lt;- Seurat::SetIdent(sample, value = \"Full_Annotation\")\n \nmarkers &lt;- COSG::cosg(sample,\n                      expressed_pct = 0.2,\n                      n_genes_user = 250)\n \nmarkers &lt;- markers$names\n# Retrieve the df containing the genes and transform it in a list of genes.\nmarkers &lt;- markers %&gt;% as.list()\n \n# Filter out not interesting genes and keep top 100.\n## - Mitochondrial genes: ^MT-\n## - Ribosomal genes: ^RP\n## - Unannotated genes: ^AP0, ^AC0, \n## - Long, non coding: ^LINC.*\n## - Alternative splice variants: *-AS\nregex &lt;- \"[[:alnum:]]+\\\\.[[:xdigit:]]+|^MT-.*|^RP|.*-AS[[:xdigit:]]$|^LINC.*\"\n \n# Perform the filtering.\nmarkers &lt;- lapply(markers, function(x){x[grep(regex, x, invert = TRUE)][1:100]})[\"IPC-like\"][[1]]\n \n \n#GO ontology\nensembl = biomaRt::useEnsembl(biomart = \"ensembl\", \n                              dataset = \"hsapiens_gene_ensembl\")\n \n# Change from SYMBOL to ENTREZID.\nans &lt;- unique(biomaRt::getBM(attributes = c(\"hgnc_symbol\", \"entrezgene_id\"),   \n                             filters = \"hgnc_symbol\",\n                             values = markers,\n                             mart = ensembl))\n \ner  &lt;- clusterProfiler::enrichGO(gene = ans$entrezgene_id,\n                                  OrgDb = org.Hs.eg.db,\n                                  ont = 'BP')\n\np &lt;- SCpubr::do_TermEnrichmentPlot(mat = er,\n                                   n.terms = 10,\n                                   n.chars = 35,\n                                   legend.length = 10,\n                                   font.size = 16)\n\n# Figure S4C ---------\np &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                            slot = \"scale.data\",\n                            enforce_symmetry = TRUE,\n                            max.cutoff = 3,\n                         features = \"Neuronal.IPC\",\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         pt.size = 8,\n                         legend.position = \"bottom\",\n                         legend.length = 15)\n\n# Figure S4D ---------\np &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                            slot = \"scale.data\",\n                            enforce_symmetry = TRUE,\n                            max.cutoff = 3,\n                         features = \"Cycle\",\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         pt.size = 8,\n                         legend.position = \"bottom\",\n                         legend.length = 15)\n\n\n# Figure S4E ---------\nSeurat::DefaultAssay(sample) &lt;- \"RNA\"\nsample@assays$Enrichment &lt;- NULL\n\nmarkers.path &lt;- \"path_to_top100_markers\"\nmarkers &lt;- readRDS(markers.path)\n\norder.use &lt;- c(\"IPC-like\", \"CP-like\", \"Cilia-like\", \"RG-like\", \"NPC-like\", \"OPC-like\", \"Mesenchymal-like\")\nmarkers.short &lt;- markers[order.use]\nsample$Groups &lt;- NULL\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample = sample, input_gene_list = markers.short, flavor = \"UCell\", return_object = TRUE)\nsample &lt;- out$Object\nsample &lt;- Seurat::ScaleData(sample, features = rownames(sample))\n\n\n\n\n# Reclustering.\nSeurat::DefaultAssay(sample) &lt;- \"RNA\"\nsample &lt;- sample[, sample$Annotation == \"IPC-like\"]\n\n\n\nregress_out_vars &lt;- c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\")\nnormalization_batch &lt;- \"orig.ident\"\nintegration_batch &lt;- \"technology\"\n\nsample &lt;- Seurat::FindVariableFeatures(sample)\nsample &lt;- Seurat::ScaleData(sample, assay = \"RNA\", vars.to.regress = regress_out_vars)\n\nsample &lt;- Seurat::RunPCA(sample)\n\nsample &lt;- harmony::RunHarmony(sample,\n                              assay = \"RNA\",\n                              group.by.vars = c(normalization_batch, integration_batch),\n                              theta = c(1, 2))\n\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"harmony\", dims = 1:30)\nsample &lt;- Seurat::FindClusters(sample, cluster.name = \"harmony_clusters\")\nsample &lt;- Seurat::RunUMAP(sample, reduction = \"harmony\", dims = 1:30, reduction.name = \"umap.harmony\", reduction.key = \"UMAPHARMONY_\")\n\nSeurat::DefaultAssay(sample) &lt;- \"Enrichment\"\n\n\np &lt;- SCpubr::do_DimPlot(sample = sample,\n                        group.by = \"subtype\",\n                        font.size = 16,\n                        raster = TRUE,\n                        raster.dpi = 2048,\n                        pt.size = 8,\n                        colors.use = subtype.colors,\n                        legend.icon.size = 8,\n                        legend.ncol = 3,\n                        legend.position = \"bottom\")\n\n\n\n# Figure S4F ---------\npath.to.top100.markers &lt;- \"path_to_top100_markers_snRNAseq\"\nmarkers &lt;- readRDS(path.to.top100.markers)\n\norder.use &lt;- c(\"CP-like\", \"Cilia-like\", \"RG-like\", \"NPC-like\", \"OPC-like\", \"Mesenchymal-like\")\nmarkers.short &lt;- markers[order.use]\nmarkers.short &lt;- lapply(markers.short, function(x){x[1:10]})\n\nSeurat::DefaultAssay(sample) &lt;- \"RNA\"\n\np &lt;- SCpubr::do_DotPlot(sample, \n                        features = markers.short, \n                        slot = \"data\", \n                        group.by = \"subtype\", \n                        zscore.data =  TRUE, \n                        dot.scale = 8) + \n     ggplot2::scale_size_continuous(range = c(3, 8))\n\n\n# Code commented due to compilation problems with Quarto.\n\n# import scanpy as sc\n# import scvelo as scv\n# import pandas as pd\n# import matplotlib.pyplot as plt\n# \n# \n# # Set beautiful plotting parameters.\n# scv.settings.verbosity = 3  # show errors(0), warnings(1), info(2), hints(3)\n# scv.settings.presenter_view = True  # set max width size for presenter view\n# scv.set_figure_params('scvelo')  # for beautified visualization\n# \n# adata = sc.read(path.to.adata, cache = True)\n# \n# custom_colors = {\n#     \"IPC-like\": \"#be920e\",  \n#     \"CP-like\": \"#be660e\",  \n#     \"Cilia-like\": \"#be0e0e\", \n#     \"NPC-like\": \"#0466c8\",\n#     \"Other\": \"#C0C0C0\",\n# }\n# \n# custom_colors = {\n#     \"IPC-like\": \"#be920e\",  \n#     \"CP-like\": \"#be660e\",  \n#     \"Cilia-like\": \"#be0e0e\", \n#     \"Neurons\": \"#0466c8\",\n#     \"Other\": \"#C0C0C0\",\n# }\n# \n# # This is Figure S4 H\n# fig, ax = plt.subplots(figsize=(7,7))\n# scv.pl.velocity_embedding_stream(adata, basis='umap', color = \"annotation\", palette = custom_colors, legend_loc=\"right\", add_outline = True, ax = ax, frameon = False, figsize = (7, 7), size = 50, alpha = 1, arrow_size = 2, linewidth=2)\n# \n# # This is Figure S4 G\n# fig, ax = plt.subplots(figsize=(7,7))\n# sc.pl.umap(adata, color = \"annotation\", legend_loc=\"best\", add_outline=True, size = 50,  palette = custom_colors, ax=ax, frameon = False)"
  },
  {
    "objectID": "visualization/Figure_S5.html",
    "href": "visualization/Figure_S5.html",
    "title": "Figure S5",
    "section": "",
    "text": "# Overarching Seurat object.\npath.to.sample &lt;- \"path_to_snRNAseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\n\n# Figure S5A\np1 &lt;- SCpubr::do_DotPlot(sample,\n                         features = \"TM4SF1\", \n                         font.size = 16,\n                         group.by = \"Final_Annotation\",\n                         zscore.data = TRUE)"
  },
  {
    "objectID": "visualization/Figure_S6.html",
    "href": "visualization/Figure_S6.html",
    "title": "Figure S6",
    "section": "",
    "text": "path.to.sample.with.cell.cycle.regressed &lt;- \"path_to_cell_cycle_regressed_object\"\nsample &lt;- readRDS(path.to.sample.with.cell.cycle.regressed)\n\npath.to.supervised.annotation.set &lt;- \"path_to_supervised_annotation_set\"\nmarkers &lt;- readRDS(path.to.supervised.annotation.set)\n\n\ncolors.use.reduced &lt;- c(\"Unannotated\"              = \"#C0C0C0\",\n                        \"TME\"                = \"#70798c\",\n                        \"IPC-like\"                 = \"#be920e\",\n                        \"CP-like\"                  = \"#be660e\",\n                        \"Cilia-like\"               = \"#be0e0e\",\n                        \"Mesenchymal-like\"         = \"#0ebe66\",\n                        \"RG-like\"                  = \"#0497c8\",\n                        \"NPC-like\"                 = \"#0466c8\",\n                        \"OPC-like\"                 = \"#0435c8\",\n                        \"Immune-like\"              = \"#920ebe\",\n                        \"Hypoxic\"                  = \"#92be0e\")\n\n\n# # Get S phase genes.\ns.genes &lt;- Seurat::cc.genes.updated.2019$s.genes\n# Get G2-M phase genes.\ng2m.genes &lt;- Seurat::cc.genes.updated.2019$g2m.genes\n \nregress_out_vars &lt;- c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\")\nnormalization_batch &lt;- \"orig.ident\"\nintegration_batch &lt;- \"technology\"\n \n# Change the assay to Seurat V5.\nsample[[\"RNA\"]] &lt;- as(object = sample[[\"RNA\"]], Class = \"Assay5\")\n \n \nregress_out_vars &lt;- c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\", \"S.Score\", \"G2M.Score\")\nnormalization_batch &lt;- \"orig.ident\"\nintegration_batch &lt;- \"technology\"\n \n \nsample[[\"RNA\"]] &lt;- split(x = sample[[\"RNA\"]], \n                         f = sample@meta.data[, normalization_batch])\n \n \n# Perform normalization.\nsample &lt;- Seurat::NormalizeData(sample)\nsample &lt;- Seurat::FindVariableFeatures(sample)\nsample &lt;- Seurat::ScaleData(sample, vars.to.regress = regress_out_vars)\nsample &lt;- Seurat::RunPCA(sample)\n \n \nsample &lt;- SeuratObject::JoinLayers(sample)\nsample@assays[[\"RNA\"]]@layers &lt;- sample@assays[[\"RNA\"]]@layers[c(\"counts\", \"data\", \"scale.data\")]\n \nsample &lt;- Seurat::CellCycleScoring(sample, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)\n \nsample[[\"RNA\"]] &lt;- split(x = sample[[\"RNA\"]], \n                         f = sample@meta.data[, normalization_batch])\n \n \n # Perform normalization.\nsample &lt;- Seurat::NormalizeData(sample)\nsample &lt;- Seurat::FindVariableFeatures(sample)\nsample &lt;- Seurat::ScaleData(sample, vars.to.regress = c(regress_out_vars, \"S.Score\", \"G2M.Score\"))\nsample &lt;- Seurat::RunPCA(sample)\n \nsample &lt;- SeuratObject::JoinLayers(sample)\nsample@assays[[\"RNA\"]]@layers &lt;- sample@assays[[\"RNA\"]]@layers[c(\"counts\", \"data\", \"scale.data\")]\n \n \nsample &lt;- harmony::RunHarmony(sample,\n                               assay = \"RNA\",\n                               group.by.vars = c(normalization_batch, integration_batch),\n                               theta = c(1, 2))\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"harmony\", dims = 1:30)\nsample &lt;- Seurat::FindClusters(sample, cluster.name = \"harmony_clusters\")\nsample &lt;- Seurat::RunUMAP(sample, reduction = \"harmony\", dims = 1:30, reduction.name = \"umap.harmony\", reduction.key = \"UMAPHARMONY_\")\n\nsample &lt;- Seurat::CellCycleScoring(sample, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)\n\nsample$Annotation &lt;- as.character(sample$Annotation)\nsample$Annotation[sample$Annotation == \"Tumor\"] &lt;- \"Unannotated\"\nsample$Annotation &lt;- factor(sample$Annotation, levels = c(\"IPC-like\", \"CP-like\", \"Cilia-like\", \"OPC-like\", \"NPC-like\", \"RG-like\", \"Mesenchymal-like\", \"Hypoxic\", \"Immune-like\", \"TME\", \"Unannotated\"))\n\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample, input_gene_list = markers, flavor = \"UCell\", return_object = TRUE)\nsample.use &lt;- out$Object\nsample.use &lt;- Seurat::ScaleData(sample.use)\nsample.use &lt;- Seurat::RunPCA(sample.use, features = rownames(sample.use))\nsample.use &lt;- Seurat::RunUMAP(sample.use, reduction = \"pca\", dims = 1:30)\nsample.use &lt;- Seurat::FindNeighbors(sample.use, reduction = \"pca\", dims = 1:30)\nsample.use &lt;- Seurat::FindClusters(sample.use, reduction = \"pca\", dims = 1:30)\n\n\np1 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"Annotation\", \n                         reduction = \"umap.harmony\", \n                         idents.keep = \"IPC-like\", \n                         colors.use = colors.use.reduced, \n                         label = TRUE, \n                         repel = TRUE, \n                         legend.position = \"none\",\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         na.value = \"grey90\",\n                         pt.size = 8,\n                         font.size = 16,\n                         plot.title = \"Current Annotation\")\n\np2 &lt;- SCpubr::do_DimPlot(sample.use, \n                         reduction = \"umap\", \n                         label = TRUE, \n                         repel = TRUE, \n                         legend.position = \"none\", \n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         na.value = \"grey90\",\n                         pt.size = 8,\n                         font.size = 16)\n\np3 &lt;- SCpubr::do_FeaturePlot(sample.use, \n                             reduction = \"umap\", \n                             features = c(\"Neuronal.IPC\", \"Cycle\"), \n                             ncol = 1, \n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             na.value = \"grey90\",\n                             pt.size = 8,\n                             font.size = 16)\n\nsample.use$New_Annotation &lt;- as.character(sample.use$seurat_clusters)\nsample.use$New_Annotation[sample.use$New_Annotation == \"14\"] &lt;- \"IPC-like\"\nsample$New_Annotation &lt;- sample.use$New_Annotation\n\np4 &lt;- SCpubr::do_DimPlot(sample, \n                         group.by = \"New_Annotation\", \n                         reduction = \"umap.harmony\", \n                         idents.keep = \"IPC-like\", \n                         colors.use = colors.use, \n                         label = TRUE, \n                         repel = TRUE, \n                         legend.position = \"none\",\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         na.value = \"grey90\",\n                         pt.size = 8,\n                         font.size = 16)\n\ndata.use &lt;- list(\"Old Annotation\" = names(sample$Annotation[sample$Annotation == \"IPC-like\"]),\n                 \"New Annotation\" = names(sample$New_Annotation[sample$New_Annotation == \"IPC-like\"]))\n\np5 &lt;- SCpubr::do_BarPlot(sample = sample,\n                         split.by = \"New_Annotation\",\n                         group.by = \"Annotation\",\n                         position = \"fill\",\n                         flip = TRUE,\n                         colors.use = colors.use.reduced,\n                         legend.ncol = 3,\n                         xlab = \"\",\n                         order = TRUE,\n                         order.by = \"IPC-like\",\n                         font.size = 16)\n\nlayout &lt;- \"ABC\n           DBE\"\n\np &lt;- patchwork::wrap_plots(A = p1,\n                           B = p3,\n                           C = p4,\n                           D = p2,\n                           E = p5,\n                           design = layout)"
  },
  {
    "objectID": "visualization/Figure_S7.html",
    "href": "visualization/Figure_S7.html",
    "title": "Figure S7",
    "section": "",
    "text": "markers.path &lt;- \"path_to_supervised_annotation\"\nmarkers &lt;- readRDS(markers.path)\n\nmarkers.stem.path &lt;- \"path_to_stemness_markers\"\nmarkers.stem &lt;- readRDS(markers.stem.path)\nmarkers$PSC &lt;- markers.stem$PSC\nmarkers$ESC &lt;- markers.stem$ESC\nmarkers$NSPC &lt;- markers.stem$NSPC\n\n\nmarkers &lt;- markers[stringr::str_replace_all(names(markers), \"\\\\.\", \"_\")]\n\n\n\n\n# Figure S7A ---------\npath.to.sample &lt;- \"path_to_scRNAseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample, \n                                    input_gene_list = markers, \n                                    flavor = \"UCell\", \n                                    return_object = TRUE,\n                                    scale_scores = FALSE)\n\nsample &lt;- out$Object\nsample &lt;- Seurat::ScaleData(sample)\nsample &lt;- Seurat::RunPCA(sample, features = rownames(sample))\ndims &lt;- 1:ncol(sample@reductions$pca@cell.embeddings)\nsample &lt;- Seurat::RunUMAP(sample, dims = dims)\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"pca\", dims = dims)\nsample &lt;- Seurat::FindClusters(sample, reduction = \"pca\", dims = dims, resolution = 1.5)\n\ncolors.use &lt;- list(\"IPC-like\"                 = \"#be920e\",\n                   \"Other\" = \"grey90\")\n\np1 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         group.by = \"Annotation\",\n                         colors.use = colors.use,\n                         font.size = 16,\n                         label.size = 4,\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         pt.size = 16,\n                         legend.icon.size = 8,\n                         legend.ncol = 2,\n                         legend.position = \"bottom\")\n\np3 &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"Neuronal.IPC\",\n                             slot = \"scale.data\",\n                             enforce_symmetry = TRUE,\n                             font.size = 16,\n                             label.size = 4,\n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             pt.size = 16,\n                             order = TRUE,\n                             legend.position = \"bottom\")\n\np2 &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"Cycle\",\n                             slot = \"scale.data\",\n                             enforce_symmetry = TRUE,\n                             font.size = 16,\n                             label.size = 4,\n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             pt.size = 16,\n                             order = TRUE,\n                             legend.position = \"bottom\")\n\n\np &lt;- p1 | p3 | p2 \n\n\n\n# Figure S7B ---------\npath.to.sample &lt;- \"path_to_snSMARTseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample, \n                                    input_gene_list = markers, \n                                    flavor = \"UCell\", \n                                    return_object = TRUE,\n                                    scale_scores = FALSE)\n\nsample &lt;- out$Object\nsample &lt;- Seurat::ScaleData(sample)\nsample &lt;- Seurat::RunPCA(sample, features = rownames(sample))\ndims &lt;- 1:ncol(sample@reductions$pca@cell.embeddings)\nsample &lt;- Seurat::RunUMAP(sample, dims = dims)\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"pca\", dims = dims)\nsample &lt;- Seurat::FindClusters(sample, reduction = \"pca\", dims = dims, resolution = 1.5)\n\n\ncolors.use &lt;- list(\"IPC-like\"                 = \"#be920e\",\n                   \"Other\" = \"grey90\")\np1 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         group.by = \"Annotation\",\n                         colors.use = colors.use,\n                         font.size = 16,\n                         label.size = 4,\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         pt.size = 16,\n                         legend.icon.size = 8,\n                         legend.ncol = 2,\n                         legend.position = \"bottom\")\n\np3 &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"Neuronal.IPC\",\n                             slot = \"scale.data\",\n                             enforce_symmetry = TRUE,\n                             font.size = 16,\n                             label.size = 4,\n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             pt.size = 16,\n                             order = TRUE,\n                             legend.position = \"bottom\")\n\np2 &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"Cycle\",\n                             slot = \"scale.data\",\n                             enforce_symmetry = TRUE,\n                             font.size = 16,\n                             label.size = 4,\n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             pt.size = 16,\n                             order = TRUE,\n                             legend.position = \"bottom\")\n\np &lt;- p1 | p3 | p2 \n\n# Figure S7C ---------\npath.to.sample &lt;- \"path_to_scSMARTseq_sample\"\nsample &lt;- readRDS(path.to.sample)\n\nout &lt;- SCpubr::do_EnrichmentHeatmap(sample, \n                                    input_gene_list = markers, \n                                    flavor = \"UCell\", \n                                    return_object = TRUE,\n                                    scale_scores = FALSE)\n\nsample &lt;- out$Object\nsample &lt;- Seurat::ScaleData(sample)\nsample &lt;- Seurat::RunPCA(sample, features = rownames(sample))\ndims &lt;- 1:ncol(sample@reductions$pca@cell.embeddings)\nsample &lt;- Seurat::RunUMAP(sample, dims = dims)\nsample &lt;- Seurat::FindNeighbors(sample, reduction = \"pca\", dims = dims)\nsample &lt;- Seurat::FindClusters(sample, reduction = \"pca\", dims = dims, resolution = 1.5)\n\ncolors.use &lt;- list(\"IPC-like\"                 = \"#be920e\",\n                   \"Other\" = \"grey90\")\np1 &lt;- SCpubr::do_DimPlot(sample = sample,\n                         group.by = \"Annotation\",\n                         colors.use = colors.use,\n                         font.size = 16,\n                         label.size = 4,\n                         raster = TRUE,\n                         raster.dpi = 2048,\n                         pt.size = 16,\n                         legend.icon.size = 8,\n                         legend.ncol = 2,\n                         legend.position = \"bottom\")\n\np3 &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"Neuronal.IPC\",\n                             slot = \"scale.data\",\n                             enforce_symmetry = TRUE,\n                             font.size = 16,\n                             label.size = 4,\n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             pt.size = 16,\n                             order = TRUE,\n                             legend.position = \"bottom\")\n\np2 &lt;- SCpubr::do_FeaturePlot(sample = sample,\n                             features = \"Cycle\",\n                             slot = \"scale.data\",\n                             enforce_symmetry = TRUE,\n                             font.size = 16,\n                             label.size = 4,\n                             raster = TRUE,\n                             raster.dpi = 2048,\n                             pt.size = 16,\n                             order = TRUE,\n                             legend.position = \"bottom\")\n\np &lt;- p1 | p3 | p2 \n\n\n# Figure S7D\ndeconv &lt;- readRDS(path.to.deconvolution.results)\n\ngroup.by = \"cell_type\"\nsplit.by = \"ID\"\nfont.size = 14\nfont.type = \"sans\"\nplot.title.face = \"bold\"\nplot.subtitle.face = \"plain\"\nplot.caption.face = \"italic\"\naxis.title.face = \"bold\"\naxis.text.face = \"plain\"\ngrid.color = \"white\"\nborder.color = \"black\"\naxis.text.x.angle = 45\nflip = FALSE\n\n\npredictions &lt;- deconv$mat %&gt;% \n               data.frame(check.names = FALSE) %&gt;% \n               tibble::rownames_to_column(var = \"ID\") %&gt;% \n               tidyr::pivot_longer(cols = -\"ID\",\n                                   names_to = \"cell_type\",\n                                   values_to = \"proportion\")\n\ndf.order &lt;- predictions %&gt;%\n            tidyr::pivot_wider(id_cols = group.by,\n                               names_from = split.by,\n                               values_from = \"proportion\") %&gt;%\n            tibble::column_to_rownames(group.by) %&gt;%\n            as.matrix()\ndf.order[is.na(df.order)] &lt;- 0\n\ncol_order &lt;- colnames(df.order)[stats::hclust(stats::dist(t(df.order), method = \"euclidean\"), method = \"ward.D\")$order]\nrow_order &lt;- c(\"Astrocytes\",\n               \"Endothelial\",\n               \"Microglia\",\n               \"Neurons\",\n               \"OPC\",\n               \"Pericytes\",\n               \n               \"IPC-like\",\n               \"CP-like\",\n               \"Cilia-like\",\n               \"RG-like\",\n               \"OPC-like\",\n               \"NPC-like\",\n               \"Mesenchymal-like\",\n               \"Immune-like\",\n               \"Hypoxic\",\n               \n               \"NMF-MP2\",\n               \"NMF-MP3\",\n               \"NMF-MP5\",\n               \"NMF-MP8\",\n               \"SHH-1\",\n               \"SHH-2\",\n               \"SHH-3\",\n               \"MYC-1\",\n               \"Unannotated\")\n\npredictions &lt;- predictions %&gt;% \n               dplyr::mutate(\"{group.by}\" := factor(.data[[group.by]], levels = row_order),\n                             \"{split.by}\" := factor(.data[[split.by]], levels = col_order),\n                             \"proportion\" = .data$proportion * 100)\n\ncolors.use &lt;- c(\"Unannotated\"              = \"#C0C0C0\",\n                \"TME\" = \"grey25\",\n                \n                \"IPC-like\"                 = \"#be920e\",\n                \n                \"CP-like\"                  = \"#be660e\",\n                \"Cilia-like\"               = \"#be0e0e\",\n                \n                \"Mesenchymal-like\"         = \"#0ebe66\",\n                \n                \"RG-like\"                  = \"#0497c8\",\n                \"NPC-like\"                 = \"#0466c8\",\n                \"OPC-like\"                 = \"#0435c8\",\n                \n                \"Hypoxic\"                  = \"#92be0e\",\n                \"Immune-like\"              = \"#920ebe\",\n                \n                \n                \"Astrocytes\"               = \"#BA331CFF\",\n                \"Neurons\"                  = \"#787F00FF\",\n                \"OPC\"                      = \"#009257FF\",\n                \"Microglia\"                = \"#0092AAFF\", \n                \"Endothelial\"              = \"#5E4CCDFF\",\n                \"Pericytes\"                = \"#a32978\")\n\n\n\n\ncolors.gradient &lt;- SCpubr:::compute_continuous_palette(name = \"YlGnBu\",\n                                                       use_viridis = FALSE,\n                                                       direction = 1,\n                                                       enforce_symmetry = FALSE)\n\naxis.parameters &lt;- SCpubr:::handle_axis(flip = flip,\n                                        group.by = rep(\"A\", length(unique(sample$Final_Annotation))),\n                                        group = name,\n                                        counter = 1,\n                                        axis.text.x.angle = axis.text.x.angle,\n                                        plot.title.face = plot.title.face,\n                                        plot.subtitle.face = plot.subtitle.face,\n                                        plot.caption.face = plot.caption.face,\n                                        axis.title.face = axis.title.face,\n                                        axis.text.face = axis.text.face,\n                                        legend.title.face = \"bold\",\n                                        legend.text.face = \"plain\")\n\np1 &lt;- predictions %&gt;% \n  dplyr::filter(.data$cell_type %in% c(\"Astrocytes\",\n                                              \"Endothelial\",\n                                              \"Microglia\",\n                                              \"Neurons\",\n                                              \"OPC\",\n                                              \"Pericytes\"),\n                !(.data$ID %in% c(\"H049-031P\",\n                                  \"H049-0P37\",\n                                  \"H049-33S1\",\n                                  \"H049-T5XL\",\n                                  \"H049-WB9V\",\n                                  \"H049-8XZZ\",\n                                  \"H049-9U3Q\",\n                                  \"H049-FG38\",\n                                  \"H049-GP41\",\n                                  \"H049-GWNW\",\n                                  \"H049-3NB9\",\n                                  \"H049-FEGQ\",\n                                  \"H049-0CWK\",\n                                  \"H049-NY74\",\n                                  \"H049-WYZN\",\n                                  \"H049-X973\"))) %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                         y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                         fill = .data$proportion)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$proportion, 1), \n                                  color = ifelse(.data$proportion &gt; 50, \"white\", \"black\")), \n                     size = 3) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(\"TME\") +\n  ggplot2::ylab(\"ATRT-TYR\") +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = ggplot2::element_blank(),\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                 axis.ticks.y.right =ggplot2::element_blank(),\n                 axis.text.y.left = axis.parameters$axis.text.y.left,\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = ggplot2::element_blank(),\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\np1 &lt;- SCpubr:::modify_continuous_legend(p = p1,\n                                        legend.title = \"Percentage\",\n                                        legend.aes = \"fill\",\n                                        legend.type = \"colorbar\",\n                                        legend.position = \"bottom\",\n                                        legend.width = 1,\n                                        legend.length = 12.5,\n                                        legend.framewidth = 0.5,\n                                        legend.tickwidth = 0.5,\n                                        legend.framecolor = \"grey50\",\n                                        legend.tickcolor = \"white\")\n\n\np2 &lt;- predictions %&gt;% \n  dplyr::filter(!(.data$cell_type %in% c(\"Astrocytes\",\n                                       \"Endothelial\",\n                                       \"Microglia\",\n                                       \"Neurons\",\n                                       \"OPC\",\n                                       \"Pericytes\")),\n                !(.data$ID %in% c(\"H049-031P\",\n                                  \"H049-0P37\",\n                                  \"H049-33S1\",\n                                  \"H049-T5XL\",\n                                  \"H049-WB9V\",\n                                  \"H049-8XZZ\",\n                                  \"H049-9U3Q\",\n                                  \"H049-FG38\",\n                                  \"H049-GP41\",\n                                  \"H049-GWNW\",\n                                  \"H049-3NB9\",\n                                  \"H049-FEGQ\",\n                                  \"H049-0CWK\",\n                                  \"H049-NY74\",\n                                  \"H049-WYZN\",\n                                  \"H049-X973\"))) %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                         y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                         fill = .data$proportion)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$proportion, 1), \n                                  color = ifelse(.data$proportion &gt; 50, \"white\", \"black\")), \n                     size = 3) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(\"Tumor\") +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = ggplot2::element_blank(),\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                 axis.ticks.y.right = ggplot2::element_line(color = \"black\"),\n                 axis.text.y.left = axis.parameters$axis.text.y.left,\n                 axis.text.y.right = ggplot2::element_text(color = \"black\"),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = ggplot2::element_blank(),\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\np2 &lt;- SCpubr:::modify_continuous_legend(p = p2,\n                                        legend.title = \"Percentage\",\n                                        legend.aes = \"fill\",\n                                        legend.type = \"colorbar\",\n                                        legend.position = \"bottom\",\n                                        legend.width = 1,\n                                        legend.length = 12.5,\n                                        legend.framewidth = 0.5,\n                                        legend.tickwidth = 0.5,\n                                        legend.framecolor = \"grey50\",\n                                        legend.tickcolor = \"white\")\n\n\n\np3 &lt;- predictions %&gt;% \n  dplyr::filter(.data$cell_type %in% c(\"Astrocytes\",\n                                       \"Endothelial\",\n                                       \"Microglia\",\n                                       \"Neurons\",\n                                       \"OPC\",\n                                       \"Pericytes\"),\n                .data$ID %in% c(\"H049-031P\",\n                                \"H049-0P37\",\n                                \"H049-33S1\",\n                                \"H049-T5XL\",\n                                \"H049-WB9V\",\n                                \"H049-8XZZ\",\n                                \"H049-9U3Q\",\n                                \"H049-FG38\",\n                                \"H049-GP41\",\n                                \"H049-GWNW\")) %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                         y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                         fill = .data$proportion)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$proportion, 1), \n                                  color = ifelse(.data$proportion &gt; 50, \"white\", \"black\")), \n                     size = 3) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(\"ATRT-SHH\") +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = ggplot2::element_blank(),\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                 axis.ticks.y.right =ggplot2::element_blank(),\n                 axis.text.y.left = axis.parameters$axis.text.y.left,\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = ggplot2::element_blank(),\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\np3 &lt;- SCpubr:::modify_continuous_legend(p = p3,\n                                        legend.title = \"Percentage\",\n                                        legend.aes = \"fill\",\n                                        legend.type = \"colorbar\",\n                                        legend.position = \"bottom\",\n                                        legend.width = 1,\n                                        legend.length = 12.5,\n                                        legend.framewidth = 0.5,\n                                        legend.tickwidth = 0.5,\n                                        legend.framecolor = \"grey50\",\n                                        legend.tickcolor = \"white\")\n\n\np4 &lt;- predictions %&gt;% \n  dplyr::filter(!(.data$cell_type %in% c(\"Astrocytes\",\n                                         \"Endothelial\",\n                                         \"Microglia\",\n                                         \"Neurons\",\n                                         \"OPC\",\n                                         \"Pericytes\")),\n                .data$ID %in% c(\"H049-031P\",\n                                \"H049-0P37\",\n                                \"H049-33S1\",\n                                \"H049-T5XL\",\n                                \"H049-WB9V\",\n                                \"H049-8XZZ\",\n                                \"H049-9U3Q\",\n                                \"H049-FG38\",\n                                \"H049-GP41\",\n                                \"H049-GWNW\")) %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                         y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                         fill = .data$proportion)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$proportion, 1), \n                                  color = ifelse(.data$proportion &gt; 50, \"white\", \"black\")), \n                     size = 3) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = ggplot2::element_blank(),\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                 axis.ticks.y.right = ggplot2::element_line(color = \"black\"),\n                 axis.text.y.left = axis.parameters$axis.text.y.left,\n                 axis.text.y.right = ggplot2::element_text(color = \"black\"),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = ggplot2::element_blank(),\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\np4 &lt;- SCpubr:::modify_continuous_legend(p = p4,\n                                        legend.title = \"Percentage\",\n                                        legend.aes = \"fill\",\n                                        legend.type = \"colorbar\",\n                                        legend.position = \"bottom\",\n                                        legend.width = 1,\n                                        legend.length = 12.5,\n                                        legend.framewidth = 0.5,\n                                        legend.tickwidth = 0.5,\n                                        legend.framecolor = \"grey50\",\n                                        legend.tickcolor = \"white\")\n\n\np5 &lt;- predictions %&gt;% \n  dplyr::filter(.data$cell_type %in% c(\"Astrocytes\",\n                                       \"Endothelial\",\n                                       \"Microglia\",\n                                       \"Neurons\",\n                                       \"OPC\",\n                                       \"Pericytes\"),\n                .data$ID %in% c(\"H049-3NB9\",\n                                \"H049-FEGQ\",\n                                \"H049-0CWK\",\n                                \"H049-NY74\",\n                                \"H049-WYZN\",\n                                \"H049-X973\")) %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                         y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                         fill = .data$proportion)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$proportion, 1), \n                                  color = ifelse(.data$proportion &gt; 50, \"white\", \"black\")), \n                     size = 3) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(\"ATRT-MYC\") +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                 axis.ticks.y.right =ggplot2::element_blank(),\n                 axis.text.y.left = axis.parameters$axis.text.y.left,\n                 axis.text.y.right = ggplot2::element_blank(),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\np5 &lt;- SCpubr:::modify_continuous_legend(p = p5,\n                                        legend.title = \"Percentage\",\n                                        legend.aes = \"fill\",\n                                        legend.type = \"colorbar\",\n                                        legend.position = \"bottom\",\n                                        legend.width = 1,\n                                        legend.length = 12.5,\n                                        legend.framewidth = 0.5,\n                                        legend.tickwidth = 0.5,\n                                        legend.framecolor = \"grey50\",\n                                        legend.tickcolor = \"white\")\n\n\np6 &lt;- predictions %&gt;% \n  dplyr::filter(!(.data$cell_type %in% c(\"Astrocytes\",\n                                         \"Endothelial\",\n                                         \"Microglia\",\n                                         \"Neurons\",\n                                         \"OPC\",\n                                         \"Pericytes\")),\n                .data$ID %in% c(\"H049-3NB9\",\n                                \"H049-FEGQ\",\n                                \"H049-0CWK\",\n                                \"H049-NY74\",\n                                \"H049-WYZN\",\n                                \"H049-X973\")) %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(x = if(base::isFALSE(flip)){.data[[group.by]]} else {.data[[split.by]]},\n                                         y = if(base::isFALSE(flip)){.data[[split.by]]} else {.data[[group.by]]},\n                                         fill = .data$proportion)) + \n  ggplot2::geom_tile(color = \"white\", linewidth = 0.5) +\n  ggplot2::geom_text(ggplot2::aes(label = round(.data$proportion, 1), \n                                  color = ifelse(.data$proportion &gt; 50, \"white\", \"black\")), \n                     size = 3) +\n  ggplot2::scale_y_discrete(expand = c(0, 0)) +\n  ggplot2::scale_x_discrete(expand = c(0, 0),\n                            position = \"top\") +\n  ggplot2::guides(y.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[split.by]]))),\n                  x.sec = SCpubr:::guide_axis_label_trans(~paste0(levels(.data[[group.by]])))) + \n  ggplot2::coord_equal() +\n  ggplot2::scale_color_identity() + \n  ggplot2::scale_fill_gradientn(colors = colors.gradient,\n                                na.value = \"grey75\",\n                                name = \"Percentage\",\n                                breaks = c(0, 25, 50, 75, 100),\n                                labels = c(\"0\", \"25\", \"50\", \"75\", \"100\"),\n                                limits = c(0, 100)) + \n  ggplot2::xlab(NULL) +\n  ggplot2::ylab(NULL) +\n  ggplot2::theme_minimal(base_size = font.size) +\n  ggplot2::theme(axis.ticks.x.bottom = axis.parameters$axis.ticks.x.bottom,\n                 axis.ticks.x.top = axis.parameters$axis.ticks.x.top,\n                 axis.ticks.y.left = axis.parameters$axis.ticks.y.left,\n                 axis.ticks.y.right = ggplot2::element_line(color = \"black\"),\n                 axis.text.y.left = axis.parameters$axis.text.y.left,\n                 axis.text.y.right = ggplot2::element_text(color = \"black\"),\n                 axis.text.x.top = axis.parameters$axis.text.x.top,\n                 axis.text.x.bottom = axis.parameters$axis.text.x.bottom,\n                 axis.title.x.bottom = axis.parameters$axis.title.x.bottom,\n                 axis.title.x.top = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 axis.title.y.right = ggplot2::element_blank(),\n                 axis.title.y.left = axis.parameters$axis.title.y.left,\n                 strip.background = axis.parameters$strip.background,\n                 strip.clip = axis.parameters$strip.clip,\n                 strip.text = axis.parameters$strip.text,\n                 legend.position = \"bottom\",\n                 axis.line = ggplot2::element_blank(),\n                 plot.title = ggplot2::element_text(face = plot.title.face, hjust = 0),\n                 plot.subtitle = ggplot2::element_text(face = plot.subtitle.face, hjust = 0),\n                 plot.caption = ggplot2::element_text(face = plot.caption.face, hjust = 1),\n                 plot.title.position = \"plot\",\n                 panel.grid = ggplot2::element_blank(),\n                 panel.grid.minor.y = ggplot2::element_line(color = \"white\", linewidth = 1),\n                 text = ggplot2::element_text(family = font.type),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\", size = font.size),\n                 legend.title = ggplot2::element_text(face = \"bold\", size = font.size),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n                 panel.border = ggplot2::element_rect(fill = NA, color = border.color, linewidth = 1),\n                 panel.grid.major = ggplot2::element_blank(),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.spacing = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.x = ggplot2::unit(0, \"cm\"),\n                 panel.spacing.y = ggplot2::unit(0, \"cm\"))\n\np6 &lt;- SCpubr:::modify_continuous_legend(p = p6,\n                                        legend.title = \"Percentage\",\n                                        legend.aes = \"fill\",\n                                        legend.type = \"colorbar\",\n                                        legend.position = \"bottom\",\n                                        legend.width = 1,\n                                        legend.length = 12.5,\n                                        legend.framewidth = 0.5,\n                                        legend.tickwidth = 0.5,\n                                        legend.framecolor = \"grey50\",\n                                        legend.tickcolor = \"white\")\n\n\n\n\np &lt;- patchwork::wrap_plots(A = p1 | p2,\n                           B = p3 | p4,\n                           C = p5 | p6,\n                           ncol = 1,\n                           heights = c(9, 10, 6),\n                           guides = \"collect\")  + \n  patchwork::plot_annotation(theme = ggplot2::theme(legend.position = \"bottom\",\n                                                    plot.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")))\n\n\n\nproportions.barplot &lt;- as.data.frame(predictions)\nproportions.barplot.tme &lt;- proportions.barplot[proportions.barplot$cell_type %in%  c(\"Astrocytes\", \"Neurons\", \"OPC\", \"Microglia\", \"Endothelial\", \"Pericytes\"), ]\nproportions.barplot.tme &lt;- proportions.barplot.tme %&gt;% \n                           dplyr::group_by(ID) %&gt;% \n                           dplyr::summarise(\"cell_type\" = \"TME\",\n                                            \"proportion\" = sum(.data$proportion))\n\nproportions.barplot.tumor &lt;- proportions.barplot[!(proportions.barplot$cell_type %in%  c(\"Astrocytes\", \"Neurons\", \"OPC\", \"Microglia\", \"Endothelial\", \"Pericytes\")), ]\n\nproportions.barplot &lt;- rbind(proportions.barplot.tme, proportions.barplot.tumor)\n\nproportions.barplot$cell_type &lt;- as.character(proportions.barplot$cell_type)\nproportions.barplot$cell_type[proportions.barplot$cell_type %in%  c(\"Astrocytes\", \"Neurons\", \"OPC\", \"Microglia\", \"Endothelial\", \"Pericytes\")] &lt;- \"TME\"\n\nproportions.barplot$subtype &lt;- \"ATRT-TYR\"\nproportions.barplot$subtype[proportions.barplot$ID %in% c(\"H049-031P\",\n                                                               \"H049-0P37\",\n                                                               \"H049-33S1\",\n                                                               \"H049-T5XL\",\n                                                               \"H049-WB9V\",\n                                                               \"H049-8XZZ\",\n                                                               \"H049-9U3Q\",\n                                                               \"H049-FG38\",\n                                                               \"H049-GP41\",\n                                                               \"H049-GWNW\")] &lt;- \"ATRT-SHH\"\n\nproportions.barplot$subtype[proportions.barplot$ID %in% c(\"H049-3NB9\",\n                                                               \"H049-FEGQ\",\n                                                               \"H049-0CWK\",\n                                                               \"H049-NY74\",\n                                                               \"H049-WYZN\",\n                                                               \"H049-X973\")] &lt;- \"ATRT-MYC\"\n\nproportions.barplot$subtype &lt;- factor(proportions.barplot$subtype, levels = c(\"ATRT-TYR\", \"ATRT-SHH\", \"ATRT-MYC\"))\n\nid.order &lt;- proportions.barplot %&gt;% dplyr::filter(.data$cell_type == \"IPC-like\") %&gt;% dplyr::arrange(dplyr::desc(.data$proportion)) %&gt;% dplyr::pull(.data$ID)\nproportions.barplot$ID &lt;- factor(proportions.barplot$ID, levels = rev(id.order))\n\ncelltype.order &lt;- c(\"TME\", \"Unannotated\",\n                    \"Immune-like\", \"Hypoxic\",\n                    \"CP-like\", \"Cilia-like\",\n                    \"RG-like\", \"NPC-like\", \"OPC-like\",\n                    \"Mesenchymal-like\",\n                    \"IPC-like\")\n\nproportions.barplot$cell_type &lt;- factor(proportions.barplot$cell_type, levels = rev(celltype.order))\n\ncolors.use &lt;- c(\"Unannotated\"              = \"#C0C0C0\",\n                \"TME\" = \"grey25\",\n                \n                \"IPC-like\"                 = \"#be920e\",\n                \n                \"CP-like\"                  = \"#be660e\",\n                \"Cilia-like\"               = \"#be0e0e\",\n                \n                \"Mesenchymal-like\"         = \"#0ebe66\",\n                \n                \"RG-like\"                  = \"#0497c8\",\n                \"NPC-like\"                 = \"#0466c8\",\n                \"OPC-like\"                 = \"#0435c8\",\n                \n                \"Hypoxic\"                  = \"#92be0e\",\n                \"Immune-like\"              = \"#920ebe\",\n                \n                \n                \"Astrocytes\"               = \"#BA331CFF\",\n                \"Neurons\"                  = \"#787F00FF\",\n                \"OPC\"                      = \"#009257FF\",\n                \"Microglia\"                = \"#0092AAFF\", \n                \"Endothelial\"              = \"#5E4CCDFF\",\n                \"Pericytes\"                = \"#a32978\")\n\n\np0 &lt;- proportions.barplot %&gt;% \n  ggplot2::ggplot(mapping = ggplot2::aes(y = .data$ID,\n                                         x = .data$proportion,\n                                         fill = .data$cell_type)) + \n  ggplot2::geom_col(color = \"black\", position = \"fill\", linewidth = 0.25) + \n  ggplot2::scale_fill_manual(values = colors.use, name = \"\") + \n  ggplot2::facet_grid(rows = ggplot2::vars(subtype), scales = \"free\", space = \"free\") + \n  ggplot2::theme_minimal(base_size = 20) +\n  ggplot2::labs(y = \"ID\",\n                x = \"Proportion\") +\n  ggplot2::theme(axis.title = ggplot2::element_text(color = \"black\",\n                                                    face = \"bold\"),\n                 axis.line.x = ggplot2::element_blank(),\n                 axis.line.y = ggplot2::element_line(color = \"black\"),\n                 axis.text.x = ggplot2::element_text(color = \"black\", face = \"plain\", angle = 0),\n                 axis.text.y = ggplot2::element_text(color = \"black\", face = \"plain\"),\n                 axis.ticks.y = ggplot2::element_line(color = \"black\"),\n                 axis.ticks.x = ggplot2::element_line(color = \"black\"),\n                 plot.title.position = \"plot\",\n                 plot.title = ggplot2::element_text(face = \"bold\", hjust = 0.5),\n                 plot.subtitle = ggplot2::element_text(face = \"plain\", hjust = 0),\n                 plot.caption = ggplot2::element_text(face = \"italic\", hjust = 1),\n                 panel.grid = ggplot2::element_blank(),\n                 text = ggplot2::element_text(family = \"sans\"),\n                 plot.caption.position = \"plot\",\n                 legend.text = ggplot2::element_text(face = \"plain\"),\n                 legend.position = \"bottom\",\n                 legend.title = ggplot2::element_text(face = \"bold\"),\n                 legend.justification = \"center\",\n                 plot.margin = ggplot2::margin(t = 0, r = 10, b = 0, l = 10),\n                 plot.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 panel.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 legend.background = ggplot2::element_rect(fill = \"white\", color = \"white\"),\n                 strip.text = ggplot2::element_text(color = \"black\", face = \"bold\"),\n                 strip.background = ggplot2::element_blank())"
  },
  {
    "objectID": "visualization/Figure_S8.html",
    "href": "visualization/Figure_S8.html",
    "title": "Figure S8",
    "section": "",
    "text": "#Script used to make the figures used in supplementary figure S8\n\n#Libraries needed\nlibrary(SCpubr)\nlibrary(Seurat)\nlibrary(Signac)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ComplexHeatmap)\nlibrary(UCell)\nlibrary(circlize)\n\n#Set the directory to where you have your data or want to store your output\nsetwd(\"/home/ipaassen/ATRT_sc_atlas/\")\n\n#Load seurat object and other datasets needed\nATRT &lt;- readRDS(\"/data/projects/p868_CRISPR-RNA_TP53-RB1/irene/231207_ATRT_multiome_EnrichmentUMAP_newclusters.RDS\")\nmotifs &lt;- readRDS(\"motif_to_genesymbol.RDS\") #To convert motif IDs to TF binding to it\ngene_markers &lt;- readRDS(\"10X_v3_frozen_samples_normalized_TME_and_TB_annotated_integrated_with_metacell_mapping_reannotated_top100_markers.rds\") #Marker genes as identified in analysis pipeline of the snRNA dataset\n\n#Define colour coding\nsubtype_colors &lt;- c(\"ATRT_SHH\" = \"#253A79\", \"ATRT_MYC\" = \"#056A37\", \"ATRT_TYR\" = \"#931A1D\", \"ecMRT_BrainMet\" = \"#10C663\")\nidents_colors &lt;- c(\"SHH.unspecified\" = \"#A4C2D6\",\"CP.like\" = \"#be660e\",\"Cilia.like\" = \"#be0e0e\",\"OPC.like\" = \"#0435c8\", \n                   \"Rest\" = \"#84D3E5\", 'NPC.like' = \"#0466c8\",'Hypoxic' = \"#2A7072\",\n                   'Mesenchymal.like' = \"#0ebe66\",\"IPC.like\" = \"#be920e\", \n                   \"MYC.TYR.unspecified\" = \"#D6A4A9\", \"RG.like\" = \"#0497c8\")\nTF_colours &lt;- c(\"MYC.Mes\" = \"#024431\", \"SHH.OPC\" =  \"#211D5C\", \"SHH.NPC\" = \"#20428A\", \"TYR.cilia\" = \"#8C1730\", \"SHH.shared\" = \"#0078BB\")\n\n\n\n#\n#\n############### Script for figures #######################\n#\n#\n\n\n#Supplementary Figure 6, Panel A\n#\n#Stacked barplot of identities represented ber patient sample of the snMultiome data\ndo_BarPlot(ATRT, split.by = 'sample1', group.by = 'Enrich.scores',colors.use = idents_colors, \n           position = 'fill', order = F) \n\n#\n#\n############## Calculation of Differential motif activity per mature-like cells vs. IPC-like cells #########################\n#\n#\n\n\n#Settings for differenital motif activityt calling\nATRT &lt;- SetIdent(ATRT, value = \"Enrich.scores\")\nDefaultAssay(ATRT) &lt;- 'chromvar'\n\n#\n#\n######### Supplementary Figure S8, Panel B #############\n#\n#\n\n#Mesenchymal-like\nMesenchymal.TFs &lt;- FindMarkers(\n  ATRT,\n  ident.1 = \"IPC.like\",\n  ident.2 = \"Mesenchymal.like\",\n  logfc.threshold = 0,\n  min.pct = 0.1,\n  only.pos = F)\n\n#Make vulcanoplot of p-value and log2FC\nSCpubr::do_VolcanoPlot(sample = ATRT,\n                       de_genes = Mesenchymal.TFs,\n                       pval_cutoff = 1e-40,\n                       FC_cutoff = 5,\n                       plot.title = \"IPC.vs.Mesenchymal\",add_gene_tags = F) + scale_color_brewer(palette = \"OrRd\", direction = -1)\n\n\n#Filter for highest MYC marker genes\nMesenchymal.specific &lt;-Mesenchymal.TFs[Mesenchymal.TFs$avg_log2FC &lt; -5 & Mesenchymal.TFs$p_val_adj &lt; 1e-40,]\nMesenchymal.specific$gene &lt;- motifs$symbol[motifs$motif %in% rownames(Mesenchymal.specific)]\n\n#\n#\n######### Supplementary Figure S8, Panel C #############\n#\n#\n\n#NPC-like\nNPC.TFs &lt;- FindMarkers(\n  ATRT,\n  ident.1 = \"IPC.like\",\n  ident.2 = \"NPC.like\",\n  logfc.threshold = 0,\n  min.pct = 0.1,\n  only.pos = F,subset.ident = SHH)\n\n#Make vulcanoplot of p-value and log2FC\nSCpubr::do_VolcanoPlot(sample = ATRT,\n                       de_genes = NPC.TFs,\n                       pval_cutoff = 1e-70,\n                       FC_cutoff = 1,\n                       plot.title = \"ATRT-SHH: IPC.vs.NPC\",add_gene_tags = F) + scale_color_brewer(palette = \"OrRd\", direction = -1)\n\n\n#Filter for highest SHH marker genes\nNPC.specific &lt;-NPC.TFs[NPC.TFs$avg_log2FC &lt; -1 & NPC.TFs$p_val_adj &lt; 1e-70,]\nNPC.specific$gene &lt;- motifs$symbol[motifs$motif %in% rownames(NPC.specific)]\n\n\n#\n#\n######### Supplementary Figure S8, Panel D #############\n#\n#\n\n# OPC-like vs IPC. like\nOPC.TFs &lt;- FindMarkers(\n  ATRT,\n  ident.1 = \"IPC.like\",\n  ident.2 = c(\"OPC.like\"),\n  logfc.threshold = 0,\n  min.pct = 0.1,\n  only.pos = F)\n\n# Make vulcanoplot of p-value and log2FC\nSCpubr::do_VolcanoPlot(sample = ATRT,\n                       de_genes = OPC.TFs,\n                       pval_cutoff = 1e-10,\n                       FC_cutoff =0.5,\n                       plot.title = \"ATRT-SHH: IPC.vs.NPC+OPC\",add_gene_tags = F) + scale_color_brewer(palette = \"OrRd\", direction = -1)\n\n\n#Filter for highest SHH marker genes\nOPC.specific &lt;-OPC.TFs[OPC.TFs$avg_log2FC &lt; -0.5 & OPC.TFs$p_val_adj &lt; 1e-10,]\nOPC.specific$gene &lt;- motifs$symbol[motifs$motif %in% rownames(OPC.specific)]\n\n\n#\n#\n######### Supplementary Figure S8, Panel E #############\n#\n#\n#\n\n#Motifs against NPC and OPC both together\nOPC.and.NPC &lt;- list(NPC.like = rownames(NPC.specific), OPC.like = rownames(OPC.specific))\nOPC.and.NPC.motifs &lt;- intersect(rownames(NPC.specific),rownames(OPC.specific)) #Subset for motifs found in both\n\noverlap_genes &lt;- motifs$symbol[motifs$motif %in% OPC.and.NPC.motifs] #Get TFs behind motif ID\noverlap_genes &lt;- gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)\",\"\",overlap_genes)\nGroup_order &lt;- list(\"Enrich.scores\" = c(\"IPC.like\",\"RG.like\" ,\"NPC.like\",\"OPC.like\",\"SHH.unspecified\",\"Mesenchymal.like\",\"CP.like\",\"Cilia.like\",\"MYC.TYR.unspecified\"))\n\n\n#\n#\n######### Supplementary Figure S8, Panel F #############\n#\n#\n#\n\n# Expression Heatmap of the chromvar scores\ndo_ExpressionHeatmap(ATRT, features = OPC.and.NPC.motifs, groups.order = Group_order,axis.text.x.angle = 90,\n                     group.by = \"Enrich.scores\", assay = \"chromvar\", enforce_symmetry = T, features.order = OPC.and.NPC.motifs, \n                     diverging.palette = \"PuOr\",legend.title = \"Chromvar score\")\n\n# Expression heatmap of the TFs underlying the motif IDs\ndo_ExpressionHeatmap(ATRT, features = overlap_genes, features.order = overlap_genes, groups.order = Group_order,axis.text.x.angle = 90,\n                     group.by = \"Enrich.scores\", assay = \"RNA\",slot = \"scale.data\", enforce_symmetry = T)\n\n\n#\n#\n## Supplementary Figure S8 Panel G\n#\n#\n\n#Make enrichUMAP of RFX3 gene expression\ndo_FeaturePlot(ATRT, features = c(\"RFX4\"), reduction = \"umap\", \n               assay = 'RNA', order = T, legend.title = \"LMX1A expression\",\n               legend.position = \"bottom\")\n\n#\n#\n## Supplementary Figure S8 Panel H\n#\n#\n\n#RFX4 is motif ID MA0799.1\ndo_FeaturePlot(ATRT, features = c(\"MA0799.1\"), reduction = \"umap\", assay = 'chromvar', order = T, enforce_symmetry = F,\n               legend.title = \"LMX1A chromvar score\",\n               label.size = 4,\n               use_viridis = T,\n               viridis.palette = \"inferno\",\n               viridis.direction = -1,\n               min.cutoff = 0,\n               legend.position = \"bottom\")\n\n\n\n#\n#\n######### Supplementary Figure 6 Panel I #############\n#\n#\n\n\n#Cilia-like\nCilia.TFs &lt;- FindMarkers(\n  ATRT,\n  ident.1 = \"IPC.like\",\n  ident.2 = \"Cilia.like\",\n  logfc.threshold = 0,\n  min.pct = 0.1,\n  only.pos = F)\n\n\n#Filter for highest TYR marker genes\nCilia.specific &lt;-Cilia.TFs[Cilia.TFs$avg_log2FC &lt; -1 & Cilia.TFs$p_val_adj &lt; 1e-40,]\nCilia.genes &lt;- motifs$symbol[motifs$motif %in% rownames(Cilia.specific)]\nCilia.specific$gene &lt;- motifs$symbol[motifs$motif %in% rownames(Cilia.specific)]\n\norder_genes &lt;- unique(c(rownames(Cilia.specific)))\nTYR_motifs &lt;- motifs[motifs$motif %in% order_genes,]\nTYR_motifs$symbol &lt;- gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)\",\"\",TYR_motifs$symbol)\nGroup_order &lt;- list(\"Enrich.scores\" = c(\"IPC.like\",\"RG.like\" ,\"NPC.like\",\"OPC.like\",\"SHH.unspecified\",\"Mesenchymal.like\",\"CP.like\",\"Cilia.like\",\"MYC.TYR.unspecified\"))\n\n#heatmap on chromvar scores\ndo_ExpressionHeatmap(ATRT, features = TYR_motifs$motif, groups.order = Group_order,\n                     group.by = \"Enrich.scores\", assay = \"chromvar\", enforce_symmetry = T, features.order = TYR_motifs$motif, \n                     diverging.palette = \"PuOr\",legend.title = \"Chromvar score\",axis.text.x.angle = 90)\n\n#heatmap on TF expression \ndo_ExpressionHeatmap(ATRT, features = TYR_motifs$symbol, features.order = TYR_motifs$symbol, groups.order = Group_order,\n                     group.by = \"Enrich.scores\", assay = \"RNA\",slot = \"scale.data\", enforce_symmetry = T, axis.text.x.angle = 90)"
  },
  {
    "objectID": "visualization/Figure_S9.html",
    "href": "visualization/Figure_S9.html",
    "title": "Figure S9",
    "section": "",
    "text": "# S9A\nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\nIdents(srat) &lt;- \"tumor_id\"\n\nsrat_sub &lt;- subset(srat, idents = c(\"ATRT-15-TYR\",\"ATRT-340\"))\ndp_1 &lt;- DotPlot(srat_sub, \"LMX1A\", group.by = \"group\")\n\n\nsrat_sub &lt;- subset(srat, idents = c(\"ATRT-207\",\"ATRT-243\"))\ndp_2 &lt;- DotPlot(srat_sub, \"LMX1A\", group.by = \"group\")\n\n\nsrat_sub &lt;- subset(srat, idents = c(\"ATRT-05\",\"ATRT-173\",\"ATRT-256\"))\ndp_3 &lt;- DotPlot(srat_sub, \"LMX1A\", group.by = \"group\")\n\n\ndf &lt;- rbind.data.frame(cbind.data.frame(dp_1$data, Subtype = \"TYR\"),\n                       cbind.data.frame(dp_2$data, Subtype = \"MYC\"),\n                       cbind.data.frame(dp_3$data, Subtype = \"SHH\"))\n\ncolnames(df)[c(2,1)] &lt;- c(\"Percent expressed\",\"Average expression\")\n\nggplot(df, aes(x = Subtype, y = id, size = `Percent expressed`, color = `Average expression`)) +\n  geom_point() +\n  theme_bw() +\n  ylab(\"Cell type\") +\n  xlab(\"ATRT subtype\") +\n  ggtitle(\"LMX1A expression\") +\n  scale_color_viridis_c()\n\n\n\n# S9B - Top \n\nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Create cell segmentation object\ncell_boundaries_df &lt;- as.data.frame(data.table::fread(\"cell_boundaries.csv.gz\")) # Xenium on-board analysis output\ncell_boundaries_df &lt;- cell_boundaries_df[cell_boundaries_df$cell_id %in% colnames(srat),1:3]\nnames(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\nsegmentation &lt;- CreateSegmentation(cell_boundaries_df)\nrm(cell_boundaries_df)\n\n# Create centroids object\ncell_info &lt;- as.data.frame(data.table::fread( \"cells.csv.gz\"))\ncell_centroid_df &lt;- data.frame(\n  x = cell_info$x_centroid,\n  y = cell_info$y_centroid,\n  cell = cell_info$cell_id,\n  stringsAsFactors = FALSE\n)\nrm(cell_info)\ncell_centroid_df &lt;- cell_centroid_df[cell_centroid_df$cell %in% colnames(srat),]\ncentroids &lt;- CreateCentroids(cell_centroid_df)\n\n# Add FOV to Seurat object\ncoords &lt;- CreateFOV(\n  coords = list( centroids = centroids, segmentation = segmentation),\n  type = c(\"segmentation\", \"centroids\"),\n  assay = \"Xenium\"\n)\n\nsrat[[\"fov\"]] &lt;- coords\nrm(segmentation, centroids, coords)\n\n# Crop object and make the plot\n\n#### Below are the per-sample cropping coordinates\n\n# ATRT-340\ncropped.coords &lt;- Crop(srat[[\"fov\"]], x = c(17000, 17500), y = c(2600, 3100), coords = \"plot\")\n\n# ATRT-173\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(2800, 3300), x = c(14700, 15200), coords = \"plot\")\n\n# ATRT-256\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(9000, 9500), x = c(10000, 10500), coords = \"plot\")\n\n# ATRT-243\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(5000, 5500), x = c(9000, 9500), coords = \"plot\")\n\n\nsrat[[\"crop\"]] &lt;- cropped.coords\nsrat$group[is.na(srat$group)] &lt;- \"Unannotated\"\nIdents(srat) &lt;- \"group\"\n\npal &lt;- c(\"Astrocytes\" = \"grey75\",\n         \"Cilia-like\" = \"#be0e0e\",\n         \"CP-like\" = \"#be660e\",\n         \"Endothelial\" = \"grey75\",\n         \"IPC-like\" = \"#be920e\",\n         \"Mesenchymal-like\" = \"#0ebe66\",\n         \"Microglia_Immune\" = \"grey75\",\n         \"Mural\" = \"grey75\",\n         \"Neurons\" = \"grey75\",\n         \"NPC-like\" = \"#0466c8\",\n         \"OPC\" = \"grey75\",\n         \"OPC-like\" = \"#0435c8\",\n         \"RG-like\" = \"#0497c8\",\n         \"Necrotic\" = \"grey75\",\n         \"Unannotated\" = \"grey75\")\n\n\nImageDimPlot(srat, fov = \"crop\", boundaries = \"segmentation\", dark.background = F, flip_xy = T, group.by = \"group\", cols = cpal, axes = T, border.size = 0.025) + NoLegend()\n\n\n\n# S9B - Bottom\nlibrary(Seurat)\nlibrary(tidyverse)\n\nsrat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n\n# Create cell segmentation object\ncell_boundaries_df &lt;- as.data.frame(data.table::fread(\"cell_boundaries.csv.gz\")) # Xenium on-board analysis output\ncell_boundaries_df &lt;- cell_boundaries_df[cell_boundaries_df$cell_id %in% colnames(srat),1:3]\nnames(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\nsegmentation &lt;- CreateSegmentation(cell_boundaries_df)\nrm(cell_boundaries_df)\n\n# Create centroids object\ncell_info &lt;- as.data.frame(data.table::fread( \"cells.csv.gz\"))\ncell_centroid_df &lt;- data.frame(\n  x = cell_info$x_centroid,\n  y = cell_info$y_centroid,\n  cell = cell_info$cell_id,\n  stringsAsFactors = FALSE\n)\nrm(cell_info)\ncell_centroid_df &lt;- cell_centroid_df[cell_centroid_df$cell %in% colnames(srat),]\ncentroids &lt;- CreateCentroids(cell_centroid_df)\n\n# Add FOV to Seurat object\ncoords &lt;- CreateFOV(\n  coords = list( centroids = centroids, segmentation = segmentation),\n  type = c(\"segmentation\", \"centroids\"),\n  assay = \"Xenium\"\n)\n\nsrat[[\"fov\"]] &lt;- coords\nrm(segmentation, centroids, coords)\n\n# Crop object and make the plot\n\n#### Below are the per-sample cropping coordinates\n\n# ATRT-340\ncropped.coords &lt;- Crop(srat[[\"fov\"]], x = c(17000, 17500), y = c(2600, 3100), coords = \"plot\")\n\n# ATRT-173\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(2800, 3300), x = c(14700, 15200), coords = \"plot\")\n\n# ATRT-256\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(9000, 9500), x = c(10000, 10500), coords = \"plot\")\n\n# ATRT-243\ncropped.coords &lt;- Crop(srat[[\"fov\"]], y = c(5000, 5500), x = c(9000, 9500), coords = \"plot\")\n\n\nsrat[[\"crop\"]] &lt;- cropped.coords\n\nImageFeaturePlot(srat, features = \"LMX1A\",fov = \"crop\", boundaries = \"segmentation\", \n                 border.size = NA, dark.background = F, border.color = NA) + NoLegend() + ggtitle(\"\") + scale_fill_viridis_c(option = \"D\")\n\n\n# Figure S9C\nSCpubr::do_DotPlot(sample, \n                   features = LMX1A_target_correlation_scores %&gt;% dplyr::filter(.data$correlation &gt;= 0.9) %&gt;% dplyr::pull(.data$gene), \n                   zscore.data = TRUE, \n                   cluster = TRUE, \n                   font.size = 12, \n                   dot.scale = 6)"
  },
  {
    "objectID": "visualization/Figure_S10.html",
    "href": "visualization/Figure_S10.html",
    "title": "Figure S10",
    "section": "",
    "text": "sample &lt;- readRDS(path.to.SC.sample)\nsample$Full_Annotation &lt;- as.character(sample$Full_Annotation)\n\n# S10A\np1 &lt;- SCpubr::do_EnrichmentHeatmap(sample,\n                                   flavor = \"UCell\",\n                                   input_gene_list = ATRT_RNA_Xenium_AddOn_Panel,\n                                   group.by = \"Full_Annotation\",\n                                   max.cutoff = 0.5,\n                                   groups.order = list(\"Full_Annotation\" = rev(c(\"IPC-like\",\n                                                         \"CP-like\",\n                                                         \"Cilia-like\",\n                                                         \"RG-like\",\n                                                         \"NPC-like\",\n                                                         \"OPC-like\",\n                                                         \"Mesenchymal-like\",\n                                                         \"Hypoxic\",\n                                                         \"Immune-like\",\n                                                         \"NMF-MP2\",\n                                                         \"NMF-MP3\",\n                                                         \"NMF-MP5\",\n                                                         \"NMF-MP8\",\n                                                         \"SHH-1\",\n                                                         \"SHH-2\",\n                                                         \"SHH-3\",\n                                                         \"MYC-1\",\n                                                         \"Unannotated\",\n                                                         \"Astrocytes\",\n                                                         \"Neurons\",\n                                                         \"OPC\",\n                                                         \"Microglia & Immune\",\n                                                         \"Endothelial\",\n                                                         \"Pericytes\"))),\n                                  features.order = c(\"IPC-like\",\n                                                     \"CP-like\",\n                                                     \"Cilia-like\",\n                                                     \"RG-like\",\n                                                     \"NPC-like\",\n                                                     \"OPC-like\",\n                                                     \"Mesenchymal-like\",\n                                                     \"Hypoxic\",\n                                                     \"Immune-like\",\n                                                     \"NMF-MP2\",\n                                                     \"NMF-MP3\",\n                                                     \"NMF-MP5\",\n                                                     \"NMF-MP8\",\n                                                     \"SHH-1\",\n                                                     \"SHH-2\",\n                                                     \"SHH-3\",\n                                                     \"MYC-1\",\n                                                     \"Unannotated\",\n                                                     \"Astrocytes\",\n                                                     \"Neurons\",\n                                                     \"OPC\",\n                                                     \"Microglia & Immune\",\n                                                     \"Endothelial\",\n                                                     \"Pericytes\"))\n\nsample$Full_Annotation &lt;- factor(sample$Full_Annotation, levels = c(\"IPC-like\",\n                                                                        \"CP-like\",\n                                                                        \"Cilia-like\",\n                                                                        \"RG-like\",\n                                                                        \"NPC-like\",\n                                                                        \"OPC-like\",\n                                                                        \"Mesenchymal-like\",\n                                                                        \"Hypoxic\",\n                                                                        \"Immune-like\",\n                                                                        \"NMF-MP2\",\n                                                                        \"NMF-MP3\",\n                                                                        \"NMF-MP5\",\n                                                                        \"NMF-MP8\",\n                                                                        \"SHH-1\",\n                                                                        \"SHH-2\",\n                                                                        \"SHH-3\",\n                                                                        \"MYC-1\",\n                                                                        \"Unannotated\",\n                                                                        \"Astrocytes\",\n                                                                        \"Neurons\",\n                                                                        \"OPC\",\n                                                                        \"Microglia & Immune\",\n                                                                        \"Endothelial\",\n                                                                        \"Pericytes\"))\n# S10B\np2 &lt;- SCpubr::do_DotPlot(sample,\n                         features = ATRT_RNA_Xenium_AddOn_Panel[c(\"IPC-like\",\n                                                                  \"CP-like\",\n                                                                  \"Cilia-like\",\n                                                                  \"RG-like\",\n                                                                  \"NPC-like\",\n                                                                  \"OPC-like\",\n                                                                  \"Mesenchymal-like\",\n                                                                  \"Hypoxic\",\n                                                                  \"Immune-like\",\n                                                                  \"NMF-MP2\",\n                                                                  \"NMF-MP3\",\n                                                                  \"NMF-MP5\",\n                                                                  \"NMF-MP8\",\n                                                                  \"SHH-1\",\n                                                                  \"SHH-2\",\n                                                                  \"SHH-3\",\n                                                                  \"MYC-1\",\n                                                                  \"Unannotated\",\n                                                                  \"Astrocytes\",\n                                                                  \"Neurons\",\n                                                                  \"OPC\",\n                                                                  \"Microglia & Immune\",\n                                                                  \"Endothelial\",\n                                                                  \"Pericytes\")],\n                         group.by = \"Full_Annotation\",\n                         max.cutoff = 2)\n\n\n# Code commented due to compilation problems with Quarto.\n\n# # S10C\n# import numpy as np\n# import pandas as pd\n# \n# import matplotlib.pyplot as plt\n# import seaborn as sns\n# \n# import scanpy as sc\n# import squidpy as sq\n# \n# import os\n# from copy import deepcopy\n# \n# #### This script was run per tumor sample to generate the plots in Figures 3C and S7C, but the steps are identical\n# \n# # Read expression matrix\n# adata = sc.read_10x_h5(\n#     filename = \"cell_feature_matrix.h5\"\n# )\n# \n# # Read the cell info file\n# df = pd.read_csv(\n#     \"cells.csv.gz\"\n# )\n# \n# df.set_index(adata.obs_names, inplace = True)\n# adata.obs = df.copy()\n# \n# adata.obsm[\"spatial\"] = adata.obs[[\"x_centroid\",\"y_centroid\"]].copy().to_numpy()\n# \n# # Read RCTD annotations\n# annotations = pd.read_csv(\n#     \"ANNOTATIONS.csv\"\n# )\n# \n# adata_sub = adata[annotations[\"cell_id\"]].copy()\n# del(adata)\n# \n# annotations.set_index(adata_sub.obs_names, inplace = True)\n# adata_sub.obs[\"type\"]= annotations[\"group\"].copy().astype('category')\n# \n# import matplotlib.colors\n# \n# colors = [\"#BA531CFF\",\"#be660e\",\"#be0e0e\",\"#5E4CCDFF\",\"#be920e\",\"#0ebe66\",\"#0092AAFF\",\"#a32978\",\"#0466c8\",\n#          \"#BFBFBF\",\"#787F00FF\",\"#009257FF\",\"#0435c8\", \"#0497c8\"]\n# \n# cmap = matplotlib.colors.ListedColormap(colors)\n# \n# \n# sq.pl.spatial_scatter(adata_sub, \n#                       shape = None, \n#                       color = \"type\", \n#                       size = 1, \n#                       library_id = \"spatial\",\n#                       img = False, \n#                       figsize = (15,15),\n#                       palette = cmap,\n#                       frameon = False,\n#                       colorbar = False,\n#                       title = \"\",\n#                       legend_loc = None\n#                      )\n# \n# \n# \n# ```\n# \n# ```{r}\n# #| eval: false\n# \n# # S10D \n# \n# library(Seurat)\n# library(tidyverse)\n# \n# \n# srat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n# data &lt;- srat@meta.data %&gt;% select(group, sample)\n# \n# # Build proportion table\n# df &lt;- as.data.frame(prop.table(table(data$group,data$sample), 2))\n# \n# \n# df$subtype &lt;- plyr::mapvalues(df$Var2,\n#                               from = c(\"ATRT-05\",\n#                                        \"ATRT-15-RV4\",\n#                                        \"ATRT-173\",\n#                                        \"ATRT-207\",\n#                                        \"ATRT-243\",\n#                                        \"ATRT-256\",\n#                                        \"ATRT-340\"),\n#                               to = c(\"ATRT-SHH\",\"ATRT-TYR\",\"ATRT-SHH\",\"ATRT-MYC\",\"ATRT-MYC\",\"ATRT-SHH\",\"ATRT-TYR\")\n# )\n# colnames(df) &lt;- c(\"Annotation\",\"Tumor\",\"Freq\",\"Subtype\")\n# \n# \n# \n# cpal &lt;- c(\"Astrocytes\" = \"#BA531CFF\",\n#           \"Cilia-like\" = \"#be0e0e\",\n#           \"CP-like\" = \"#be660e\",\n#           \"Endothelial\" = \"#5E4CCDFF\",\n#           \"IPC-like\" = \"#be920e\",\n#           \"Mesenchymal-like\" = \"#0ebe66\",\n#           \"Microglia & immune\" = \"#0092AAFF\",\n#           \"Pericytes\" = \"#a32978\",\n#           \"Neurons\" = \"#787F00FF\",\n#           \"NPC-like\" = \"#0466c8\",\n#           \"OPC\" = \"#009257FF\",\n#           \"OPC-like\" = \"#0435c8\",\n#           \"RG-like\" = \"#0497c8\",\n#           \"Necrotic\" = \"grey55\")\n# \n# df$Annotation &lt;- factor(df$Annotation, levels = c(\"Astrocytes\",\n#                                                   \"Neurons\",\n#                                                   \"OPC\",\n#                                                   \"Microglia & immune\",\n#                                                   \"Endothelial\",\n#                                                   \"Pericytes\",\n#                                                   \"IPC-like\",\n#                                                   \"CP-like\",\n#                                                   \"Cilia-like\",\n#                                                   \"OPC-like\",\n#                                                   \"NPC-like\",\n#                                                   \"RG-like\",\n#                                                   \"Mesenchymal-like\",\n#                                                   \"Necrotic\"))\n# \n# \n# \n# df$Tumor &lt;- factor(df$Tumor, levels = c(\"ATRT-05\",\n#                                         \"ATRT-173\",\n#                                         \"ATRT-256\",\n#                                         \"ATRT-15-RV4\",\n#                                         \"ATRT-340\",\n#                                         \"ATRT-207\",\n#                                         \"ATRT-243\"))\n# \n# ggplot(df, aes(x = Tumor, y = Freq, fill = Annotation)) +\n#   geom_bar(position = \"fill\", stat = \"identity\", color = \"black\", linewidth = 0.1) +\n#   xlab(\"\") +\n#   ylab(\"Proportion of tumor cells\") +\n#   scale_fill_manual(values = cpal) +\n#   theme_classic() +\n#   facet_grid(cols = vars(Subtype), scales = \"free\", space = \"free\") +\n#   theme(legend.title = element_blank(),\n#         legend.text = element_text(size = 6, color = \"black\"),\n#         legend.position = \"none\",\n#         axis.title = element_text(size = 6, colour = \"black\"),\n#         axis.text = element_text(size = 6, color = \"black\"),\n#         axis.text.x = element_text(angle = 90, hjust = 1),\n#         axis.ticks = element_line(size = 0.25), \n#         axis.line = element_line(size = 0.25), \n#         strip.text = element_text(size = 6, color = \"black\"),\n#         strip.background = element_blank(),\n#         legend.key.size = unit(3,\"mm\"),\n#         legend.key.spacing.y = unit(1,\"mm\"))\n# \n# # S10E\n# library(Seurat)\n# library(tidyverse)\n# \n# srat &lt;- readRDS(\"OBJECT.rds\") # Read Seurat object containing annotated cells (post-normalization)\n# \n# # Remove Non-malignant cells\n# Idents(srat) &lt;- \"group\"\n# srat &lt;- subset(srat, cells = WhichCells(srat, idents = c(\"Astrocytes\",\n#                                                          \"Neurons\",\n#                                                          \"OPC\",\n#                                                          \"Microglia_Immune\",\n#                                                          \"Endothelial\",\n#                                                          \"Mural\")), invert = T)\n# \n# \n# # Use the Seurat built-in DotPlot function to pull the necessary data easily\n# data &lt;-DotPlot(srat, features = c(\"CCNB2\",\"CDK1\",\"CENPF\",\n#                                   \"MKI67\",\"PCNA\",\n#                                   \"TOP2A\"))$data\n# \n# # Re-order IDs for plotting\n# data$id &lt;- factor(data$id, levels = rev(c(\"IPC-like\",\n#                                           \"CP-like\",\n#                                           \"Cilia-like\",\n#                                           \"OPC-like\",\n#                                           \"NPC-like\",\n#                                           \"RG-like\",\n#                                           \"Mesenchymal-like\")),\n#                   labels = rev(c(\"IPC-like\",\n#                                  \"CP-like\",\n#                                  \"Cilia-like\",\n#                                  \"OPC-like\",\n#                                  \"NPC-like\",\n#                                  \"RG-like\",\n#                                  \"Mesenchymal-like\")))\n# \n# ggplot(data, aes(y = id, x = features.plot, size = pct.exp, fill = avg.exp.scaled)) +\n#   geom_point(shape=21, stroke = 0.1) +\n#   theme_classic() +\n#   scale_size_area(max_size = 3.5) +\n#   scale_fill_distiller(palette = \"RdBu\", limits=c(-2.5,2.5)) +\n#   labs(fill=\"Average expression\", size = \"Percent expressed\") +\n#   xlab(\"\") +\n#   ylab(\"\") +\n#   theme(axis.text.y = element_text(size=6, color = \"black\"),\n#         axis.text.x = element_text(size=5, color = \"black\", face = \"italic\"),\n#         legend.text = element_text(size=6, color = \"black\"),\n#         legend.title = element_text(size=6, color = \"black\"),\n#         legend.key.size = unit(0.75, 'lines'),\n#         legend.position = \"none\", \n#         axis.ticks = element_line(size = 0.25), \n#         axis.line = element_line(size = 0.25))"
  },
  {
    "objectID": "visualization/Figure_S11.html",
    "href": "visualization/Figure_S11.html",
    "title": "Figure S11",
    "section": "",
    "text": "#Organoid figure manuscript \n\n\n#Figures Supplementary Figure 9 \n#Single-cell organoid data\n\n#Libraries to load\nlibrary(SCpubr)\nlibrary(Seurat)\nlibrary(Signac)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nlibrary(UCell)\nlibrary(AUCell)\n\n#Set to your working directory were your files are \nsetwd(\"/home/ipaassen/ATRT_sc_atlas/\")\n\n#Load organoidseurat object\norganoids &lt;- readRDS(\"/data/projects/p868_CRISPR-RNA_TP53-RB1/irene/241113_organoids_enrichumapadded.RDS\")\n\n#Set colours to use for the\nidents_colors_organoids  &lt;- c(\"SHH-intermediate\" = \"#A4C2D6\",\"IPC.like\" = \"#be920e\",\"OPC.like\" = \"#0435c8\", 'NPC.like' = \"#0466c8\",  \"RG.like\" = \"#0497c8\")\n\n\n# Ready for visualization.\n\n#Figure Supplementary Figure 11\n\n#Panel A\ndo_DimPlot(sample, reduction = \"umap\", group.by = \"Enrich.scores\",colors.use = idents_colors_organoids)\n\n#Panel B\ndo_DimPlot(sample, reduction = \"wnn.umap\", group.by = \"Enrich.scores\", colors.use = idents_colors_organoids)\n\n#Panel C\ndo_BarPlot(organoids, group.by = \"Enrich.scores\", split.by = 'sample1',  position = 'fill',colors.use = idents_colors_organoids)\n\n#Panel D\ndo_FeaturePlot(sample, features = 'RG.like_scaled', order = T, plot.title = \"RG-like\")\n\n#Panel E\ndo_FeaturePlot(sample, features = 'OPC.like_scaled', order = T, plot.title = \"OPC-like\")\n\n#Panel F\ndo_FeaturePlot(sample, features = 'NPC.like_scaled', order = T, plot.title = \"NPC-like\")\n\n#Panel G\ndo_FeaturePlot(sample, features = 'IPC.like_scaled', order = T, plot.title = \"IPC-like\")\n\n\n#Calculate IPC percentage (only used in the text)\nipc.05 &lt;- organoids$Enrich.scores[organoids$sample1 == \"ATRT05\"]\ntable(ipc.05) #from length of ipc.05\n\nipc.04 &lt;- organoids$Enrich.scores[organoids$sample1 == \"ATRT04\"]\ntable(ipc.04) #from length of ipc.04\n\nipc.15 &lt;- organoids$Enrich.scores[organoids$sample1 == \"ATRT15_ASG3\"]\ntable(ipc.15) #from length of ipc.15\n\n#Save tsv of RNA and ATAC data\nwrite.table(Seurat::GetAssayData(organoids, assay = \"peaks\", slot = \"counts\"), \n            col.names = TRUE, \n            row.names = TRUE, \n            quote = FALSE, \n            sep = \"\\t\", \n            file = gzfile(\"ATRT_organoids_ATAC_peaks_counts_raw.tsv.gz\"))\n\n#Save umap coordinates and metadata files\ndata &lt;- sample@meta.data %&gt;% \n  tibble::rownames_to_column(var = \"Cell\") %&gt;% \n  dplyr::left_join(y = sample@reductions$umap_unintegrated@cell.embeddings %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = \"Cell\"),\n                   by = \"Cell\") %&gt;%  \n  dplyr::left_join(y = sample@reductions$umap.harmony@cell.embeddings %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(var = \"Cell\"),\n                   by = \"Cell\")"
  },
  {
    "objectID": "visualization/Figure_S12.html",
    "href": "visualization/Figure_S12.html",
    "title": "Figure S12",
    "section": "",
    "text": "library(magrittr)\n\n# Figure S12B ---------\npath_to_dds_object &lt;- \"path_to_dds_object\"\ndds &lt;- readRDS(path_to_dds_object)\n\n# Transform data.\nvsd &lt;- DESeq2::vst(dds)\n\ncolors.use.treatment &lt;- c(\"DMSO\"         = \"#A78A7F\",\n                          \"Entinostat\"   = \"#9CA77F\",\n                          \"RO31\"         = \"#7F9CA7\",\n                          \"Thiostrepton\" = \"#8A7FA7\")\n\n# PCA plot.\np1 &lt;- DESeq2::plotPCA(vsd, intgroup = c(\"treatment\")) + \n      ggplot2::theme_bw(base_size = 16) + \n      ggplot2::coord_cartesian() + \n      ggplot2::scale_color_manual(values = stats::setNames(colors.use.treatment, levels(dds$treatment))) + \n      ggplot2::guides(\"color\" = ggplot2::guide_legend(title = \"Treatment\", title.position = \"top\", title.hjust = 0.5, ncol = 2)) + \n      ggplot2::theme(legend.position = \"bottom\",\n                     legend.title = ggplot2::element_text(face = \"bold\"),\n                     axis.title.x = ggplot2::element_blank())\np1$labels$colour &lt;- \"Treatment\"\np1$layers[[1]]$aes_params$size &lt;- 8\np1$layers[[1]]$aes_params$alpha &lt;- 0.75\n  \np2 &lt;- DESeq2::plotPCA(vsd, intgroup = c(\"model\")) + \n      ggplot2::theme_bw(base_size = 16) + \n      ggplot2::coord_cartesian() + \n      ggplot2::scale_color_manual(values = c(\"ATRT04\" = \"#243a76\", \"ATRT08\" = \"#096837\")) +\n      ggplot2::guides(\"color\" = ggplot2::guide_legend(title = \"Model\", title.position = \"top\", title.hjust = 0.5, ncol = 1)) + \n      ggplot2::theme(legend.position = \"bottom\",\n                     legend.title = ggplot2::element_text(face = \"bold\"),\n                     axis.title.y = ggplot2::element_blank(),\n                     axis.text.y = ggplot2::element_blank(),\n                     axis.ticks.y = ggplot2::element_blank())\np2$labels$colour &lt;- \"Model\"\np2$layers[[1]]$aes_params$size &lt;- 8\np2$layers[[1]]$aes_params$alpha &lt;- 0.75\n\np3 &lt;- DESeq2::plotPCA(vsd, intgroup = c(\"replicate\")) + \n      ggplot2::theme_bw(base_size = 16) + \n      ggplot2::coord_cartesian() + \n      ggplot2::scale_color_manual(values = stats::setNames(SCpubr::do_ColorPalette(\"steelblue\", opposite = TRUE), levels(dds$replicate))) +\n      ggplot2::guides(\"color\" = ggplot2::guide_legend(title = \"Replicate\", title.position = \"top\", title.hjust = 0.5, ncol = 1)) + \n      ggplot2::theme(legend.position = \"bottom\",\n                     legend.title = ggplot2::element_text(face = \"bold\"),\n                     axis.title.y = ggplot2::element_blank(),\n                     axis.text.y = ggplot2::element_blank(),\n                     axis.ticks.y = ggplot2::element_blank(),\n                     axis.title.x = ggplot2::element_blank())\np3$labels$colour &lt;- \"Replicate\"\np3$layers[[1]]$aes_params$size &lt;- 8\np3$layers[[1]]$aes_params$alpha &lt;- 0.5\n\np &lt;- p1 | p2 | p3\n\n# Figure S12C ---------\npath.to.activities &lt;- \"path_to_activities\"\nlist.activities &lt;- readRDS(\"/omics/odcf/analysis/hipo/hipo_049/ATRT/ATRT_Publication_GitHub/datasets/ATRT_RNA_bulk_activities.rds\")\n\npath.to.metadata &lt;- \"path_to_metadata\"\nmetadata &lt;- readRDS(path.to.metadata)\n\nlist.heatmaps &lt;- list()\n\nactivities &lt;- list.activities[[\"SC_Markers\"]]\n  \ncolors.use.model &lt;- c(\"ATRT04\" = \"#243a76\", \"ATRT08\" = \"#096837\")\ncolors.use.treatment &lt;- c(\"DMSO\"         = \"#A78A7F\",\n                          \"Entinostat\"   = \"#9CA77F\",\n                          \"RO31\"         = \"#7F9CA7\",\n                          \"Thiostrepton\" = \"#8A7FA7\")\n\n\nfor (model in c(\"AT04\", \"AT08\")){\n  \n  act &lt;- activities[stringr::str_detect(activities$condition, model), ]\n  metadata.use &lt;- metadata[stringr::str_detect(metadata$condition, model), c(\"treatment\", \"model\")]\n  colnames(metadata.use) &lt;- c(\"Treatment\", \"Model\")\n  \n  acts_wide &lt;- act %&gt;% \n               tidyr::pivot_wider(id_cols = \"condition\", names_from = \"source\", values_from = \"score\") %&gt;% \n               tibble::column_to_rownames(var = \"condition\") %&gt;% \n               as.matrix() \n  \n  p &lt;- pheatmap::pheatmap(mat = t(acts_wide),\n                          scale = \"row\",\n                          cluster_rows = FALSE,\n                          cluster_cols = FALSE,\n                          treeheight_row = 0,\n                          treeheight_col = 0,\n                          fontsize = 16,\n                          annotation_col = metadata.use,\n                          color = grDevices::colorRampPalette(colors = rev(RColorBrewer::brewer.pal(\"RdBu\", n = 11)))(100),\n                          annotation_colors = list(\"Model\" = colors.use.model,\n                                                   \"Treatment\" = colors.use.treatment),\n                          border_color = \"white\",\n                          gaps_column = c(2, 4, 6)) %&gt;% \n     ggplotify::as.ggplot()\n  list.heatmaps[[model]] &lt;- p\n}\np &lt;- list.heatmaps$AT04 | list.heatmaps$AT08"
  }
]