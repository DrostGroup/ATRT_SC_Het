# RNA velocity {.unnumbered}


```{bash}
# Compute spliced/unspliced
velocyto run10x \
-m "hs38_rmsk.gtf" \
"10X_folder" \
"genes.gtf"
```


```{r}
sample <- readRDS(path.to.SC.data.behjati)

markers <- readRDS(path.to.top100markers)
markers2 <- readRDS(path.to.supervised.annotation.markers)

names(markers)[names(markers) == "Microglia & Immune"] <- "Microglia"
markers <- markers[c("Microglia", "Endothelial", "Astrocytes", "Pericytes", "OPC", "Neurons")]
markers <- c(markers, markers2)



Seurat::DefaultAssay(sample) <- "RNA"
sample$Groups <- NULL
# This computes Enrichment scores and sets them up as an assay.
out <- SCpubr::do_EnrichmentHeatmap(sample, input_gene_list = markers, flavor = "UCell", return_object = TRUE)

# Retrieve the Seurat object.
sample <- out$Object

# Scale data and perform dimensional reduction.
sample <- Seurat::ScaleData(sample)
sample <- Seurat::RunPCA(sample, features = rownames(sample))
sample <- Seurat::RunUMAP(sample, dims = 1:14)
sample <- Seurat::FindNeighbors(sample, reduction = "pca", dims = 1:14)
sample <- Seurat::FindClusters(sample, reduction = "pca", dims = 1:14)

SCpubr::do_ExpressionHeatmap(sample, features = rownames(sample), group.by = "seurat_clusters", slot = "scale.data", enforce_symmetry = TRUE, max.cutoff = 2.5) | SCpubr::do_DimPlot(sample, group.by = "seurat_clusters", label = TRUE, repel = TRUE, legend.position = "none")

sample$tumor_annotation <- "Other"
sample$seurat_clusters <- as.character(sample$seurat_clusters)
sample$tumor_annotation[sample$seurat_clusters == "6"] <- "Neurons"
sample$tumor_annotation[sample$seurat_clusters == "9"] <- "Pericytes"
sample$tumor_annotation[sample$seurat_clusters == "4"] <- "IPC-like"
sample$tumor_annotation[sample$seurat_clusters == "2"] <- "Cilia-like"
sample$tumor_annotation[sample$seurat_clusters == "1"] <- "CP-like"

annotation <- sample$tumor_annotation
umap <- Seurat::Embeddings(sample, "umap")

out <- umap %>% 
  as.data.frame() %>% 
  tibble::rownames_to_column(var = "cell") %>% 
  dplyr::left_join(y = {as.data.frame(annotation) %>% tibble::rownames_to_column(var = "cell")},
                   by = "cell") %>% 
  dplyr::mutate("cell" = stringr::str_replace_all(.data$cell, "-1", "x"),
                "cell" = paste0("CG_SB_NB8358_count:", .data$cell))



Seurat::DefaultAssay(sample) <- "RNA"
genes <- data.frame("Gene" = rownames(sample))

write.table(out,
            file = "metadata.tsv",
            quote = FALSE,
            sep = "\t",
            row.names = FALSE,
            col.names = TRUE)
write.table(genes,
            file = "genes.tsv",
            quote = FALSE,
            sep = "\t",
            row.names = FALSE,
            col.names = TRUE)






# CNV analysis to determine malignant cells.

out <- read.table("metadata.tsv", sep = "\t")
colnames(out) <- out[1,]
out <- out[2:nrow(out), ]

sample$annotation_use <- out$annotation


annotation <- data.frame(row.names = colnames(sample), "Annotation" = sample$annotation_use)
gene_ordering_file <- "path"
ref_clusters <- "Pericytes"

# Create the inferCNV object.
infercnv_obj <- infercnv::CreateInfercnvObject(raw_counts_matrix = as.matrix(sample@assays$RNA@counts),
                                               annotations_file = annotation,
                                               delim = "\t",
                                               gene_order_file = gene_ordering_file,
                                               ref_group_names = ref_clusters)

# Run inferCNV.
cnv_analysis_folder <- "" # This path needs to not exist in your filesystem otherwise inferCNV will stop complaining that the path exists.

infercnv_obj <- infercnv::run(infercnv_obj,
                              cutoff = 0.1,  # use 1 for smart-seq, 0.1 for 10x-genomics
                              min_cells_per_gene = 3, # Default.
                              out_dir = cnv_analysis_folder,  # dir is auto-created for storing outputs
                              cluster_by_groups = TRUE,   # Cluster by groups.
                              denoise = TRUE,
                              HMM = TRUE,
                              HMM_type = "i6",
                              window_length = 201,
                              num_threads = 8,
                              resume_mode=FALSE)

# For further denoising, you can apply median filtering, but this might remove true signal from the plot.
infercnv_obj_median_filtered = infercnv::apply_median_filtering(infercnv_obj)

infercnv::plot_cnv(infercnv_obj_median_filtered,
                   out_dir =  cnv_analysis_folder,
                   output_filename = 'infercnv.median_filtered',
                   x.range = "auto",
                   x.center = 1,
                   title = "infercnv",
                   color_safe_pal = FALSE)


scores <- SCpubr::do_CNVHeatmap(sample = sample, chromosome_locations = SCpubr::human_chr_locations,
                                include_chr_arms = F, infercnv_object = infercnv_obj_median_filtered, group.by = "annotation_use", return_object = TRUE)

SCpubr::do_FeaturePlot(scores$Object, "22", enforce_symmetry = TRUE, )

cells.use <- names(scores$Object@assays$CNV_scores$counts["22", ][scores$Object@assays$CNV_scores$counts["22", ] <= 0.96])
cells.use <- stringr::str_replace_all(cells.use, "-1", "x")
cells.use <- sapply(cells.use, function(x){paste0("CG_SB_NB8358_count:", x)})
cells.use <- data.frame("cell" = cells.use,
                        "filter" = cells.use)

write.table(cells.use, file = "cells_use.tsv",
            sep = "\t",
            col.names = TRUE,
            row.names = FALSE,
            quote = FALSE)

```


```{python}
import scanpy as sc
import scvelo as scv
import pandas as pd
import matplotlib.pyplot as plt

# Load meatadata
metadata = pd.read_csv(path.to.metadata, sep = "\t")
genes = pd.read_csv(path.to.genes, sep = "\t")
cells = pd.read_csv(path.to.cells, sep = "\t")

metadata = metadata.rename(columns = {"cell": "CellID"})
adata.obs = adata.obs.merge(metadata, on = "CellID", how = "left")

cells = cells.rename(columns = {"cell": "CellID"})
adata.obs = adata.obs.merge(cells, on = "CellID", how = "left")

# Drop NAs
adata = adata[adata.obs["filter"].notna(), :]


# Normalizing to median total counts
sc.pp.normalize_total(adata)
# Logarithmize the data
sc.pp.log1p(adata)
# HVG.
sc.pp.highly_variable_genes(adata, n_top_genes=2000)
# PCA.
sc.tl.pca(adata)
sc.pp.neighbors(adata, n_neighbors=10, n_pcs=20)  # Adjust based on dataset size
# UMAP.
sc.tl.umap(adata)
# Clustering
sc.tl.leiden(adata, flavor="igraph", n_iterations=2)

scv.pp.filter_and_normalize(adata, min_shared_counts=20, n_top_genes=2000)
scv.pp.moments(adata, n_pcs=20, n_neighbors=30)
scv.tl.velocity(adata)
scv.tl.velocity_graph(adata)


sc.pl.umap(adata, color=["annotation"], add_outline=True, legend_loc = "on data")

# Inspect top markers genes.
adata.var_names_make_unique()
markers = pd.read_csv("/omics/odcf/analysis/hipo/hipo_049/ATRT/ATRT_Publication_GitHub/datasets/ATRT_RNA_top100_markers_across_populations.tsv", sep = "\t")

markers_use = {"IPC-like": [gene for gene in markers["IPC.like"] if gene in adata.var_names][1:7],
               "CP-like": [gene for gene in markers["CP.like"] if gene in adata.var_names][1:7],
               "Cilia-like":  [gene for gene in markers["Cilia.like"] if gene in adata.var_names][1:7],
               "Endothelial":  [gene for gene in markers["Endothelial"] if gene in adata.var_names][1:7],
               "NPC-like":  [gene for gene in markers["NPC.like"] if gene in adata.var_names][1:7],
               "OPC-like":  [gene for gene in markers["OPC.like"] if gene in adata.var_names][1:7],
               "RG-like":  [gene for gene in markers["RG.like"] if gene in adata.var_names][1:7],
              "Mesenchymal-like":  [gene for gene in markers["Mesenchymal.like"] if gene in adata.var_names][1:7]}

sc.pl.dotplot(adata, markers_use, groupby="annotation", standard_scale="var")
```

